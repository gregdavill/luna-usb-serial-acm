/* Generated by Yosys 0.9+4309 (git sha1 9432400ec, clang 12.0.0-3ubuntu1~21.04.2 -fPIC -Os) */

module ACMRequestHandlers(request, data_requested, status_requested, rx_ready_for_response, valid, ack, stall, last, \type );
  reg \initial  = 0;
  wire \$1 ;
  wire \$3 ;
  wire \$5 ;
  wire \$7 ;
  wire \$9 ;
  output ack;
  reg ack;
  input data_requested;
  output last;
  reg last;
  input [7:0] request;
  input rx_ready_for_response;
  output stall;
  reg stall;
  input status_requested;
  input [1:0] \type ;
  output valid;
  reg valid;
  assign \$9  = status_requested | data_requested;
  assign \$1  = \type  == 1'h1;
  assign \$3  = \type  == 1'h1;
  assign \$5  = \type  == 1'h1;
  assign \$7  = \type  == 1'h1;
  always @* begin
    if (\initial ) begin end
    ack = 1'h0;
    casez (\$1 )
      1'h1:
          casez (request)
            8'h20:
                casez (rx_ready_for_response)
                  1'h1:
                      ack = 1'h1;
                endcase
          endcase
    endcase
  end
  always @* begin
    if (\initial ) begin end
    valid = 1'h0;
    casez (\$3 )
      1'h1:
          casez (request)
            8'h20:
                casez (status_requested)
                  1'h1:
                      valid = 1'h1;
                endcase
          endcase
    endcase
  end
  always @* begin
    if (\initial ) begin end
    last = 1'h0;
    casez (\$5 )
      1'h1:
          casez (request)
            8'h20:
                casez (status_requested)
                  1'h1:
                      last = 1'h1;
                endcase
          endcase
    endcase
  end
  always @* begin
    if (\initial ) begin end
    stall = 1'h0;
    casez (\$7 )
      1'h1:
          (* full_case = 32'd1 *)
          casez (request)
            8'h20:
                /* empty */;
            default:
                casez (\$9 )
                  1'h1:
                      stall = 1'h1;
                endcase
          endcase
    endcase
  end
endmodule

module LunaUSBSerialDevice(ulpi__data__o, ulpi__data__oe, ulpi__clk__o, ulpi__stp, ulpi__nxt__i, ulpi__dir__i, ulpi__rst, rx__valid, rx__ready, rx__first, rx__last, rx__payload, tx__valid, tx__ready, tx__first, tx__last, tx__payload, clk_sync, clk_usb, rst_sync, usb_holdoff, ulpi__data__i);
  input clk_sync;
  input clk_usb;
  input rst_sync;
  output rx__first;
  output rx__last;
  output [7:0] rx__payload;
  input rx__ready;
  output rx__valid;
  input tx__first;
  input tx__last;
  input [7:0] tx__payload;
  output tx__ready;
  input tx__valid;
  output ulpi__clk__o;
  input [7:0] ulpi__data__i;
  output [7:0] ulpi__data__o;
  output ulpi__data__oe;
  input ulpi__dir__i;
  input ulpi__nxt__i;
  output ulpi__rst;
  output ulpi__stp;
  wire usb0_connect;
  wire usb0_first;
  wire \usb0_first$2 ;
  wire usb0_last;
  wire \usb0_last$3 ;
  wire [7:0] usb0_payload;
  wire [7:0] \usb0_payload$4 ;
  wire usb0_ready;
  wire \usb0_ready$5 ;
  wire usb0_usb_clk;
  wire usb0_usb_rst;
  wire usb0_valid;
  wire \usb0_valid$1 ;
  output usb_holdoff;
  wire usb_reset_clk;
  wire usb_reset_phy_reset;
  wire usb_reset_phy_stop;
  wire usb_reset_rst;
  usb0 usb0 (
    .connect(1'h1),
    .first(usb0_first),
    .\first$2 (\usb0_first$2 ),
    .last(usb0_last),
    .\last$3 (\usb0_last$3 ),
    .payload(usb0_payload),
    .\payload$4 (\usb0_payload$4 ),
    .ready(usb0_ready),
    .\ready$5 (\usb0_ready$5 ),
    .ulpi__clk__o(ulpi__clk__o),
    .ulpi__data__i(ulpi__data__i),
    .ulpi__data__o(ulpi__data__o),
    .ulpi__data__oe(ulpi__data__oe),
    .ulpi__dir__i(ulpi__dir__i),
    .ulpi__nxt__i(ulpi__nxt__i),
    .ulpi__rst(ulpi__rst),
    .ulpi__stp(ulpi__stp),
    .usb_clk(usb0_usb_clk),
    .usb_rst(usb0_usb_rst),
    .valid(usb0_valid),
    .\valid$1 (\usb0_valid$1 )
  );
  usb_reset usb_reset (
    .clk(usb_reset_clk),
    .phy_reset(usb_reset_phy_reset),
    .phy_stop(usb_reset_phy_stop),
    .rst(usb_reset_rst)
  );
  assign usb0_connect = 1'h1;
  assign \usb0_ready$5  = rx__ready;
  assign rx__payload = \usb0_payload$4 ;
  assign rx__last = \usb0_last$3 ;
  assign rx__first = \usb0_first$2 ;
  assign rx__valid = \usb0_valid$1 ;
  assign tx__ready = usb0_ready;
  assign usb0_payload = tx__payload;
  assign usb0_last = tx__last;
  assign usb0_first = tx__first;
  assign usb0_valid = tx__valid;
  assign usb_reset_rst = rst_sync;
  assign usb0_usb_clk = clk_usb;
  assign usb_reset_clk = clk_sync;
  assign usb_holdoff = usb_reset_phy_stop;
  assign usb0_usb_rst = usb_reset_phy_reset;
endmodule

module StallOnlyRequestHandler(data_requested, status_requested, stall, \type );
  reg \initial  = 0;
  wire \$1 ;
  wire \$3 ;
  wire \$5 ;
  wire \$7 ;
  input data_requested;
  output stall;
  reg stall;
  input status_requested;
  input [1:0] \type ;
  assign \$1  = data_requested | status_requested;
  assign \$3  = \type  == 2'h2;
  assign \$5  = \type  == 2'h3;
  assign \$7  = \$3  | \$5 ;
  always @* begin
    if (\initial ) begin end
    stall = 1'h0;
    casez (\$1 )
      1'h1:
          casez (\$7 )
            1'h1:
                stall = 1'h1;
          endcase
    endcase
  end
endmodule

module StandardRequestHandler(usb_clk, \type , request, value, length, received, data_requested, status_requested, ack, active_config, address_changed, new_address, config_changed, new_config, valid, tx_data_pid, \ack$1 , stall, payload, first, last, ready, usb_rst);
  reg \initial  = 0;
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire \$19 ;
  wire \$2 ;
  wire \$21 ;
  wire \$23 ;
  wire \$25 ;
  wire \$27 ;
  wire \$29 ;
  wire \$31 ;
  wire \$33 ;
  wire \$35 ;
  wire \$37 ;
  wire \$39 ;
  wire [11:0] \$4 ;
  wire \$41 ;
  wire \$43 ;
  wire \$45 ;
  wire [7:0] \$47 ;
  wire \$49 ;
  wire [11:0] \$5 ;
  wire \$51 ;
  wire \$7 ;
  wire \$9 ;
  input ack;
  output \ack$1 ;
  reg \ack$1 ;
  input [7:0] active_config;
  output address_changed;
  reg address_changed;
  output config_changed;
  reg config_changed;
  input data_requested;
  output first;
  reg first;
  reg [2:0] fsm_state = 3'h0;
  reg [2:0] \fsm_state$next ;
  wire get_descriptor_first;
  wire get_descriptor_last;
  wire [15:0] get_descriptor_length;
  wire [7:0] get_descriptor_payload;
  reg get_descriptor_ready;
  wire get_descriptor_stall;
  reg get_descriptor_start;
  reg [10:0] get_descriptor_start_position = 11'h000;
  reg [10:0] \get_descriptor_start_position$next ;
  wire get_descriptor_valid;
  wire [15:0] get_descriptor_value;
  output last;
  reg last;
  input [15:0] length;
  output [6:0] new_address;
  reg [6:0] new_address;
  output [7:0] new_config;
  reg [7:0] new_config;
  output [7:0] payload;
  reg [7:0] payload;
  input ready;
  input received;
  input [7:0] request;
  output stall;
  reg stall;
  input status_requested;
  reg [7:0] transmitter_datum_0;
  reg [7:0] transmitter_datum_1;
  wire transmitter_first;
  wire transmitter_last;
  reg [1:0] transmitter_max_length;
  wire [7:0] transmitter_payload;
  reg transmitter_ready;
  reg transmitter_start;
  wire transmitter_valid;
  output tx_data_pid;
  reg tx_data_pid = 1'h1;
  reg \tx_data_pid$next ;
  input [1:0] \type ;
  input usb_clk;
  input usb_rst;
  output valid;
  reg valid;
  input [15:0] value;
  assign \$9  = ~ tx_data_pid;
  assign \$11  = ! \type ;
  assign \$15  = data_requested | status_requested;
  assign \$17  = ! \type ;
  assign \$19  = ! \type ;
  assign \$21  = ! \type ;
  assign \$23  = ! \type ;
  assign \$25  = ! \type ;
  assign \$27  = ! \type ;
  assign \$2  = ! \type ;
  assign \$29  = ! \type ;
  assign \$31  = ! \type ;
  assign \$33  = ! \type ;
  assign \$35  = ! \type ;
  assign \$37  = data_requested | status_requested;
  assign \$39  = ! \type ;
  assign \$41  = ! \type ;
  assign \$43  = ! \type ;
  assign \$45  = ! \type ;
  assign \$47  = + value[6:0];
  assign \$49  = ! \type ;
  assign \$51  = ! \type ;
  assign \$5  = get_descriptor_start_position + 7'h40;
  assign \$7  = ! \type ;
  always @(posedge usb_clk)
    fsm_state <= \fsm_state$next ;
  always @(posedge usb_clk)
    tx_data_pid <= \tx_data_pid$next ;
  always @(posedge usb_clk)
    get_descriptor_start_position <= \get_descriptor_start_position$next ;
  get_descriptor get_descriptor (
    .first(get_descriptor_first),
    .last(get_descriptor_last),
    .length(get_descriptor_length),
    .payload(get_descriptor_payload),
    .ready(get_descriptor_ready),
    .stall(get_descriptor_stall),
    .start(get_descriptor_start),
    .start_position(get_descriptor_start_position),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst),
    .valid(get_descriptor_valid),
    .value(get_descriptor_value)
  );
  \transmitter$4  transmitter (
    .datum_0(transmitter_datum_0),
    .datum_1(transmitter_datum_1),
    .first(transmitter_first),
    .last(transmitter_last),
    .max_length(transmitter_max_length),
    .payload(transmitter_payload),
    .ready(transmitter_ready),
    .start(transmitter_start),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst),
    .valid(transmitter_valid)
  );
  always @* begin
    if (\initial ) begin end
    transmitter_datum_0 = 8'h00;
    transmitter_datum_1 = 8'h00;
    casez (\$27 )
      1'h1:
          casez (fsm_state)
            3'h0:
                /* empty */;
            3'h1:
                { transmitter_datum_1, transmitter_datum_0 } = 16'h0000;
            3'h2:
                /* empty */;
            3'h3:
                /* empty */;
            3'h4:
                /* empty */;
            3'h5:
                transmitter_datum_0 = active_config;
          endcase
    endcase
  end
  always @* begin
    if (\initial ) begin end
    transmitter_max_length = 2'h0;
    casez (\$29 )
      1'h1:
          casez (fsm_state)
            3'h0:
                /* empty */;
            3'h1:
                transmitter_max_length = 2'h2;
            3'h2:
                /* empty */;
            3'h3:
                /* empty */;
            3'h4:
                /* empty */;
            3'h5:
                transmitter_max_length = 2'h1;
          endcase
    endcase
  end
  always @* begin
    if (\initial ) begin end
    transmitter_start = 1'h0;
    casez (\$31 )
      1'h1:
          casez (fsm_state)
            3'h0:
                /* empty */;
            3'h1:
                casez (data_requested)
                  1'h1:
                      transmitter_start = 1'h1;
                endcase
            3'h2:
                /* empty */;
            3'h3:
                /* empty */;
            3'h4:
                /* empty */;
            3'h5:
                casez (data_requested)
                  1'h1:
                      transmitter_start = 1'h1;
                endcase
          endcase
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \ack$1  = 1'h0;
    casez (\$33 )
      1'h1:
          casez (fsm_state)
            3'h0:
                /* empty */;
            3'h1:
                casez (status_requested)
                  1'h1:
                      \ack$1  = 1'h1;
                endcase
            3'h2:
                /* empty */;
            3'h3:
                /* empty */;
            3'h4:
                casez (status_requested)
                  1'h1:
                      \ack$1  = 1'h1;
                endcase
            3'h5:
                casez (status_requested)
                  1'h1:
                      \ack$1  = 1'h1;
                endcase
          endcase
    endcase
  end
  always @* begin
    if (\initial ) begin end
    stall = 1'h0;
    casez (\$35 )
      1'h1:
          casez (fsm_state)
            3'h0:
                /* empty */;
            3'h1:
                /* empty */;
            3'h2:
                /* empty */;
            3'h3:
                /* empty */;
            3'h4:
                stall = get_descriptor_stall;
            3'h5:
                /* empty */;
            3'h6:
                casez (\$37 )
                  1'h1:
                      stall = 1'h1;
                endcase
          endcase
    endcase
  end
  always @* begin
    if (\initial ) begin end
    address_changed = 1'h0;
    casez (\$39 )
      1'h1:
          casez (fsm_state)
            3'h0:
                /* empty */;
            3'h1:
                /* empty */;
            3'h2:
                casez (ack)
                  1'h1:
                      address_changed = 1'h1;
                endcase
          endcase
    endcase
  end
  always @* begin
    if (\initial ) begin end
    new_address = 7'h00;
    casez (\$41 )
      1'h1:
          casez (fsm_state)
            3'h0:
                /* empty */;
            3'h1:
                /* empty */;
            3'h2:
                casez (ack)
                  1'h1:
                      new_address = value[6:0];
                endcase
          endcase
    endcase
  end
  always @* begin
    if (\initial ) begin end
    config_changed = 1'h0;
    casez (\$43 )
      1'h1:
          casez (fsm_state)
            3'h0:
                /* empty */;
            3'h1:
                /* empty */;
            3'h2:
                /* empty */;
            3'h3:
                casez (ack)
                  1'h1:
                      config_changed = 1'h1;
                endcase
          endcase
    endcase
  end
  always @* begin
    if (\initial ) begin end
    new_config = 8'h00;
    casez (\$45 )
      1'h1:
          casez (fsm_state)
            3'h0:
                /* empty */;
            3'h1:
                /* empty */;
            3'h2:
                /* empty */;
            3'h3:
                casez (ack)
                  1'h1:
                      new_config = \$47 ;
                endcase
          endcase
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \get_descriptor_start_position$next  = get_descriptor_start_position;
    casez (\$2 )
      1'h1:
          casez (fsm_state)
            3'h0:
                \get_descriptor_start_position$next  = 11'h000;
            3'h1:
                /* empty */;
            3'h2:
                /* empty */;
            3'h3:
                /* empty */;
            3'h4:
                casez (ack)
                  1'h1:
                      \get_descriptor_start_position$next  = \$5 [10:0];
                endcase
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \get_descriptor_start_position$next  = 11'h000;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    get_descriptor_ready = 1'h0;
    casez (\$49 )
      1'h1:
          casez (fsm_state)
            3'h0:
                /* empty */;
            3'h1:
                /* empty */;
            3'h2:
                /* empty */;
            3'h3:
                /* empty */;
            3'h4:
                get_descriptor_ready = ready;
          endcase
    endcase
  end
  always @* begin
    if (\initial ) begin end
    get_descriptor_start = 1'h0;
    casez (\$51 )
      1'h1:
          casez (fsm_state)
            3'h0:
                /* empty */;
            3'h1:
                /* empty */;
            3'h2:
                /* empty */;
            3'h3:
                /* empty */;
            3'h4:
                casez (data_requested)
                  1'h1:
                      get_descriptor_start = 1'h1;
                endcase
          endcase
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \tx_data_pid$next  = tx_data_pid;
    casez (\$7 )
      1'h1:
          casez (fsm_state)
            3'h0:
                \tx_data_pid$next  = 1'h1;
            3'h1:
                /* empty */;
            3'h2:
                /* empty */;
            3'h3:
                /* empty */;
            3'h4:
                casez (ack)
                  1'h1:
                      \tx_data_pid$next  = \$9 ;
                endcase
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \tx_data_pid$next  = 1'h1;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \fsm_state$next  = fsm_state;
    casez (\$11 )
      1'h1:
          casez (fsm_state)
            3'h0:
                casez (received)
                  1'h1:
                      casez (\$13 )
                        1'h1:
                            (* full_case = 32'd1 *)
                            casez (request)
                              8'h00:
                                  \fsm_state$next  = 3'h1;
                              8'h05:
                                  \fsm_state$next  = 3'h2;
                              8'h09:
                                  \fsm_state$next  = 3'h3;
                              8'h06:
                                  \fsm_state$next  = 3'h4;
                              8'h08:
                                  \fsm_state$next  = 3'h5;
                              default:
                                  \fsm_state$next  = 3'h6;
                            endcase
                      endcase
                endcase
            3'h1:
                casez (status_requested)
                  1'h1:
                      \fsm_state$next  = 3'h0;
                endcase
            3'h2:
                casez (ack)
                  1'h1:
                      \fsm_state$next  = 3'h0;
                endcase
            3'h3:
                casez (ack)
                  1'h1:
                      \fsm_state$next  = 3'h0;
                endcase
            3'h4:
                casez (status_requested)
                  1'h1:
                      \fsm_state$next  = 3'h0;
                endcase
            3'h5:
                casez (status_requested)
                  1'h1:
                      \fsm_state$next  = 3'h0;
                endcase
            3'h6:
                casez (\$15 )
                  1'h1:
                      \fsm_state$next  = 3'h0;
                endcase
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \fsm_state$next  = 3'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    valid = 1'h0;
    casez (\$17 )
      1'h1:
          casez (fsm_state)
            3'h0:
                /* empty */;
            3'h1:
                valid = transmitter_valid;
            3'h2:
                casez (status_requested)
                  1'h1:
                      valid = 1'h1;
                endcase
            3'h3:
                casez (status_requested)
                  1'h1:
                      valid = 1'h1;
                endcase
            3'h4:
                valid = get_descriptor_valid;
            3'h5:
                valid = transmitter_valid;
          endcase
    endcase
  end
  always @* begin
    if (\initial ) begin end
    first = 1'h0;
    casez (\$19 )
      1'h1:
          casez (fsm_state)
            3'h0:
                /* empty */;
            3'h1:
                first = transmitter_first;
            3'h2:
                /* empty */;
            3'h3:
                /* empty */;
            3'h4:
                first = get_descriptor_first;
            3'h5:
                first = transmitter_first;
          endcase
    endcase
  end
  always @* begin
    if (\initial ) begin end
    last = 1'h0;
    casez (\$21 )
      1'h1:
          casez (fsm_state)
            3'h0:
                /* empty */;
            3'h1:
                last = transmitter_last;
            3'h2:
                casez (status_requested)
                  1'h1:
                      last = 1'h1;
                endcase
            3'h3:
                casez (status_requested)
                  1'h1:
                      last = 1'h1;
                endcase
            3'h4:
                last = get_descriptor_last;
            3'h5:
                last = transmitter_last;
          endcase
    endcase
  end
  always @* begin
    if (\initial ) begin end
    payload = 8'h00;
    casez (\$23 )
      1'h1:
          casez (fsm_state)
            3'h0:
                /* empty */;
            3'h1:
                payload = transmitter_payload;
            3'h2:
                /* empty */;
            3'h3:
                /* empty */;
            3'h4:
                payload = get_descriptor_payload;
            3'h5:
                payload = transmitter_payload;
          endcase
    endcase
  end
  always @* begin
    if (\initial ) begin end
    transmitter_ready = 1'h0;
    casez (\$25 )
      1'h1:
          casez (fsm_state)
            3'h0:
                /* empty */;
            3'h1:
                transmitter_ready = ready;
            3'h2:
                /* empty */;
            3'h3:
                /* empty */;
            3'h4:
                /* empty */;
            3'h5:
                transmitter_ready = ready;
          endcase
    endcase
  end
  assign \$4  = \$5 ;
  assign get_descriptor_length = length;
  assign get_descriptor_value = value;
  assign \$13  = 1'h1;
endmodule

module USBControlEndpoint(usb_clk, rx_data, rx_valid, rx_active, crc, tx_allowed, tx_timeout, rx_timeout, ack, nak, stall, nyet, pid, address, endpoint, new_token, ready_for_response, frame, new_frame, is_in, is_out, is_setup, is_ping, valid, next, payload, rx_ready_for_response, speed, active_config, address_changed, new_address, config_changed, new_config, \ack$1 , \nak$2 , \stall$3 , start, \start$4 , \valid$5 , tx_pid_toggle, \payload$6 , first, last, ready, usb_rst);
  reg \initial  = 0;
  wire \$100 ;
  wire \$102 ;
  wire \$104 ;
  wire \$106 ;
  wire \$108 ;
  wire \$110 ;
  wire \$112 ;
  wire \$114 ;
  wire \$116 ;
  wire \$118 ;
  wire \$120 ;
  wire \$58 ;
  wire [1:0] \$60 ;
  wire \$62 ;
  wire \$64 ;
  wire \$66 ;
  wire \$68 ;
  wire \$70 ;
  wire \$72 ;
  wire \$74 ;
  wire \$76 ;
  wire \$78 ;
  wire \$80 ;
  wire \$82 ;
  wire \$84 ;
  wire \$86 ;
  wire \$88 ;
  wire \$90 ;
  wire \$92 ;
  wire \$94 ;
  wire \$96 ;
  wire \$98 ;
  input ack;
  output \ack$1 ;
  input [7:0] active_config;
  input [6:0] address;
  wire [6:0] \address$47 ;
  output address_changed;
  output config_changed;
  input [15:0] crc;
  input [3:0] endpoint;
  wire [3:0] \endpoint$48 ;
  output first;
  input [10:0] frame;
  wire [10:0] \frame$50 ;
  reg [2:0] fsm_state = 3'h0;
  reg [2:0] \fsm_state$next ;
  input is_in;
  wire \is_in$52 ;
  input is_out;
  wire \is_out$53 ;
  input is_ping;
  wire \is_ping$55 ;
  input is_setup;
  wire \is_setup$54 ;
  output last;
  input nak;
  output \nak$2 ;
  output [6:0] new_address;
  output [7:0] new_config;
  input new_frame;
  wire \new_frame$51 ;
  input new_token;
  input next;
  input nyet;
  input [7:0] payload;
  output [7:0] \payload$6 ;
  input [3:0] pid;
  input ready;
  input ready_for_response;
  wire \ready_for_response$49 ;
  wire request_mux_ack;
  wire \request_mux_ack$20 ;
  wire \request_mux_ack$37 ;
  wire \request_mux_ack$38 ;
  wire \request_mux_ack$8 ;
  wire [7:0] request_mux_active_config;
  wire [7:0] \request_mux_active_config$21 ;
  wire [6:0] request_mux_address;
  wire request_mux_address_changed;
  wire \request_mux_address_changed$30 ;
  wire request_mux_config_changed;
  wire \request_mux_config_changed$32 ;
  reg request_mux_data_requested;
  wire \request_mux_data_requested$18 ;
  wire \request_mux_data_requested$24 ;
  wire \request_mux_data_requested$28 ;
  wire [3:0] request_mux_endpoint;
  wire request_mux_first;
  wire \request_mux_first$43 ;
  wire [10:0] request_mux_frame;
  wire [15:0] request_mux_index;
  wire request_mux_is_in;
  wire request_mux_is_in_request;
  wire request_mux_is_out;
  wire request_mux_is_ping;
  wire request_mux_is_setup;
  wire request_mux_last;
  wire \request_mux_last$44 ;
  wire \request_mux_last$45 ;
  wire [15:0] request_mux_length;
  wire [15:0] \request_mux_length$16 ;
  wire request_mux_nak;
  wire \request_mux_nak$9 ;
  wire [6:0] request_mux_new_address;
  wire [6:0] \request_mux_new_address$31 ;
  wire [7:0] request_mux_new_config;
  wire [7:0] \request_mux_new_config$33 ;
  wire request_mux_new_frame;
  wire request_mux_new_token;
  reg request_mux_next;
  wire request_mux_nyet;
  wire [7:0] request_mux_payload;
  reg [7:0] \request_mux_payload$12 ;
  wire [7:0] \request_mux_payload$42 ;
  wire [3:0] request_mux_pid;
  wire request_mux_ready;
  wire \request_mux_ready$46 ;
  wire request_mux_ready_for_response;
  wire request_mux_received;
  wire \request_mux_received$17 ;
  wire [4:0] request_mux_recipient;
  wire [7:0] request_mux_request;
  wire [7:0] \request_mux_request$14 ;
  wire [7:0] \request_mux_request$23 ;
  reg request_mux_rx_ready_for_response;
  wire \request_mux_rx_ready_for_response$26 ;
  wire request_mux_stall;
  wire \request_mux_stall$10 ;
  wire \request_mux_stall$39 ;
  wire \request_mux_stall$40 ;
  wire \request_mux_stall$41 ;
  reg request_mux_status_requested;
  wire \request_mux_status_requested$19 ;
  wire \request_mux_status_requested$25 ;
  wire \request_mux_status_requested$29 ;
  wire request_mux_tx_data_pid;
  wire \request_mux_tx_data_pid$35 ;
  wire [1:0] request_mux_type;
  wire [1:0] \request_mux_type$13 ;
  wire [1:0] \request_mux_type$22 ;
  wire [1:0] \request_mux_type$27 ;
  wire request_mux_valid;
  reg \request_mux_valid$11 ;
  wire \request_mux_valid$34 ;
  wire \request_mux_valid$36 ;
  wire [15:0] request_mux_value;
  wire [15:0] \request_mux_value$15 ;
  input rx_active;
  input [7:0] rx_data;
  input rx_ready_for_response;
  input rx_timeout;
  wire \rx_timeout$57 ;
  input rx_valid;
  wire setup_decoder_ack;
  wire [15:0] setup_decoder_crc;
  wire [15:0] setup_decoder_index;
  wire setup_decoder_is_in_request;
  wire [15:0] setup_decoder_length;
  wire setup_decoder_new_token;
  wire [3:0] setup_decoder_pid;
  wire setup_decoder_received;
  wire [4:0] setup_decoder_recipient;
  wire [7:0] setup_decoder_request;
  wire [1:0] setup_decoder_speed;
  wire setup_decoder_start;
  wire \setup_decoder_start$7 ;
  wire setup_decoder_tx_allowed;
  wire [1:0] setup_decoder_type;
  wire [15:0] setup_decoder_value;
  input [1:0] speed;
  input stall;
  output \stall$3 ;
  output start;
  output \start$4 ;
  input tx_allowed;
  output [1:0] tx_pid_toggle;
  input tx_timeout;
  wire \tx_timeout$56 ;
  input usb_clk;
  input usb_rst;
  input valid;
  output \valid$5 ;
  assign \$100  = \$98  & is_out;
  assign \$102  = ! endpoint;
  assign \$104  = \$102  & is_out;
  assign \$106  = ! endpoint;
  assign \$108  = \$106  & is_out;
  assign \$110  = ! endpoint;
  assign \$112  = ready_for_response & \$110 ;
  assign \$114  = \$112  & is_in;
  assign \$116  = ! endpoint;
  assign \$118  = rx_ready_for_response & \$116 ;
  assign \$120  = \$118  & is_out;
  assign \$58  = setup_decoder_ack | request_mux_ack;
  assign \$60  = + request_mux_tx_data_pid;
  assign \$62  = ! endpoint;
  assign \$64  = setup_decoder_received & \$62 ;
  assign \$66  = | setup_decoder_length;
  assign \$68  = new_token & is_setup;
  assign \$70  = ! endpoint;
  assign \$72  = \$70  & new_token;
  assign \$74  = \$72  & is_out;
  assign \$76  = new_token & is_setup;
  assign \$78  = ! endpoint;
  assign \$80  = \$78  & new_token;
  assign \$82  = \$80  & is_in;
  assign \$84  = new_token & is_setup;
  assign \$86  = new_token & is_setup;
  assign \$88  = ! endpoint;
  assign \$90  = ready_for_response & \$88 ;
  assign \$92  = \$90  & is_in;
  assign \$94  = ! endpoint;
  assign \$96  = \$94  & is_out;
  assign \$98  = ! endpoint;
  always @(posedge usb_clk)
    fsm_state <= \fsm_state$next ;
  ACMRequestHandlers ACMRequestHandlers (
    .ack(\request_mux_ack$38 ),
    .data_requested(\request_mux_data_requested$24 ),
    .last(\request_mux_last$45 ),
    .request(\request_mux_request$23 ),
    .rx_ready_for_response(\request_mux_rx_ready_for_response$26 ),
    .stall(\request_mux_stall$40 ),
    .status_requested(\request_mux_status_requested$25 ),
    .\type (\request_mux_type$22 ),
    .valid(\request_mux_valid$36 )
  );
  StallOnlyRequestHandler StallOnlyRequestHandler (
    .data_requested(\request_mux_data_requested$28 ),
    .stall(\request_mux_stall$41 ),
    .status_requested(\request_mux_status_requested$29 ),
    .\type (\request_mux_type$27 )
  );
  StandardRequestHandler StandardRequestHandler (
    .ack(\request_mux_ack$20 ),
    .\ack$1 (\request_mux_ack$37 ),
    .active_config(\request_mux_active_config$21 ),
    .address_changed(\request_mux_address_changed$30 ),
    .config_changed(\request_mux_config_changed$32 ),
    .data_requested(\request_mux_data_requested$18 ),
    .first(\request_mux_first$43 ),
    .last(\request_mux_last$44 ),
    .length(\request_mux_length$16 ),
    .new_address(\request_mux_new_address$31 ),
    .new_config(\request_mux_new_config$33 ),
    .payload(\request_mux_payload$42 ),
    .ready(\request_mux_ready$46 ),
    .received(\request_mux_received$17 ),
    .request(\request_mux_request$14 ),
    .stall(\request_mux_stall$39 ),
    .status_requested(\request_mux_status_requested$19 ),
    .tx_data_pid(\request_mux_tx_data_pid$35 ),
    .\type (\request_mux_type$13 ),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst),
    .valid(\request_mux_valid$34 ),
    .value(\request_mux_value$15 )
  );
  request_mux request_mux (
    .ack(request_mux_ack),
    .\ack$1 (\request_mux_ack$8 ),
    .\ack$13 (\request_mux_ack$20 ),
    .\ack$30 (\request_mux_ack$37 ),
    .\ack$31 (\request_mux_ack$38 ),
    .active_config(request_mux_active_config),
    .\active_config$14 (\request_mux_active_config$21 ),
    .address(request_mux_address),
    .address_changed(request_mux_address_changed),
    .\address_changed$23 (\request_mux_address_changed$30 ),
    .config_changed(request_mux_config_changed),
    .\config_changed$25 (\request_mux_config_changed$32 ),
    .data_requested(request_mux_data_requested),
    .\data_requested$11 (\request_mux_data_requested$18 ),
    .\data_requested$17 (\request_mux_data_requested$24 ),
    .\data_requested$21 (\request_mux_data_requested$28 ),
    .endpoint(request_mux_endpoint),
    .first(request_mux_first),
    .\first$36 (\request_mux_first$43 ),
    .frame(request_mux_frame),
    .index(request_mux_index),
    .is_in(request_mux_is_in),
    .is_in_request(request_mux_is_in_request),
    .is_out(request_mux_is_out),
    .is_ping(request_mux_is_ping),
    .is_setup(request_mux_is_setup),
    .last(request_mux_last),
    .\last$37 (\request_mux_last$44 ),
    .\last$38 (\request_mux_last$45 ),
    .length(request_mux_length),
    .\length$9 (\request_mux_length$16 ),
    .nak(request_mux_nak),
    .\nak$2 (\request_mux_nak$9 ),
    .new_address(request_mux_new_address),
    .\new_address$24 (\request_mux_new_address$31 ),
    .new_config(request_mux_new_config),
    .\new_config$26 (\request_mux_new_config$33 ),
    .new_frame(request_mux_new_frame),
    .new_token(request_mux_new_token),
    .next(request_mux_next),
    .nyet(request_mux_nyet),
    .payload(request_mux_payload),
    .\payload$35 (\request_mux_payload$42 ),
    .\payload$5 (\request_mux_payload$12 ),
    .pid(request_mux_pid),
    .ready(request_mux_ready),
    .\ready$39 (\request_mux_ready$46 ),
    .ready_for_response(request_mux_ready_for_response),
    .received(request_mux_received),
    .\received$10 (\request_mux_received$17 ),
    .recipient(request_mux_recipient),
    .request(request_mux_request),
    .\request$16 (\request_mux_request$23 ),
    .\request$7 (\request_mux_request$14 ),
    .rx_ready_for_response(request_mux_rx_ready_for_response),
    .\rx_ready_for_response$19 (\request_mux_rx_ready_for_response$26 ),
    .stall(request_mux_stall),
    .\stall$3 (\request_mux_stall$10 ),
    .\stall$32 (\request_mux_stall$39 ),
    .\stall$33 (\request_mux_stall$40 ),
    .\stall$34 (\request_mux_stall$41 ),
    .status_requested(request_mux_status_requested),
    .\status_requested$12 (\request_mux_status_requested$19 ),
    .\status_requested$18 (\request_mux_status_requested$25 ),
    .\status_requested$22 (\request_mux_status_requested$29 ),
    .tx_data_pid(request_mux_tx_data_pid),
    .\tx_data_pid$28 (\request_mux_tx_data_pid$35 ),
    .\type (request_mux_type),
    .\type$15 (\request_mux_type$22 ),
    .\type$20 (\request_mux_type$27 ),
    .\type$6 (\request_mux_type$13 ),
    .valid(request_mux_valid),
    .\valid$27 (\request_mux_valid$34 ),
    .\valid$29 (\request_mux_valid$36 ),
    .\valid$4 (\request_mux_valid$11 ),
    .value(request_mux_value),
    .\value$8 (\request_mux_value$15 )
  );
  setup_decoder setup_decoder (
    .ack(setup_decoder_ack),
    .crc(setup_decoder_crc),
    .index(setup_decoder_index),
    .is_in_request(setup_decoder_is_in_request),
    .length(setup_decoder_length),
    .new_token(setup_decoder_new_token),
    .pid(setup_decoder_pid),
    .received(setup_decoder_received),
    .recipient(setup_decoder_recipient),
    .request(setup_decoder_request),
    .rx_active(rx_active),
    .rx_data(rx_data),
    .rx_valid(rx_valid),
    .speed(setup_decoder_speed),
    .start(setup_decoder_start),
    .\start$1 (\setup_decoder_start$7 ),
    .tx_allowed(setup_decoder_tx_allowed),
    .\type (setup_decoder_type),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst),
    .value(setup_decoder_value)
  );
  always @* begin
    if (\initial ) begin end
    \fsm_state$next  = fsm_state;
    casez (fsm_state)
      3'h0:
          casez (\$64 )
            1'h1:
                (* full_case = 32'd1 *)
                casez (\$66 )
                  1'h1:
                      (* full_case = 32'd1 *)
                      casez (setup_decoder_is_in_request)
                        1'h1:
                            \fsm_state$next  = 3'h1;
                        default:
                            \fsm_state$next  = 3'h2;
                      endcase
                  default:
                      \fsm_state$next  = 3'h3;
                endcase
          endcase
      3'h1:
        begin
          casez (\$68 )
            1'h1:
                \fsm_state$next  = 3'h0;
          endcase
          casez (\$74 )
            1'h1:
                \fsm_state$next  = 3'h4;
          endcase
        end
      3'h2:
        begin
          casez (\$76 )
            1'h1:
                \fsm_state$next  = 3'h0;
          endcase
          casez (\$82 )
            1'h1:
                \fsm_state$next  = 3'h3;
          endcase
        end
      3'h3:
          casez (\$84 )
            1'h1:
                \fsm_state$next  = 3'h0;
          endcase
      3'h4:
          casez (\$86 )
            1'h1:
                \fsm_state$next  = 3'h0;
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \fsm_state$next  = 3'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    request_mux_data_requested = 1'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          casez (\$92 )
            1'h1:
                request_mux_data_requested = 1'h1;
          endcase
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \request_mux_valid$11  = 1'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          casez (\$96 )
            1'h1:
                \request_mux_valid$11  = valid;
          endcase
    endcase
  end
  always @* begin
    if (\initial ) begin end
    request_mux_next = 1'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          casez (\$100 )
            1'h1:
                request_mux_next = next;
          endcase
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \request_mux_payload$12  = 8'h00;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          casez (\$104 )
            1'h1:
                \request_mux_payload$12  = payload;
          endcase
    endcase
  end
  always @* begin
    if (\initial ) begin end
    request_mux_rx_ready_for_response = 1'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          casez (\$108 )
            1'h1:
                request_mux_rx_ready_for_response = rx_ready_for_response;
          endcase
    endcase
  end
  always @* begin
    if (\initial ) begin end
    request_mux_status_requested = 1'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          casez (\$114 )
            1'h1:
                request_mux_status_requested = 1'h1;
          endcase
      3'h4:
          casez (\$120 )
            1'h1:
                request_mux_status_requested = 1'h1;
          endcase
    endcase
  end
  assign tx_pid_toggle = \$60 ;
  assign new_config = request_mux_new_config;
  assign config_changed = request_mux_config_changed;
  assign request_mux_active_config = active_config;
  assign new_address = request_mux_new_address;
  assign address_changed = request_mux_address_changed;
  assign request_mux_nyet = nyet;
  assign \request_mux_stall$10  = stall;
  assign \request_mux_nak$9  = nak;
  assign \request_mux_ack$8  = ack;
  assign \stall$3  = request_mux_stall;
  assign \nak$2  = request_mux_nak;
  assign \ack$1  = \$58 ;
  assign request_mux_ready = ready;
  assign \payload$6  = request_mux_payload;
  assign last = request_mux_last;
  assign first = request_mux_first;
  assign \valid$5  = request_mux_valid;
  assign request_mux_is_ping = is_ping;
  assign request_mux_is_setup = is_setup;
  assign request_mux_is_out = is_out;
  assign request_mux_is_in = is_in;
  assign request_mux_new_frame = new_frame;
  assign request_mux_frame = frame;
  assign request_mux_ready_for_response = ready_for_response;
  assign request_mux_new_token = new_token;
  assign request_mux_endpoint = endpoint;
  assign request_mux_address = address;
  assign request_mux_pid = pid;
  assign request_mux_received = setup_decoder_received;
  assign request_mux_length = setup_decoder_length;
  assign request_mux_index = setup_decoder_index;
  assign request_mux_value = setup_decoder_value;
  assign request_mux_request = setup_decoder_request;
  assign request_mux_is_in_request = setup_decoder_is_in_request;
  assign request_mux_type = setup_decoder_type;
  assign request_mux_recipient = setup_decoder_recipient;
  assign \start$4  = \setup_decoder_start$7 ;
  assign \rx_timeout$57  = rx_timeout;
  assign \tx_timeout$56  = tx_timeout;
  assign setup_decoder_tx_allowed = tx_allowed;
  assign setup_decoder_speed = speed;
  assign \is_ping$55  = is_ping;
  assign \is_setup$54  = is_setup;
  assign \is_out$53  = is_out;
  assign \is_in$52  = is_in;
  assign \new_frame$51  = new_frame;
  assign \frame$50  = frame;
  assign \ready_for_response$49  = ready_for_response;
  assign setup_decoder_new_token = new_token;
  assign \endpoint$48  = endpoint;
  assign \address$47  = address;
  assign setup_decoder_pid = pid;
  assign setup_decoder_crc = crc;
  assign start = setup_decoder_start;
endmodule

module USBStreamInEndpoint(usb_clk, ack, nak, stall, nyet, pid, address, endpoint, new_token, ready_for_response, frame, new_frame, is_in, is_out, is_setup, is_ping, \ack$1 , \nak$2 , \stall$3 , valid, tx_pid_toggle, payload, first, last, ready, usb_rst);
  wire \$8 ;
  input ack;
  output \ack$1 ;
  wire \ack$24 ;
  input [6:0] address;
  wire [6:0] \address$17 ;
  input [3:0] endpoint;
  wire [3:0] \endpoint$18 ;
  output first;
  wire \first$11 ;
  wire \first$12 ;
  input [10:0] frame;
  wire [10:0] \frame$19 ;
  input is_in;
  input is_out;
  wire \is_out$21 ;
  input is_ping;
  wire \is_ping$23 ;
  input is_setup;
  wire \is_setup$22 ;
  output last;
  wire \last$13 ;
  input nak;
  output \nak$2 ;
  wire \nak$28 ;
  input new_frame;
  wire \new_frame$20 ;
  input new_token;
  input nyet;
  wire \nyet$26 ;
  wire \nyet$27 ;
  wire \nyet$30 ;
  output [7:0] payload;
  wire [7:0] \payload$14 ;
  input [3:0] pid;
  wire [3:0] \pid$16 ;
  input ready;
  wire \ready$15 ;
  input ready_for_response;
  input stall;
  wire \stall$25 ;
  wire \stall$29 ;
  output \stall$3 ;
  wire tx_manager_ack;
  wire tx_manager_active;
  wire [1:0] tx_manager_data_pid;
  wire tx_manager_first;
  wire tx_manager_generate_zlps;
  wire tx_manager_is_in;
  wire tx_manager_last;
  wire \tx_manager_last$5 ;
  wire tx_manager_nak;
  wire tx_manager_new_token;
  wire [7:0] tx_manager_payload;
  wire [7:0] \tx_manager_payload$6 ;
  wire tx_manager_ready;
  wire \tx_manager_ready$7 ;
  wire tx_manager_ready_for_response;
  wire tx_manager_valid;
  wire \tx_manager_valid$4 ;
  output [1:0] tx_pid_toggle;
  input usb_clk;
  input usb_rst;
  output valid;
  wire \valid$10 ;
  assign \$8  = endpoint == 2'h3;
  tx_manager tx_manager (
    .ack(tx_manager_ack),
    .active(tx_manager_active),
    .data_pid(tx_manager_data_pid),
    .first(tx_manager_first),
    .generate_zlps(1'h1),
    .is_in(tx_manager_is_in),
    .last(1'h0),
    .\last$2 (\tx_manager_last$5 ),
    .nak(tx_manager_nak),
    .new_token(tx_manager_new_token),
    .payload(8'h00),
    .\payload$3 (\tx_manager_payload$6 ),
    .ready(tx_manager_ready),
    .\ready$4 (\tx_manager_ready$7 ),
    .ready_for_response(tx_manager_ready_for_response),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst),
    .valid(1'h0),
    .\valid$1 (\tx_manager_valid$4 )
  );
  assign \valid$10  = 1'h0;
  assign \first$12  = 1'h0;
  assign \last$13  = 1'h0;
  assign \payload$14  = 8'h00;
  assign \ack$24  = 1'h0;
  assign \stall$25  = 1'h0;
  assign \nyet$27  = 1'h0;
  assign \nyet$30  = nyet;
  assign \stall$29  = stall;
  assign \nak$28  = nak;
  assign tx_manager_ack = ack;
  assign \nyet$26  = 1'h0;
  assign \stall$3  = 1'h0;
  assign \nak$2  = tx_manager_nak;
  assign \ack$1  = 1'h0;
  assign \is_ping$23  = is_ping;
  assign \is_setup$22  = is_setup;
  assign \is_out$21  = is_out;
  assign tx_manager_is_in = is_in;
  assign \new_frame$20  = new_frame;
  assign \frame$19  = frame;
  assign tx_manager_ready_for_response = ready_for_response;
  assign tx_manager_new_token = new_token;
  assign \endpoint$18  = endpoint;
  assign \address$17  = address;
  assign \pid$16  = pid;
  assign tx_pid_toggle = tx_manager_data_pid;
  assign \tx_manager_ready$7  = ready;
  assign payload = \tx_manager_payload$6 ;
  assign last = \tx_manager_last$5 ;
  assign first = tx_manager_first;
  assign valid = \tx_manager_valid$4 ;
  assign \ready$15  = tx_manager_ready;
  assign tx_manager_payload = 8'h00;
  assign tx_manager_last = 1'h0;
  assign \first$11  = 1'h0;
  assign tx_manager_valid = 1'h0;
  assign tx_manager_active = \$8 ;
  assign tx_manager_generate_zlps = 1'h1;
endmodule

module USBStreamInEndpoint_139748379531824(usb_clk, valid, first, last, payload, ready, ack, nak, stall, nyet, pid, address, endpoint, new_token, ready_for_response, frame, new_frame, is_in, is_out, is_setup, is_ping, \ack$1 , \nak$2 , \stall$3 , \valid$4 , tx_pid_toggle, \payload$5 , \first$6 , \last$7 , \ready$8 , usb_rst);
  wire \$13 ;
  input ack;
  output \ack$1 ;
  wire \ack$24 ;
  input [6:0] address;
  wire [6:0] \address$17 ;
  input [3:0] endpoint;
  wire [3:0] \endpoint$18 ;
  input first;
  wire \first$15 ;
  output \first$6 ;
  input [10:0] frame;
  wire [10:0] \frame$19 ;
  input is_in;
  input is_out;
  wire \is_out$21 ;
  input is_ping;
  wire \is_ping$23 ;
  input is_setup;
  wire \is_setup$22 ;
  input last;
  output \last$7 ;
  input nak;
  output \nak$2 ;
  wire \nak$28 ;
  input new_frame;
  wire \new_frame$20 ;
  input new_token;
  input nyet;
  wire \nyet$26 ;
  wire \nyet$27 ;
  wire \nyet$30 ;
  input [7:0] payload;
  output [7:0] \payload$5 ;
  input [3:0] pid;
  wire [3:0] \pid$16 ;
  output ready;
  input \ready$8 ;
  input ready_for_response;
  input stall;
  wire \stall$25 ;
  wire \stall$29 ;
  output \stall$3 ;
  wire tx_manager_ack;
  wire tx_manager_active;
  wire [1:0] tx_manager_data_pid;
  wire tx_manager_first;
  wire tx_manager_generate_zlps;
  wire tx_manager_is_in;
  wire tx_manager_last;
  wire \tx_manager_last$10 ;
  wire tx_manager_nak;
  wire tx_manager_new_token;
  wire [7:0] tx_manager_payload;
  wire [7:0] \tx_manager_payload$11 ;
  wire tx_manager_ready;
  wire \tx_manager_ready$12 ;
  wire tx_manager_ready_for_response;
  wire tx_manager_valid;
  wire \tx_manager_valid$9 ;
  output [1:0] tx_pid_toggle;
  input usb_clk;
  input usb_rst;
  input valid;
  output \valid$4 ;
  assign \$13  = endpoint == 3'h4;
  \tx_manager$5  tx_manager (
    .ack(tx_manager_ack),
    .active(tx_manager_active),
    .data_pid(tx_manager_data_pid),
    .first(tx_manager_first),
    .generate_zlps(1'h1),
    .is_in(tx_manager_is_in),
    .last(tx_manager_last),
    .\last$2 (\tx_manager_last$10 ),
    .nak(tx_manager_nak),
    .new_token(tx_manager_new_token),
    .payload(tx_manager_payload),
    .\payload$3 (\tx_manager_payload$11 ),
    .ready(tx_manager_ready),
    .\ready$4 (\tx_manager_ready$12 ),
    .ready_for_response(tx_manager_ready_for_response),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst),
    .valid(tx_manager_valid),
    .\valid$1 (\tx_manager_valid$9 )
  );
  assign \ack$24  = 1'h0;
  assign \stall$25  = 1'h0;
  assign \nyet$27  = 1'h0;
  assign \nyet$30  = nyet;
  assign \stall$29  = stall;
  assign \nak$28  = nak;
  assign tx_manager_ack = ack;
  assign \nyet$26  = 1'h0;
  assign \stall$3  = 1'h0;
  assign \nak$2  = tx_manager_nak;
  assign \ack$1  = 1'h0;
  assign \is_ping$23  = is_ping;
  assign \is_setup$22  = is_setup;
  assign \is_out$21  = is_out;
  assign tx_manager_is_in = is_in;
  assign \new_frame$20  = new_frame;
  assign \frame$19  = frame;
  assign tx_manager_ready_for_response = ready_for_response;
  assign tx_manager_new_token = new_token;
  assign \endpoint$18  = endpoint;
  assign \address$17  = address;
  assign \pid$16  = pid;
  assign tx_pid_toggle = tx_manager_data_pid;
  assign \tx_manager_ready$12  = \ready$8 ;
  assign \payload$5  = \tx_manager_payload$11 ;
  assign \last$7  = \tx_manager_last$10 ;
  assign \first$6  = tx_manager_first;
  assign \valid$4  = \tx_manager_valid$9 ;
  assign ready = tx_manager_ready;
  assign tx_manager_payload = payload;
  assign tx_manager_last = last;
  assign \first$15  = first;
  assign tx_manager_valid = valid;
  assign tx_manager_active = \$13 ;
  assign tx_manager_generate_zlps = 1'h1;
endmodule

module USBStreamOutEndpoint(usb_clk, valid, first, last, payload, ready, endpoint, ready_for_response, is_out, is_ping, \valid$1 , next, \payload$2 , rx_complete, rx_ready_for_response, rx_invalid, rx_pid_toggle, ack, nak, usb_rst);
  reg \initial  = 0;
  wire \$10 ;
  wire \$102 ;
  wire \$104 ;
  wire \$106 ;
  wire \$108 ;
  wire \$110 ;
  wire \$112 ;
  wire \$114 ;
  wire \$116 ;
  wire \$117 ;
  wire \$119 ;
  wire \$12 ;
  wire \$121 ;
  wire \$123 ;
  wire \$125 ;
  wire \$127 ;
  wire \$130 ;
  wire \$132 ;
  wire \$133 ;
  wire \$135 ;
  wire \$137 ;
  wire \$138 ;
  wire \$14 ;
  wire \$141 ;
  wire \$144 ;
  wire \$146 ;
  wire \$148 ;
  wire \$150 ;
  wire \$152 ;
  wire \$153 ;
  wire \$156 ;
  wire \$158 ;
  wire \$16 ;
  wire \$160 ;
  wire [6:0] \$162 ;
  wire [6:0] \$163 ;
  wire \$165 ;
  wire \$167 ;
  wire \$169 ;
  wire \$171 ;
  wire \$173 ;
  wire \$175 ;
  wire \$177 ;
  wire \$179 ;
  wire \$18 ;
  wire \$181 ;
  wire \$183 ;
  wire \$185 ;
  wire \$187 ;
  wire \$189 ;
  wire \$191 ;
  wire \$193 ;
  wire \$195 ;
  wire \$197 ;
  wire \$199 ;
  wire \$20 ;
  wire \$201 ;
  wire \$203 ;
  wire \$205 ;
  wire \$207 ;
  wire \$22 ;
  wire \$24 ;
  wire \$26 ;
  wire \$28 ;
  wire \$30 ;
  wire \$32 ;
  wire \$34 ;
  wire \$36 ;
  wire \$38 ;
  wire \$40 ;
  wire \$42 ;
  wire \$44 ;
  wire \$46 ;
  wire \$48 ;
  wire \$50 ;
  wire \$52 ;
  wire \$54 ;
  wire \$56 ;
  wire \$58 ;
  wire \$6 ;
  wire \$60 ;
  wire \$62 ;
  wire \$64 ;
  wire \$66 ;
  wire \$68 ;
  wire \$7 ;
  wire \$70 ;
  wire \$72 ;
  wire \$74 ;
  wire \$76 ;
  wire \$78 ;
  wire \$80 ;
  wire \$82 ;
  wire \$84 ;
  wire \$86 ;
  wire \$88 ;
  wire \$90 ;
  wire \$92 ;
  wire \$94 ;
  wire \$96 ;
  wire \$98 ;
  wire \$99 ;
  output ack;
  wire boundary_detector_complete_in;
  wire boundary_detector_complete_out;
  wire boundary_detector_first;
  wire boundary_detector_invalid_in;
  wire boundary_detector_invalid_out;
  wire boundary_detector_last;
  wire boundary_detector_next;
  wire \boundary_detector_next$4 ;
  wire [7:0] boundary_detector_payload;
  wire [7:0] \boundary_detector_payload$3 ;
  wire boundary_detector_valid;
  wire \boundary_detector_valid$5 ;
  input [3:0] endpoint;
  reg expected_data_toggle = 1'h0;
  reg \expected_data_toggle$next ;
  wire fifo_empty;
  wire fifo_full;
  wire fifo_read_commit;
  wire [9:0] fifo_read_data;
  wire fifo_read_en;
  wire [6:0] fifo_space_available;
  wire fifo_write_commit;
  wire [9:0] fifo_write_data;
  wire fifo_write_discard;
  wire fifo_write_en;
  output first;
  input is_out;
  input is_ping;
  output last;
  output nak;
  input next;
  reg overflow = 1'h0;
  reg \overflow$next ;
  output [7:0] payload;
  input [7:0] \payload$2 ;
  input ready;
  input ready_for_response;
  reg [5:0] rx_cnt = 6'h00;
  reg [5:0] \rx_cnt$next ;
  input rx_complete;
  input rx_invalid;
  input [1:0] rx_pid_toggle;
  input rx_ready_for_response;
  reg transfer_active = 1'h0;
  reg \transfer_active$next ;
  input usb_clk;
  input usb_rst;
  output valid;
  input \valid$1 ;
  assign \$99  = rx_pid_toggle == expected_data_toggle;
  assign \$98  = ~ \$99 ;
  assign \$102  = \$96  & \$98 ;
  assign \$104  = \$92  & \$102 ;
  assign \$106  = \$84  | \$104 ;
  assign \$108  = endpoint == 3'h4;
  assign \$10  = boundary_detector_last & \$6 ;
  assign \$110  = \$108  & is_out;
  assign \$112  = \$110  & is_out;
  assign \$114  = \$112  & rx_ready_for_response;
  assign \$117  = endpoint == 3'h4;
  assign \$119  = \$117  & is_out;
  assign \$121  = rx_pid_toggle == expected_data_toggle;
  assign \$123  = \$119  & \$121 ;
  assign \$125  = ~ overflow;
  assign \$127  = \$123  & \$125 ;
  assign \$116  = ~ \$127 ;
  assign \$12  = ~ transfer_active;
  assign \$130  = \$114  & \$116 ;
  assign \$133  = endpoint == 3'h4;
  assign \$135  = \$133  & is_out;
  assign \$138  = rx_pid_toggle == expected_data_toggle;
  assign \$137  = ~ \$138 ;
  assign \$141  = \$135  & \$137 ;
  assign \$132  = ~ \$141 ;
  assign \$144  = \$130  & \$132 ;
  assign \$146  = endpoint == 3'h4;
  assign \$148  = \$146  & is_ping;
  assign \$14  = boundary_detector_first & \$12 ;
  assign \$150  = \$148  & ready_for_response;
  assign \$153  = fifo_space_available >= 7'h40;
  assign \$152  = ~ \$153 ;
  assign \$156  = \$150  & \$152 ;
  assign \$158  = \$144  | \$156 ;
  assign \$160  = ~ fifo_empty;
  assign \$163  = rx_cnt + 1'h1;
  assign \$165  = endpoint == 3'h4;
  assign \$167  = \$165  & is_out;
  assign \$16  = endpoint == 3'h4;
  assign \$169  = \$167  & is_out;
  assign \$171  = \$169  & rx_ready_for_response;
  assign \$173  = rx_cnt == 6'h3f;
  assign \$175  = fifo_write_en & fifo_full;
  assign \$177  = endpoint == 3'h4;
  assign \$179  = \$177  & is_out;
  assign \$181  = \$179  & is_out;
  assign \$183  = \$181  & rx_ready_for_response;
  assign \$185  = endpoint == 3'h4;
  assign \$187  = \$185  & is_out;
  assign \$18  = \$16  & is_out;
  assign \$189  = \$187  & is_out;
  assign \$191  = \$189  & rx_ready_for_response;
  assign \$193  = endpoint == 3'h4;
  assign \$195  = \$193  & is_out;
  assign \$197  = rx_pid_toggle == expected_data_toggle;
  assign \$199  = \$195  & \$197 ;
  assign \$201  = ~ overflow;
  assign \$203  = \$199  & \$201 ;
  assign \$205  = \$191  & \$203 ;
  assign \$207  = ~ expected_data_toggle;
  assign \$20  = rx_pid_toggle == expected_data_toggle;
  assign \$22  = \$18  & \$20 ;
  assign \$24  = ~ overflow;
  assign \$26  = \$22  & \$24 ;
  assign \$28  = \$26  & \boundary_detector_next$4 ;
  assign \$30  = \$28  & \boundary_detector_valid$5 ;
  assign \$32  = endpoint == 3'h4;
  assign \$34  = \$32  & is_out;
  assign \$36  = \$34  & boundary_detector_complete_out;
  assign \$38  = ~ overflow;
  assign \$40  = \$36  & \$38 ;
  assign \$42  = endpoint == 3'h4;
  assign \$44  = \$42  & is_out;
  assign \$46  = boundary_detector_complete_out & overflow;
  assign \$48  = boundary_detector_invalid_out | \$46 ;
  assign \$50  = \$44  & \$48 ;
  assign \$52  = endpoint == 3'h4;
  assign \$54  = \$52  & is_out;
  assign \$56  = \$54  & is_out;
  assign \$58  = \$56  & rx_ready_for_response;
  assign \$60  = endpoint == 3'h4;
  assign \$62  = \$60  & is_out;
  assign \$64  = rx_pid_toggle == expected_data_toggle;
  assign \$66  = \$62  & \$64 ;
  assign \$68  = ~ overflow;
  assign \$70  = \$66  & \$68 ;
  assign \$72  = \$58  & \$70 ;
  assign \$74  = endpoint == 3'h4;
  assign \$76  = \$74  & is_ping;
  assign \$78  = \$76  & ready_for_response;
  assign \$7  = rx_cnt == 6'h3f;
  assign \$80  = fifo_space_available >= 7'h40;
  assign \$82  = \$78  & \$80 ;
  assign \$84  = \$72  | \$82 ;
  assign \$86  = endpoint == 3'h4;
  assign \$88  = \$86  & is_out;
  assign \$6  = ~ \$7 ;
  assign \$90  = \$88  & is_out;
  assign \$92  = \$90  & rx_ready_for_response;
  assign \$94  = endpoint == 3'h4;
  assign \$96  = \$94  & is_out;
  always @(posedge usb_clk)
    expected_data_toggle <= \expected_data_toggle$next ;
  always @(posedge usb_clk)
    overflow <= \overflow$next ;
  always @(posedge usb_clk)
    transfer_active <= \transfer_active$next ;
  always @(posedge usb_clk)
    rx_cnt <= \rx_cnt$next ;
  boundary_detector boundary_detector (
    .complete_in(boundary_detector_complete_in),
    .complete_out(boundary_detector_complete_out),
    .first(boundary_detector_first),
    .invalid_in(boundary_detector_invalid_in),
    .invalid_out(boundary_detector_invalid_out),
    .last(boundary_detector_last),
    .next(boundary_detector_next),
    .\next$2 (\boundary_detector_next$4 ),
    .payload(boundary_detector_payload),
    .\payload$1 (\boundary_detector_payload$3 ),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst),
    .valid(boundary_detector_valid),
    .\valid$3 (\boundary_detector_valid$5 )
  );
  fifo fifo (
    .empty(fifo_empty),
    .full(fifo_full),
    .read_commit(1'h1),
    .read_data(fifo_read_data),
    .read_en(fifo_read_en),
    .space_available(fifo_space_available),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst),
    .write_commit(fifo_write_commit),
    .write_data(fifo_write_data),
    .write_discard(fifo_write_discard),
    .write_en(fifo_write_en)
  );
  always @* begin
    if (\initial ) begin end
    \rx_cnt$next  = rx_cnt;
    casez (fifo_write_en)
      1'h1:
          \rx_cnt$next  = \$163 [5:0];
    endcase
    casez (\$171 )
      1'h1:
          \rx_cnt$next  = 6'h00;
    endcase
    casez (usb_rst)
      1'h1:
          \rx_cnt$next  = 6'h00;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \transfer_active$next  = transfer_active;
    casez (fifo_write_en)
      1'h1:
          casez (boundary_detector_last)
            1'h1:
                \transfer_active$next  = \$173 ;
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \transfer_active$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \overflow$next  = overflow;
    casez (\$175 )
      1'h1:
          \overflow$next  = 1'h1;
    endcase
    casez (\$183 )
      1'h1:
          \overflow$next  = 1'h0;
    endcase
    casez (usb_rst)
      1'h1:
          \overflow$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \expected_data_toggle$next  = expected_data_toggle;
    casez (\$205 )
      1'h1:
          \expected_data_toggle$next  = \$207 ;
    endcase
    casez (usb_rst)
      1'h1:
          \expected_data_toggle$next  = 1'h0;
    endcase
  end
  assign \$162  = \$163 ;
  assign fifo_read_commit = 1'h1;
  assign fifo_read_en = ready;
  assign first = fifo_read_data[9];
  assign last = fifo_read_data[8];
  assign payload = fifo_read_data[7:0];
  assign valid = \$160 ;
  assign nak = \$158 ;
  assign ack = \$106 ;
  assign fifo_write_discard = \$50 ;
  assign fifo_write_commit = \$40 ;
  assign fifo_write_en = \$30 ;
  assign fifo_write_data[9] = \$14 ;
  assign fifo_write_data[8] = \$10 ;
  assign fifo_write_data[7:0] = \boundary_detector_payload$3 ;
  assign boundary_detector_invalid_in = rx_invalid;
  assign boundary_detector_complete_in = rx_complete;
  assign boundary_detector_payload = \payload$2 ;
  assign boundary_detector_next = next;
  assign boundary_detector_valid = \valid$1 ;
endmodule

module boundary_detector(usb_clk, valid, next, payload, complete_in, invalid_in, \payload$1 , last, first, \next$2 , \valid$3 , complete_out, invalid_out, usb_rst);
  reg \initial  = 0;
  wire \$10 ;
  wire \$12 ;
  wire \$14 ;
  wire \$16 ;
  wire \$18 ;
  wire \$20 ;
  wire \$22 ;
  wire \$24 ;
  wire \$26 ;
  wire \$28 ;
  wire \$30 ;
  wire \$32 ;
  wire \$4 ;
  wire \$6 ;
  wire \$8 ;
  reg [7:0] buffered_byte = 8'h00;
  reg [7:0] \buffered_byte$next ;
  reg buffered_complete = 1'h0;
  reg \buffered_complete$next ;
  reg buffered_invalid = 1'h0;
  reg \buffered_invalid$next ;
  input complete_in;
  output complete_out;
  reg complete_out = 1'h0;
  reg \complete_out$next ;
  output first;
  reg first = 1'h0;
  reg \first$next ;
  reg [1:0] fsm_state = 2'h0;
  reg [1:0] \fsm_state$next ;
  input invalid_in;
  output invalid_out;
  reg invalid_out = 1'h0;
  reg \invalid_out$next ;
  reg is_first_byte = 1'h0;
  reg \is_first_byte$next ;
  output last;
  reg last = 1'h0;
  reg \last$next ;
  input next;
  output \next$2 ;
  reg \next$2  = 1'h0;
  reg \next$2$next ;
  input [7:0] payload;
  output [7:0] \payload$1 ;
  reg [7:0] \payload$1  = 8'h00;
  reg [7:0] \payload$1$next ;
  input usb_clk;
  input usb_rst;
  input valid;
  output \valid$3 ;
  reg \valid$3  = 1'h0;
  reg \valid$3$next ;
  assign \$10  = valid & next;
  assign \$12  = ~ valid;
  assign \$14  = buffered_complete | complete_in;
  assign \$16  = buffered_invalid | invalid_in;
  assign \$18  = valid & next;
  assign \$20  = valid & next;
  assign \$22  = valid & next;
  assign \$24  = valid & next;
  assign \$26  = valid & next;
  assign \$28  = ~ valid;
  assign \$30  = valid & next;
  assign \$32  = ~ valid;
  assign \$4  = valid & next;
  assign \$6  = ~ valid;
  assign \$8  = ~ valid;
  always @(posedge usb_clk)
    \payload$1  <= \payload$1$next ;
  always @(posedge usb_clk)
    fsm_state <= \fsm_state$next ;
  always @(posedge usb_clk)
    is_first_byte <= \is_first_byte$next ;
  always @(posedge usb_clk)
    buffered_byte <= \buffered_byte$next ;
  always @(posedge usb_clk)
    invalid_out <= \invalid_out$next ;
  always @(posedge usb_clk)
    complete_out <= \complete_out$next ;
  always @(posedge usb_clk)
    buffered_invalid <= \buffered_invalid$next ;
  always @(posedge usb_clk)
    buffered_complete <= \buffered_complete$next ;
  always @(posedge usb_clk)
    \next$2  <= \next$2$next ;
  always @(posedge usb_clk)
    last <= \last$next ;
  always @(posedge usb_clk)
    first <= \first$next ;
  always @(posedge usb_clk)
    \valid$3  <= \valid$3$next ;
  always @* begin
    if (\initial ) begin end
    \valid$3$next  = \valid$3 ;
    casez (fsm_state)
      2'h0:
          \valid$3$next  = 1'h0;
      2'h1:
          \valid$3$next  = 1'h1;
    endcase
    casez (usb_rst)
      1'h1:
          \valid$3$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \first$next  = first;
    casez (fsm_state)
      2'h0:
          \first$next  = 1'h0;
      2'h1:
        begin
          casez (\$4 )
            1'h1:
                \first$next  = is_first_byte;
          endcase
          casez (\$6 )
            1'h1:
                \first$next  = is_first_byte;
          endcase
        end
      2'h2:
          \first$next  = 1'h0;
    endcase
    casez (usb_rst)
      1'h1:
          \first$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \fsm_state$next  = fsm_state;
    casez (fsm_state)
      2'h0:
          casez (\$26 )
            1'h1:
                \fsm_state$next  = 2'h1;
          endcase
      2'h1:
          casez (\$28 )
            1'h1:
                \fsm_state$next  = 2'h2;
          endcase
      2'h2:
          \fsm_state$next  = 2'h0;
    endcase
    casez (usb_rst)
      1'h1:
          \fsm_state$next  = 2'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \payload$1$next  = \payload$1 ;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
        begin
          casez (\$30 )
            1'h1:
                \payload$1$next  = buffered_byte;
          endcase
          casez (\$32 )
            1'h1:
                \payload$1$next  = buffered_byte;
          endcase
        end
    endcase
    casez (usb_rst)
      1'h1:
          \payload$1$next  = 8'h00;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \last$next  = last;
    casez (fsm_state)
      2'h0:
          \last$next  = 1'h0;
      2'h1:
          casez (\$8 )
            1'h1:
                \last$next  = 1'h1;
          endcase
      2'h2:
          \last$next  = 1'h0;
    endcase
    casez (usb_rst)
      1'h1:
          \last$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \next$2$next  = \next$2 ;
    casez (fsm_state)
      2'h0:
          \next$2$next  = 1'h0;
      2'h1:
        begin
          \next$2$next  = 1'h0;
          casez (\$10 )
            1'h1:
                \next$2$next  = 1'h1;
          endcase
          casez (\$12 )
            1'h1:
                \next$2$next  = 1'h1;
          endcase
        end
      2'h2:
          \next$2$next  = 1'h0;
    endcase
    casez (usb_rst)
      1'h1:
          \next$2$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \buffered_complete$next  = buffered_complete;
    casez (fsm_state)
      2'h0:
          \buffered_complete$next  = 1'h0;
      2'h1:
          \buffered_complete$next  = \$14 ;
    endcase
    casez (usb_rst)
      1'h1:
          \buffered_complete$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \buffered_invalid$next  = buffered_invalid;
    casez (fsm_state)
      2'h0:
          \buffered_invalid$next  = 1'h0;
      2'h1:
          \buffered_invalid$next  = \$16 ;
    endcase
    casez (usb_rst)
      1'h1:
          \buffered_invalid$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \complete_out$next  = complete_out;
    casez (fsm_state)
      2'h0:
          \complete_out$next  = 1'h0;
      2'h1:
          /* empty */;
      2'h2:
          \complete_out$next  = buffered_complete;
    endcase
    casez (usb_rst)
      1'h1:
          \complete_out$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \invalid_out$next  = invalid_out;
    casez (fsm_state)
      2'h0:
          \invalid_out$next  = 1'h0;
      2'h1:
          /* empty */;
      2'h2:
          \invalid_out$next  = buffered_invalid;
    endcase
    casez (usb_rst)
      1'h1:
          \invalid_out$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \buffered_byte$next  = buffered_byte;
    casez (fsm_state)
      2'h0:
          casez (\$18 )
            1'h1:
                \buffered_byte$next  = payload;
          endcase
      2'h1:
          casez (\$20 )
            1'h1:
                \buffered_byte$next  = payload;
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \buffered_byte$next  = 8'h00;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \is_first_byte$next  = is_first_byte;
    casez (fsm_state)
      2'h0:
          casez (\$22 )
            1'h1:
                \is_first_byte$next  = 1'h1;
          endcase
      2'h1:
          casez (\$24 )
            1'h1:
                \is_first_byte$next  = 1'h0;
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \is_first_byte$next  = 1'h0;
    endcase
  end
endmodule

module control_translator(usb_clk, busy, \busy$1 , bus_idle, xcvr_select, term_select, op_mode, suspend, id_pullup, dm_pulldown, dp_pulldown, chrg_vbus, dischrg_vbus, use_external_vbus_indicator, done, address, write_data, read_request, write_request, usb_rst);
  reg \initial  = 0;
  wire \$10 ;
  wire \$12 ;
  wire \$14 ;
  wire \$16 ;
  wire \$18 ;
  wire \$2 ;
  wire \$20 ;
  wire \$22 ;
  wire \$24 ;
  wire \$26 ;
  wire \$28 ;
  wire \$30 ;
  wire \$32 ;
  wire \$34 ;
  wire \$36 ;
  wire \$38 ;
  wire \$4 ;
  wire \$40 ;
  wire \$42 ;
  wire \$6 ;
  wire \$8 ;
  output [5:0] address;
  reg [5:0] address;
  input bus_idle;
  input busy;
  output \busy$1 ;
  reg \busy$1  = 1'h0;
  reg \busy$1$next ;
  input chrg_vbus;
  reg [7:0] current_register_value_04 = 8'h41;
  reg [7:0] \current_register_value_04$next ;
  reg [7:0] current_register_value_0a = 8'h06;
  reg [7:0] \current_register_value_0a$next ;
  input dischrg_vbus;
  input dm_pulldown;
  input done;
  input dp_pulldown;
  input id_pullup;
  input [1:0] op_mode;
  output read_request;
  input suspend;
  input term_select;
  input usb_clk;
  input usb_rst;
  input use_external_vbus_indicator;
  output [7:0] write_data;
  reg [7:0] write_data;
  reg write_done_04;
  reg write_done_0a;
  output write_request;
  reg write_request;
  wire write_requested_04;
  wire write_requested_0a;
  reg [7:0] write_value_04 = 8'h00;
  reg [7:0] \write_value_04$next ;
  reg [7:0] write_value_0a = 8'h00;
  reg [7:0] \write_value_0a$next ;
  input [1:0] xcvr_select;
  assign \$10  = ~ suspend;
  assign \$12  = current_register_value_0a != { use_external_vbus_indicator, 2'h0, chrg_vbus, dischrg_vbus, dm_pulldown, dp_pulldown, id_pullup };
  assign \$14  = current_register_value_0a != { use_external_vbus_indicator, 2'h0, chrg_vbus, dischrg_vbus, dm_pulldown, dp_pulldown, id_pullup };
  assign \$16  = ~ done;
  assign \$18  = write_requested_04 & \$16 ;
  assign \$20  = \$18  & bus_idle;
  assign \$22  = ~ done;
  assign \$24  = write_requested_0a & \$22 ;
  assign \$26  = \$24  & bus_idle;
  assign \$28  = ~ done;
  assign \$2  = ~ suspend;
  assign \$30  = write_requested_04 & \$28 ;
  assign \$32  = \$30  & bus_idle;
  assign \$34  = \$32  | busy;
  assign \$36  = ~ done;
  assign \$38  = write_requested_0a & \$36 ;
  assign \$40  = \$38  & bus_idle;
  assign \$42  = \$40  | busy;
  assign \$4  = current_register_value_04 != { 1'h0, \$2 , 1'h0, op_mode, term_select, xcvr_select };
  assign \$6  = ~ suspend;
  assign \$8  = current_register_value_04 != { 1'h0, \$6 , 1'h0, op_mode, term_select, xcvr_select };
  always @(posedge usb_clk)
    \busy$1  <= \busy$1$next ;
  always @(posedge usb_clk)
    write_value_0a <= \write_value_0a$next ;
  always @(posedge usb_clk)
    current_register_value_0a <= \current_register_value_0a$next ;
  always @(posedge usb_clk)
    write_value_04 <= \write_value_04$next ;
  always @(posedge usb_clk)
    current_register_value_04 <= \current_register_value_04$next ;
  always @* begin
    if (\initial ) begin end
    \current_register_value_04$next  = current_register_value_04;
    casez (write_done_04)
      1'h1:
          \current_register_value_04$next  = write_value_04;
    endcase
    casez (usb_rst)
      1'h1:
          \current_register_value_04$next  = 8'h41;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    (* full_case = 32'd1 *)
    casez ({ write_requested_0a, write_requested_04 })
      2'b?1:
          \busy$1$next  = \$34 ;
      2'b1?:
          \busy$1$next  = \$42 ;
      default:
          \busy$1$next  = busy;
    endcase
    casez (usb_rst)
      1'h1:
          \busy$1$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    write_done_0a = 1'h0;
    casez ({ write_requested_0a, write_requested_04 })
      2'b?1:
          /* empty */;
      2'b1?:
          write_done_0a = done;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \write_value_04$next  = write_value_04;
    casez (\$8 )
      1'h1:
          \write_value_04$next  = { 1'h0, \$10 , 1'h0, op_mode, term_select, xcvr_select };
    endcase
    casez (usb_rst)
      1'h1:
          \write_value_04$next  = 8'h00;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \current_register_value_0a$next  = current_register_value_0a;
    casez (write_done_0a)
      1'h1:
          \current_register_value_0a$next  = write_value_0a;
    endcase
    casez (usb_rst)
      1'h1:
          \current_register_value_0a$next  = 8'h06;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \write_value_0a$next  = write_value_0a;
    casez (\$14 )
      1'h1:
          \write_value_0a$next  = { use_external_vbus_indicator, 2'h0, chrg_vbus, dischrg_vbus, dm_pulldown, dp_pulldown, id_pullup };
    endcase
    casez (usb_rst)
      1'h1:
          \write_value_0a$next  = 8'h00;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    write_done_04 = 1'h0;
    casez ({ write_requested_0a, write_requested_04 })
      2'b?1:
          write_done_04 = done;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    address = 6'h00;
    casez ({ write_requested_0a, write_requested_04 })
      2'b?1:
          address = 6'h04;
      2'b1?:
          address = 6'h0a;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    write_data = 8'h00;
    casez ({ write_requested_0a, write_requested_04 })
      2'b?1:
          write_data = write_value_04;
      2'b1?:
          write_data = write_value_0a;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    (* full_case = 32'd1 *)
    casez ({ write_requested_0a, write_requested_04 })
      2'b?1:
          write_request = \$20 ;
      2'b1?:
          write_request = \$26 ;
      default:
          write_request = 1'h0;
    endcase
  end
  assign read_request = 1'h0;
  assign write_requested_0a = \$12 ;
  assign write_requested_04 = \$4 ;
endmodule

module data_crc(usb_clk, rx_data, rx_valid, tx_valid, tx_data, start, crc, \start$1 , \crc$2 , \start$3 , \crc$4 , usb_rst);
  reg \initial  = 0;
  wire \$10 ;
  wire \$100 ;
  wire \$102 ;
  wire \$104 ;
  wire \$106 ;
  wire \$108 ;
  wire \$110 ;
  wire \$112 ;
  wire \$114 ;
  wire \$116 ;
  wire \$118 ;
  wire \$12 ;
  wire \$120 ;
  wire \$122 ;
  wire \$124 ;
  wire \$126 ;
  wire \$128 ;
  wire \$130 ;
  wire \$132 ;
  wire \$134 ;
  wire \$136 ;
  wire \$138 ;
  wire \$14 ;
  wire \$140 ;
  wire \$142 ;
  wire \$144 ;
  wire \$146 ;
  wire \$148 ;
  wire \$150 ;
  wire \$152 ;
  wire \$154 ;
  wire \$156 ;
  wire \$158 ;
  wire \$16 ;
  wire \$160 ;
  wire \$162 ;
  wire \$164 ;
  wire \$166 ;
  wire \$168 ;
  wire \$170 ;
  wire \$172 ;
  wire \$174 ;
  wire \$176 ;
  wire \$178 ;
  wire \$18 ;
  wire \$180 ;
  wire \$182 ;
  wire \$184 ;
  wire \$186 ;
  wire \$188 ;
  wire \$190 ;
  wire \$192 ;
  wire \$194 ;
  wire \$196 ;
  wire \$198 ;
  wire \$20 ;
  wire \$200 ;
  wire \$202 ;
  wire \$204 ;
  wire \$206 ;
  wire \$208 ;
  wire \$210 ;
  wire \$212 ;
  wire \$214 ;
  wire \$216 ;
  wire \$218 ;
  wire \$22 ;
  wire \$220 ;
  wire \$222 ;
  wire \$224 ;
  wire \$226 ;
  wire \$228 ;
  wire \$230 ;
  wire \$232 ;
  wire \$234 ;
  wire \$236 ;
  wire \$238 ;
  wire \$24 ;
  wire \$240 ;
  wire \$242 ;
  wire \$244 ;
  wire \$246 ;
  wire \$248 ;
  wire \$250 ;
  wire \$252 ;
  wire \$254 ;
  wire \$256 ;
  wire \$258 ;
  wire \$26 ;
  wire \$260 ;
  wire \$262 ;
  wire \$264 ;
  wire \$266 ;
  wire \$268 ;
  wire \$270 ;
  wire \$272 ;
  wire \$274 ;
  wire \$276 ;
  wire \$278 ;
  wire \$28 ;
  wire \$280 ;
  wire [15:0] \$282 ;
  wire \$30 ;
  wire \$32 ;
  wire \$34 ;
  wire \$36 ;
  wire \$38 ;
  wire \$40 ;
  wire \$42 ;
  wire \$44 ;
  wire \$46 ;
  wire \$48 ;
  wire \$50 ;
  wire \$52 ;
  wire \$54 ;
  wire \$56 ;
  wire \$58 ;
  wire \$6 ;
  wire \$60 ;
  wire \$62 ;
  wire \$64 ;
  wire \$66 ;
  wire \$68 ;
  wire \$70 ;
  wire \$72 ;
  wire \$74 ;
  wire \$76 ;
  wire \$78 ;
  wire \$8 ;
  wire \$80 ;
  wire \$82 ;
  wire \$84 ;
  wire \$86 ;
  wire \$88 ;
  wire \$90 ;
  wire \$92 ;
  wire \$94 ;
  wire \$96 ;
  wire \$98 ;
  output [15:0] crc;
  output [15:0] \crc$2 ;
  output [15:0] \crc$4 ;
  reg [15:0] \crc$5  = 16'hffff;
  reg [15:0] \crc$5$next ;
  wire [15:0] output_crc;
  input [7:0] rx_data;
  input rx_valid;
  input start;
  input \start$1 ;
  input \start$3 ;
  input [7:0] tx_data;
  input tx_valid;
  input usb_clk;
  input usb_rst;
  assign \$100  = \$96  ^ \$98 ;
  assign \$102  = rx_data[0] ^ rx_data[1];
  assign \$104  = \crc$5 [14] ^ \crc$5 [15];
  assign \$106  = \$102  ^ \$104 ;
  assign \$108  = \$106  ^ \crc$5 [0];
  assign \$10  = rx_data[0] ^ rx_data[1];
  assign \$110  = rx_data[0] ^ \crc$5 [1];
  assign \$112  = \$110  ^ \crc$5 [15];
  assign \$114  = rx_data[0] ^ rx_data[1];
  assign \$116  = \$114  ^ rx_data[2];
  assign \$118  = \$116  ^ rx_data[3];
  assign \$120  = \$118  ^ rx_data[4];
  assign \$122  = \$120  ^ rx_data[5];
  assign \$124  = \$122  ^ rx_data[6];
  assign \$126  = \$124  ^ rx_data[7];
  assign \$128  = \crc$5 [7] ^ \crc$5 [8];
  assign \$12  = \$10  ^ rx_data[2];
  assign \$130  = \$128  ^ \crc$5 [9];
  assign \$132  = \$130  ^ \crc$5 [10];
  assign \$134  = \$132  ^ \crc$5 [11];
  assign \$136  = \$134  ^ \crc$5 [12];
  assign \$138  = \$136  ^ \crc$5 [13];
  assign \$140  = \$138  ^ \crc$5 [14];
  assign \$142  = \$140  ^ \crc$5 [15];
  assign \$144  = \$126  ^ \$142 ;
  assign \$146  = tx_data[0] ^ tx_data[1];
  assign \$148  = \$146  ^ tx_data[2];
  assign \$14  = \$12  ^ rx_data[3];
  assign \$150  = \$148  ^ tx_data[3];
  assign \$152  = \$150  ^ tx_data[4];
  assign \$154  = \$152  ^ tx_data[5];
  assign \$156  = \$154  ^ tx_data[6];
  assign \$158  = \$156  ^ tx_data[7];
  assign \$160  = \crc$5 [8] ^ \crc$5 [9];
  assign \$162  = \$160  ^ \crc$5 [10];
  assign \$164  = \$162  ^ \crc$5 [11];
  assign \$166  = \$164  ^ \crc$5 [12];
  assign \$168  = \$166  ^ \crc$5 [13];
  assign \$16  = \$14  ^ rx_data[4];
  assign \$170  = \$168  ^ \crc$5 [14];
  assign \$172  = \$170  ^ \crc$5 [15];
  assign \$174  = \$158  ^ \$172 ;
  assign \$176  = tx_data[0] ^ tx_data[1];
  assign \$178  = \$176  ^ tx_data[2];
  assign \$180  = \$178  ^ tx_data[3];
  assign \$182  = \$180  ^ tx_data[4];
  assign \$184  = \$182  ^ tx_data[5];
  assign \$186  = \$184  ^ tx_data[6];
  assign \$188  = \crc$5 [9] ^ \crc$5 [10];
  assign \$18  = \$16  ^ rx_data[5];
  assign \$190  = \$188  ^ \crc$5 [11];
  assign \$192  = \$190  ^ \crc$5 [12];
  assign \$194  = \$192  ^ \crc$5 [13];
  assign \$196  = \$194  ^ \crc$5 [14];
  assign \$198  = \$196  ^ \crc$5 [15];
  assign \$200  = \$186  ^ \$198 ;
  assign \$202  = tx_data[6] ^ tx_data[7];
  assign \$204  = \crc$5 [8] ^ \crc$5 [9];
  assign \$206  = \$202  ^ \$204 ;
  assign \$208  = tx_data[5] ^ tx_data[6];
  assign \$20  = \$18  ^ rx_data[6];
  assign \$210  = \crc$5 [9] ^ \crc$5 [10];
  assign \$212  = \$208  ^ \$210 ;
  assign \$214  = tx_data[4] ^ tx_data[5];
  assign \$216  = \crc$5 [10] ^ \crc$5 [11];
  assign \$218  = \$214  ^ \$216 ;
  assign \$220  = tx_data[3] ^ tx_data[4];
  assign \$222  = \crc$5 [11] ^ \crc$5 [12];
  assign \$224  = \$220  ^ \$222 ;
  assign \$226  = tx_data[2] ^ tx_data[3];
  assign \$228  = \crc$5 [12] ^ \crc$5 [13];
  assign \$22  = \$20  ^ rx_data[7];
  assign \$230  = \$226  ^ \$228 ;
  assign \$232  = tx_data[1] ^ tx_data[2];
  assign \$234  = \crc$5 [13] ^ \crc$5 [14];
  assign \$236  = \$232  ^ \$234 ;
  assign \$238  = tx_data[0] ^ tx_data[1];
  assign \$240  = \crc$5 [14] ^ \crc$5 [15];
  assign \$242  = \$238  ^ \$240 ;
  assign \$244  = \$242  ^ \crc$5 [0];
  assign \$246  = tx_data[0] ^ \crc$5 [1];
  assign \$248  = \$246  ^ \crc$5 [15];
  assign \$24  = \crc$5 [8] ^ \crc$5 [9];
  assign \$250  = tx_data[0] ^ tx_data[1];
  assign \$252  = \$250  ^ tx_data[2];
  assign \$254  = \$252  ^ tx_data[3];
  assign \$256  = \$254  ^ tx_data[4];
  assign \$258  = \$256  ^ tx_data[5];
  assign \$260  = \$258  ^ tx_data[6];
  assign \$262  = \$260  ^ tx_data[7];
  assign \$264  = \crc$5 [7] ^ \crc$5 [8];
  assign \$266  = \$264  ^ \crc$5 [9];
  assign \$268  = \$266  ^ \crc$5 [10];
  assign \$26  = \$24  ^ \crc$5 [10];
  assign \$270  = \$268  ^ \crc$5 [11];
  assign \$272  = \$270  ^ \crc$5 [12];
  assign \$274  = \$272  ^ \crc$5 [13];
  assign \$276  = \$274  ^ \crc$5 [14];
  assign \$278  = \$276  ^ \crc$5 [15];
  assign \$280  = \$262  ^ \$278 ;
  assign \$282  = ~ { \crc$5 [0], \crc$5 [1], \crc$5 [2], \crc$5 [3], \crc$5 [4], \crc$5 [5], \crc$5 [6], \crc$5 [7], \crc$5 [8], \crc$5 [9], \crc$5 [10], \crc$5 [11], \crc$5 [12], \crc$5 [13], \crc$5 [14], \crc$5 [15] };
  assign \$28  = \$26  ^ \crc$5 [11];
  assign \$30  = \$28  ^ \crc$5 [12];
  assign \$32  = \$30  ^ \crc$5 [13];
  assign \$34  = \$32  ^ \crc$5 [14];
  assign \$36  = \$34  ^ \crc$5 [15];
  assign \$38  = \$22  ^ \$36 ;
  assign \$40  = rx_data[0] ^ rx_data[1];
  assign \$42  = \$40  ^ rx_data[2];
  assign \$44  = \$42  ^ rx_data[3];
  assign \$46  = \$44  ^ rx_data[4];
  assign \$48  = \$46  ^ rx_data[5];
  assign \$50  = \$48  ^ rx_data[6];
  assign \$52  = \crc$5 [9] ^ \crc$5 [10];
  assign \$54  = \$52  ^ \crc$5 [11];
  assign \$56  = \$54  ^ \crc$5 [12];
  assign \$58  = \$56  ^ \crc$5 [13];
  assign \$60  = \$58  ^ \crc$5 [14];
  assign \$62  = \$60  ^ \crc$5 [15];
  assign \$64  = \$50  ^ \$62 ;
  assign \$66  = rx_data[6] ^ rx_data[7];
  assign \$68  = \crc$5 [8] ^ \crc$5 [9];
  assign \$6  = start | \start$1 ;
  assign \$70  = \$66  ^ \$68 ;
  assign \$72  = rx_data[5] ^ rx_data[6];
  assign \$74  = \crc$5 [9] ^ \crc$5 [10];
  assign \$76  = \$72  ^ \$74 ;
  assign \$78  = rx_data[4] ^ rx_data[5];
  assign \$80  = \crc$5 [10] ^ \crc$5 [11];
  assign \$82  = \$78  ^ \$80 ;
  assign \$84  = rx_data[3] ^ rx_data[4];
  assign \$86  = \crc$5 [11] ^ \crc$5 [12];
  assign \$88  = \$84  ^ \$86 ;
  assign \$8  = \$6  | \start$3 ;
  assign \$90  = rx_data[2] ^ rx_data[3];
  assign \$92  = \crc$5 [12] ^ \crc$5 [13];
  assign \$94  = \$90  ^ \$92 ;
  assign \$96  = rx_data[1] ^ rx_data[2];
  assign \$98  = \crc$5 [13] ^ \crc$5 [14];
  always @(posedge usb_clk)
    \crc$5  <= \crc$5$next ;
  always @* begin
    if (\initial ) begin end
    \crc$5$next  = \crc$5 ;
    casez ({ tx_valid, rx_valid, \$8  })
      3'b??1:
          \crc$5$next  = 16'hffff;
      3'b?1?:
          \crc$5$next  = { \$144 , \crc$5 [6:2], \$112 , \$108 , \$100 , \$94 , \$88 , \$82 , \$76 , \$70 , \$64 , \$38  };
      3'b1??:
          \crc$5$next  = { \$280 , \crc$5 [6:2], \$248 , \$244 , \$236 , \$230 , \$224 , \$218 , \$212 , \$206 , \$200 , \$174  };
    endcase
    casez (usb_rst)
      1'h1:
          \crc$5$next  = 16'hffff;
    endcase
  end
  assign \crc$4  = output_crc;
  assign \crc$2  = output_crc;
  assign crc = output_crc;
  assign output_crc = \$282 ;
endmodule

module data_handler(usb_clk, rx_data, rx_valid, rx_active, start, crc, new_packet, length, packet_0, packet_1, packet_2, packet_3, packet_4, packet_5, packet_6, packet_7, usb_rst);
  reg \initial  = 0;
  wire \$1 ;
  wire \$100 ;
  wire \$102 ;
  wire \$104 ;
  wire \$106 ;
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire \$19 ;
  wire \$21 ;
  wire \$23 ;
  wire [3:0] \$25 ;
  wire \$27 ;
  wire \$29 ;
  wire \$3 ;
  wire \$31 ;
  wire \$33 ;
  wire [3:0] \$35 ;
  wire \$37 ;
  wire \$39 ;
  wire \$41 ;
  wire \$43 ;
  wire [4:0] \$45 ;
  wire [4:0] \$46 ;
  wire \$5 ;
  wire \$57 ;
  wire \$59 ;
  wire \$61 ;
  wire \$63 ;
  wire \$65 ;
  wire \$67 ;
  wire \$69 ;
  wire [3:0] \$7 ;
  wire \$71 ;
  wire [4:0] \$73 ;
  wire [4:0] \$74 ;
  wire \$76 ;
  wire \$78 ;
  wire \$80 ;
  wire \$82 ;
  wire \$84 ;
  wire \$86 ;
  wire \$88 ;
  wire \$9 ;
  wire \$90 ;
  wire \$92 ;
  wire \$94 ;
  wire \$96 ;
  wire \$98 ;
  reg [7:0] \$signal  = 8'h00;
  reg [7:0] \$signal$48  = 8'h00;
  reg [7:0] \$signal$48$next ;
  reg [7:0] \$signal$49  = 8'h00;
  reg [7:0] \$signal$49$next ;
  reg [7:0] \$signal$50  = 8'h00;
  reg [7:0] \$signal$50$next ;
  reg [7:0] \$signal$51  = 8'h00;
  reg [7:0] \$signal$51$next ;
  reg [7:0] \$signal$52  = 8'h00;
  reg [7:0] \$signal$52$next ;
  reg [7:0] \$signal$53  = 8'h00;
  reg [7:0] \$signal$53$next ;
  reg [7:0] \$signal$54  = 8'h00;
  reg [7:0] \$signal$54$next ;
  reg [7:0] \$signal$55  = 8'h00;
  reg [7:0] \$signal$55$next ;
  reg [7:0] \$signal$56  = 8'h00;
  reg [7:0] \$signal$56$next ;
  reg [7:0] \$signal$next ;
  reg [3:0] active_pid = 4'h0;
  reg [3:0] \active_pid$next ;
  input [15:0] crc;
  reg [1:0] fsm_state = 2'h0;
  reg [1:0] \fsm_state$next ;
  reg [15:0] last_byte_crc = 16'h0000;
  reg [15:0] \last_byte_crc$next ;
  reg [15:0] last_word = 16'h0000;
  reg [15:0] \last_word$next ;
  reg [15:0] last_word_crc = 16'h0000;
  reg [15:0] \last_word_crc$next ;
  output [3:0] length;
  reg [3:0] length = 4'h0;
  reg [3:0] \length$next ;
  output new_packet;
  reg new_packet = 1'h0;
  reg \new_packet$next ;
  output [7:0] packet_0;
  reg [7:0] packet_0 = 8'h00;
  reg [7:0] \packet_0$next ;
  output [7:0] packet_1;
  reg [7:0] packet_1 = 8'h00;
  reg [7:0] \packet_1$next ;
  output [7:0] packet_2;
  reg [7:0] packet_2 = 8'h00;
  reg [7:0] \packet_2$next ;
  output [7:0] packet_3;
  reg [7:0] packet_3 = 8'h00;
  reg [7:0] \packet_3$next ;
  output [7:0] packet_4;
  reg [7:0] packet_4 = 8'h00;
  reg [7:0] \packet_4$next ;
  output [7:0] packet_5;
  reg [7:0] packet_5 = 8'h00;
  reg [7:0] \packet_5$next ;
  output [7:0] packet_6;
  reg [7:0] packet_6 = 8'h00;
  reg [7:0] \packet_6$next ;
  output [7:0] packet_7;
  reg [7:0] packet_7 = 8'h00;
  reg [7:0] \packet_7$next ;
  reg [3:0] packet_id = 4'h0;
  reg [3:0] \packet_id$next ;
  reg [3:0] position_in_packet = 4'h0;
  reg [3:0] \position_in_packet$next ;
  input rx_active;
  input [7:0] rx_data;
  input rx_valid;
  output start;
  reg start;
  input usb_clk;
  input usb_rst;
  assign \$9  = rx_data[3:0] == \$7 ;
  assign \$100  = ~ rx_active;
  assign \$102  = last_word_crc == last_word;
  assign \$104  = ~ rx_active;
  assign \$106  = last_word_crc == last_word;
  assign \$11  = rx_data[1:0] == 2'h3;
  assign \$13  = \$9  & \$11 ;
  assign \$15  = position_in_packet >= 4'ha;
  assign \$17  = ~ rx_active;
  assign \$1  = ~ rx_active;
  assign \$19  = last_word_crc == last_word;
  assign \$21  = ~ rx_active;
  assign \$23  = ~ rx_active;
  assign \$25  = ~ rx_data[7:4];
  assign \$27  = rx_data[3:0] == \$25 ;
  assign \$29  = rx_data[1:0] == 2'h3;
  assign \$31  = \$27  & \$29 ;
  assign \$33  = ~ rx_active;
  assign \$35  = ~ rx_data[7:4];
  assign \$37  = rx_data[3:0] == \$35 ;
  assign \$3  = last_word_crc == last_word;
  assign \$39  = rx_data[1:0] == 2'h3;
  assign \$41  = \$37  & \$39 ;
  assign \$43  = position_in_packet >= 4'ha;
  assign \$46  = position_in_packet + 1'h1;
  assign \$57  = position_in_packet >= 4'ha;
  assign \$5  = ~ rx_active;
  assign \$59  = position_in_packet >= 4'ha;
  assign \$61  = position_in_packet >= 4'ha;
  assign \$63  = position_in_packet >= 4'ha;
  assign \$65  = ~ rx_active;
  assign \$67  = last_word_crc == last_word;
  assign \$69  = ~ rx_active;
  assign \$71  = last_word_crc == last_word;
  assign \$74  = position_in_packet - 2'h2;
  assign \$76  = ~ rx_active;
  assign \$78  = last_word_crc == last_word;
  assign \$7  = ~ rx_data[7:4];
  assign \$80  = ~ rx_active;
  assign \$82  = last_word_crc == last_word;
  assign \$84  = ~ rx_active;
  assign \$86  = last_word_crc == last_word;
  assign \$88  = ~ rx_active;
  assign \$90  = last_word_crc == last_word;
  assign \$92  = ~ rx_active;
  assign \$94  = last_word_crc == last_word;
  assign \$96  = ~ rx_active;
  assign \$98  = last_word_crc == last_word;
  always @(posedge usb_clk)
    packet_7 <= \packet_7$next ;
  always @(posedge usb_clk)
    packet_6 <= \packet_6$next ;
  always @(posedge usb_clk)
    packet_5 <= \packet_5$next ;
  always @(posedge usb_clk)
    packet_4 <= \packet_4$next ;
  always @(posedge usb_clk)
    packet_3 <= \packet_3$next ;
  always @(posedge usb_clk)
    packet_2 <= \packet_2$next ;
  always @(posedge usb_clk)
    packet_1 <= \packet_1$next ;
  always @(posedge usb_clk)
    packet_0 <= \packet_0$next ;
  always @(posedge usb_clk)
    length <= \length$next ;
  always @(posedge usb_clk)
    packet_id <= \packet_id$next ;
  always @(posedge usb_clk)
    last_byte_crc <= \last_byte_crc$next ;
  always @(posedge usb_clk)
    last_word_crc <= \last_word_crc$next ;
  always @(posedge usb_clk)
    last_word <= \last_word$next ;
  always @(posedge usb_clk)
    \$signal  <= \$signal$next ;
  always @(posedge usb_clk)
    \$signal$48  <= \$signal$48$next ;
  always @(posedge usb_clk)
    \$signal$49  <= \$signal$49$next ;
  always @(posedge usb_clk)
    \$signal$50  <= \$signal$50$next ;
  always @(posedge usb_clk)
    \$signal$51  <= \$signal$51$next ;
  always @(posedge usb_clk)
    \$signal$52  <= \$signal$52$next ;
  always @(posedge usb_clk)
    \$signal$53  <= \$signal$53$next ;
  always @(posedge usb_clk)
    \$signal$54  <= \$signal$54$next ;
  always @(posedge usb_clk)
    \$signal$55  <= \$signal$55$next ;
  always @(posedge usb_clk)
    \$signal$56  <= \$signal$56$next ;
  always @(posedge usb_clk)
    position_in_packet <= \position_in_packet$next ;
  always @(posedge usb_clk)
    active_pid <= \active_pid$next ;
  always @(posedge usb_clk)
    fsm_state <= \fsm_state$next ;
  always @(posedge usb_clk)
    new_packet <= \new_packet$next ;
  always @* begin
    if (\initial ) begin end
    \new_packet$next  = 1'h0;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          casez (\$1 )
            1'h1:
                casez (\$3 )
                  1'h1:
                      \new_packet$next  = 1'h1;
                endcase
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \new_packet$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    start = 1'h0;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          start = 1'h1;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \last_word$next  = last_word;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          casez (rx_valid)
            1'h1:
                (* full_case = 32'd1 *)
                casez (\$59 )
                  1'h1:
                      /* empty */;
                  default:
                      \last_word$next  = { rx_data, last_word[15:8] };
                endcase
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \last_word$next  = 16'h0000;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \last_word_crc$next  = last_word_crc;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          casez (rx_valid)
            1'h1:
                (* full_case = 32'd1 *)
                casez (\$61 )
                  1'h1:
                      /* empty */;
                  default:
                      \last_word_crc$next  = last_byte_crc;
                endcase
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \last_word_crc$next  = 16'h0000;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \last_byte_crc$next  = last_byte_crc;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          casez (rx_valid)
            1'h1:
                (* full_case = 32'd1 *)
                casez (\$63 )
                  1'h1:
                      /* empty */;
                  default:
                      \last_byte_crc$next  = crc;
                endcase
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \last_byte_crc$next  = 16'h0000;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \packet_id$next  = packet_id;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          casez (\$65 )
            1'h1:
                casez (\$67 )
                  1'h1:
                      \packet_id$next  = active_pid;
                endcase
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \packet_id$next  = 4'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \length$next  = length;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          casez (\$69 )
            1'h1:
                casez (\$71 )
                  1'h1:
                      \length$next  = \$74 [3:0];
                endcase
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \length$next  = 4'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \fsm_state$next  = fsm_state;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      2'h0:
          casez (rx_active)
            1'h1:
                \fsm_state$next  = 2'h1;
          endcase
      2'h1:
          casez ({ rx_valid, \$5  })
            2'b?1:
                \fsm_state$next  = 2'h0;
            2'b1?:
                (* full_case = 32'd1 *)
                casez (\$13 )
                  1'h1:
                      \fsm_state$next  = 2'h2;
                  default:
                      \fsm_state$next  = 2'h3;
                endcase
          endcase
      2'h2:
        begin
          casez (rx_valid)
            1'h1:
                casez (\$15 )
                  1'h1:
                      \fsm_state$next  = 2'h3;
                endcase
          endcase
          casez (\$17 )
            1'h1:
                casez (\$19 )
                  1'h1:
                      \fsm_state$next  = 2'h0;
                endcase
          endcase
        end
      2'h3:
          casez (\$21 )
            1'h1:
                \fsm_state$next  = 2'h0;
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \fsm_state$next  = 2'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \packet_0$next  = packet_0;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          casez (\$76 )
            1'h1:
                casez (\$78 )
                  1'h1:
                      \packet_0$next  = \$signal ;
                endcase
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \packet_0$next  = 8'h00;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \packet_1$next  = packet_1;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          casez (\$80 )
            1'h1:
                casez (\$82 )
                  1'h1:
                      \packet_1$next  = \$signal$48 ;
                endcase
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \packet_1$next  = 8'h00;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \packet_2$next  = packet_2;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          casez (\$84 )
            1'h1:
                casez (\$86 )
                  1'h1:
                      \packet_2$next  = \$signal$49 ;
                endcase
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \packet_2$next  = 8'h00;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \packet_3$next  = packet_3;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          casez (\$88 )
            1'h1:
                casez (\$90 )
                  1'h1:
                      \packet_3$next  = \$signal$50 ;
                endcase
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \packet_3$next  = 8'h00;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \packet_4$next  = packet_4;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          casez (\$92 )
            1'h1:
                casez (\$94 )
                  1'h1:
                      \packet_4$next  = \$signal$51 ;
                endcase
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \packet_4$next  = 8'h00;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \packet_5$next  = packet_5;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          casez (\$96 )
            1'h1:
                casez (\$98 )
                  1'h1:
                      \packet_5$next  = \$signal$52 ;
                endcase
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \packet_5$next  = 8'h00;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \packet_6$next  = packet_6;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          casez (\$100 )
            1'h1:
                casez (\$102 )
                  1'h1:
                      \packet_6$next  = \$signal$53 ;
                endcase
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \packet_6$next  = 8'h00;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \packet_7$next  = packet_7;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          casez (\$104 )
            1'h1:
                casez (\$106 )
                  1'h1:
                      \packet_7$next  = \$signal$54 ;
                endcase
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \packet_7$next  = 8'h00;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \active_pid$next  = active_pid;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          casez ({ rx_valid, \$23  })
            2'b?1:
                /* empty */;
            2'b1?:
                casez (\$31 )
                  1'h1:
                      \active_pid$next  = rx_data[3:0];
                endcase
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \active_pid$next  = 4'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \position_in_packet$next  = position_in_packet;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          casez ({ rx_valid, \$33  })
            2'b?1:
                /* empty */;
            2'b1?:
                casez (\$41 )
                  1'h1:
                      \position_in_packet$next  = 4'h0;
                endcase
          endcase
      2'h2:
          casez (rx_valid)
            1'h1:
                (* full_case = 32'd1 *)
                casez (\$43 )
                  1'h1:
                      /* empty */;
                  default:
                      \position_in_packet$next  = \$46 [3:0];
                endcase
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \position_in_packet$next  = 4'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \$signal$next  = \$signal ;
    \$signal$48$next  = \$signal$48 ;
    \$signal$49$next  = \$signal$49 ;
    \$signal$50$next  = \$signal$50 ;
    \$signal$51$next  = \$signal$51 ;
    \$signal$52$next  = \$signal$52 ;
    \$signal$53$next  = \$signal$53 ;
    \$signal$54$next  = \$signal$54 ;
    \$signal$55$next  = \$signal$55 ;
    \$signal$56$next  = \$signal$56 ;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          casez (rx_valid)
            1'h1:
                (* full_case = 32'd1 *)
                casez (\$57 )
                  1'h1:
                      /* empty */;
                  default:
                      (* full_case = 32'd1 *)
                      casez (position_in_packet)
                        4'h0:
                            \$signal$next  = rx_data;
                        4'h1:
                            \$signal$48$next  = rx_data;
                        4'h2:
                            \$signal$49$next  = rx_data;
                        4'h3:
                            \$signal$50$next  = rx_data;
                        4'h4:
                            \$signal$51$next  = rx_data;
                        4'h5:
                            \$signal$52$next  = rx_data;
                        4'h6:
                            \$signal$53$next  = rx_data;
                        4'h7:
                            \$signal$54$next  = rx_data;
                        4'h8:
                            \$signal$55$next  = rx_data;
                        4'h?:
                            \$signal$56$next  = rx_data;
                      endcase
                endcase
          endcase
    endcase
    casez (usb_rst)
      1'h1:
        begin
          \$signal$next  = 8'h00;
          \$signal$48$next  = 8'h00;
          \$signal$49$next  = 8'h00;
          \$signal$50$next  = 8'h00;
          \$signal$51$next  = 8'h00;
          \$signal$52$next  = 8'h00;
          \$signal$53$next  = 8'h00;
          \$signal$54$next  = 8'h00;
          \$signal$55$next  = 8'h00;
          \$signal$56$next  = 8'h00;
        end
    endcase
  end
  assign \$45  = \$46 ;
  assign \$73  = \$74 ;
endmodule

module encoder(o, i);
  reg \initial  = 0;
  input [3:0] i;
  reg n;
  output [1:0] o;
  reg [1:0] o;
  always @* begin
    if (\initial ) begin end
    o = 2'h0;
    casez (i)
      4'h1:
          o = 2'h0;
      4'h2:
          o = 2'h1;
      4'h4:
          o = 2'h2;
      4'h8:
          o = 2'h3;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    n = 1'h0;
    (* full_case = 32'd1 *)
    casez (i)
      4'h1:
          /* empty */;
      4'h2:
          /* empty */;
      4'h4:
          /* empty */;
      4'h8:
          /* empty */;
      default:
          n = 1'h1;
    endcase
  end
endmodule

module \encoder$3 (o, i);
  reg \initial  = 0;
  input [2:0] i;
  reg n;
  output [1:0] o;
  reg [1:0] o;
  always @* begin
    if (\initial ) begin end
    o = 2'h0;
    casez (i)
      3'h1:
          o = 2'h0;
      3'h2:
          o = 2'h1;
      3'h4:
          o = 2'h2;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    n = 1'h0;
    (* full_case = 32'd1 *)
    casez (i)
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h4:
          /* empty */;
      default:
          n = 1'h1;
    endcase
  end
endmodule

module \encoder$6 (o, i);
  reg \initial  = 0;
  input [2:0] i;
  reg n;
  output [1:0] o;
  reg [1:0] o;
  always @* begin
    if (\initial ) begin end
    o = 2'h0;
    casez (i)
      3'h1:
          o = 2'h0;
      3'h2:
          o = 2'h1;
      3'h4:
          o = 2'h2;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    n = 1'h0;
    (* full_case = 32'd1 *)
    casez (i)
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h4:
          /* empty */;
      default:
          n = 1'h1;
    endcase
  end
endmodule

module endpoint_mux(usb_clk, pid, address, endpoint, new_token, ready_for_response, frame, new_frame, is_in, is_out, is_setup, is_ping, ack, nak, stall, nyet, speed, active_config, active_address, valid, next, payload, rx_complete, rx_invalid, rx_ready_for_response, rx_pid_toggle, \valid$1 , first, last, \payload$2 , ready, \ack$3 , \nak$4 , \stall$5 , tx_pid_toggle, address_changed, new_address, config_changed, new_config, start, crc, \start$6 , tx_allowed, tx_timeout, rx_timeout, \crc$7 , \tx_allowed$8 , \tx_timeout$9 , \rx_timeout$10 , \ack$11 , \nak$12 , \stall$13 , \nyet$14 , \pid$15 , \address$16 , \endpoint$17 , \new_token$18 , \ready_for_response$19 , \frame$20 , \new_frame$21 , \is_in$22 , \is_out$23 , \is_setup$24 , \is_ping$25 , \valid$26 , \next$27 , \payload$28 , \rx_ready_for_response$29 , \speed$30 , \active_config$31 , \ack$32 , \nak$33 , \stall$34 , \nyet$35 , \pid$36 , \address$37 , \endpoint$38 , \new_token$39 , \ready_for_response$40 , \frame$41 , \new_frame$42 , \is_in$43 , \is_out$44 , \is_setup$45 , \is_ping$46 , \endpoint$47 , \ready_for_response$48 , \is_out$49 , \is_ping$50 , \valid$51 , \next$52 , \payload$53 , \rx_complete$54 , \rx_ready_for_response$55 , \rx_invalid$56 , \rx_pid_toggle$57 , \ack$58 , \nak$59 , \stall$60 , \nyet$61 , \pid$62 , \address$63 , \endpoint$64 , \new_token$65 , \ready_for_response$66 , \frame$67 , \new_frame$68 , \is_in$69 , \is_out$70 , \is_setup$71 , \is_ping$72 , \address_changed$73 , \new_address$74 , \config_changed$75 , \new_config$76 , \ack$77 , \ack$78 , \ack$79 , \ack$80 , \nak$81 , \nak$82 , \nak$83 , \nak$84 , \stall$85 , \stall$86 , \stall$87 , \start$88 , \start$89 , \valid$90 , \valid$91 , \valid$92 , \tx_pid_toggle$93 , \tx_pid_toggle$94 , \tx_pid_toggle$95 , \payload$96 , \payload$97 , \payload$98 , \first$99 , \first$100 , \first$101 , \last$102 , \last$103 , \last$104 , \ready$105 , \ready$106 , \ready$107 , usb_rst);
  reg \initial  = 0;
  wire \$171 ;
  wire \$173 ;
  wire \$175 ;
  wire \$177 ;
  wire \$179 ;
  wire \$181 ;
  wire \$183 ;
  wire \$185 ;
  wire \$187 ;
  wire \$189 ;
  wire \$192 ;
  wire \$194 ;
  wire \$196 ;
  wire \$199 ;
  wire \$202 ;
  wire \$205 ;
  wire \$207 ;
  wire \$210 ;
  wire \$213 ;
  wire \$216 ;
  wire \$218 ;
  wire \$221 ;
  wire \$224 ;
  wire \$227 ;
  (* \nmigen.sample_reg  = 32'd1 *)
  reg \$sample$s$valid$usb$1  = 1'h0;
  (* \nmigen.sample_reg  = 32'd1 *)
  reg \$sample$s$valid$usb$1$220  = 1'h0;
  wire \$sample$s$valid$usb$1$220$next ;
  (* \nmigen.sample_reg  = 32'd1 *)
  reg \$sample$s$valid$usb$1$223  = 1'h0;
  wire \$sample$s$valid$usb$1$223$next ;
  (* \nmigen.sample_reg  = 32'd1 *)
  reg \$sample$s$valid$usb$1$226  = 1'h0;
  wire \$sample$s$valid$usb$1$226$next ;
  wire \$sample$s$valid$usb$1$next ;
  input ack;
  output \ack$11 ;
  wire \ack$131 ;
  output \ack$3 ;
  output \ack$32 ;
  output \ack$58 ;
  input \ack$77 ;
  input \ack$78 ;
  input \ack$79 ;
  input \ack$80 ;
  input [6:0] active_address;
  wire [6:0] \active_address$112 ;
  wire [6:0] \active_address$126 ;
  wire [6:0] \active_address$144 ;
  wire [6:0] \active_address$158 ;
  input [7:0] active_config;
  wire [7:0] \active_config$125 ;
  wire [7:0] \active_config$143 ;
  wire [7:0] \active_config$157 ;
  output [7:0] \active_config$31 ;
  input [6:0] address;
  wire [6:0] \address$136 ;
  output [6:0] \address$16 ;
  output [6:0] \address$37 ;
  output [6:0] \address$63 ;
  output address_changed;
  reg address_changed;
  wire \address_changed$159 ;
  wire \address_changed$160 ;
  wire \address_changed$161 ;
  input \address_changed$73 ;
  output config_changed;
  reg config_changed;
  wire \config_changed$165 ;
  wire \config_changed$166 ;
  wire \config_changed$167 ;
  input \config_changed$75 ;
  input [15:0] crc;
  wire [15:0] \crc$113 ;
  wire [15:0] \crc$127 ;
  wire [15:0] \crc$145 ;
  output [15:0] \crc$7 ;
  input [3:0] endpoint;
  output [3:0] \endpoint$17 ;
  output [3:0] \endpoint$38 ;
  output [3:0] \endpoint$47 ;
  output [3:0] \endpoint$64 ;
  output first;
  input \first$100 ;
  input \first$101 ;
  input \first$99 ;
  input [10:0] frame;
  wire [10:0] \frame$138 ;
  output [10:0] \frame$20 ;
  output [10:0] \frame$41 ;
  output [10:0] \frame$67 ;
  input is_in;
  wire \is_in$140 ;
  output \is_in$22 ;
  output \is_in$43 ;
  output \is_in$69 ;
  input is_out;
  output \is_out$23 ;
  output \is_out$44 ;
  output \is_out$49 ;
  output \is_out$70 ;
  input is_ping;
  output \is_ping$25 ;
  output \is_ping$46 ;
  output \is_ping$50 ;
  output \is_ping$72 ;
  input is_setup;
  wire \is_setup$141 ;
  output \is_setup$24 ;
  output \is_setup$45 ;
  output \is_setup$71 ;
  output last;
  input \last$102 ;
  input \last$103 ;
  input \last$104 ;
  input nak;
  output \nak$12 ;
  wire \nak$132 ;
  output \nak$33 ;
  output \nak$4 ;
  output \nak$59 ;
  input \nak$81 ;
  input \nak$82 ;
  input \nak$83 ;
  input \nak$84 ;
  output [6:0] new_address;
  reg [6:0] new_address;
  wire [6:0] \new_address$162 ;
  wire [6:0] \new_address$163 ;
  wire [6:0] \new_address$164 ;
  input [6:0] \new_address$74 ;
  output [7:0] new_config;
  reg [7:0] new_config;
  wire [7:0] \new_config$168 ;
  wire [7:0] \new_config$169 ;
  wire [7:0] \new_config$170 ;
  input [7:0] \new_config$76 ;
  input new_frame;
  wire \new_frame$139 ;
  output \new_frame$21 ;
  output \new_frame$42 ;
  output \new_frame$68 ;
  input new_token;
  wire \new_token$137 ;
  output \new_token$18 ;
  output \new_token$39 ;
  output \new_token$65 ;
  input next;
  wire \next$118 ;
  wire \next$150 ;
  output \next$27 ;
  output \next$52 ;
  input nyet;
  wire \nyet$134 ;
  output \nyet$14 ;
  output \nyet$35 ;
  output \nyet$61 ;
  input [7:0] payload;
  wire [7:0] \payload$119 ;
  wire [7:0] \payload$151 ;
  output [7:0] \payload$2 ;
  output [7:0] \payload$28 ;
  output [7:0] \payload$53 ;
  input [7:0] \payload$96 ;
  input [7:0] \payload$97 ;
  input [7:0] \payload$98 ;
  input [3:0] pid;
  wire [3:0] \pid$135 ;
  output [3:0] \pid$15 ;
  output [3:0] \pid$36 ;
  output [3:0] \pid$62 ;
  input ready;
  output \ready$105 ;
  output \ready$106 ;
  output \ready$107 ;
  input ready_for_response;
  output \ready_for_response$19 ;
  output \ready_for_response$40 ;
  output \ready_for_response$48 ;
  output \ready_for_response$66 ;
  input rx_complete;
  wire \rx_complete$109 ;
  wire \rx_complete$120 ;
  wire \rx_complete$152 ;
  output \rx_complete$54 ;
  input rx_invalid;
  wire \rx_invalid$110 ;
  wire \rx_invalid$122 ;
  wire \rx_invalid$154 ;
  output \rx_invalid$56 ;
  input [1:0] rx_pid_toggle;
  wire [1:0] \rx_pid_toggle$111 ;
  wire [1:0] \rx_pid_toggle$123 ;
  wire [1:0] \rx_pid_toggle$155 ;
  output [1:0] \rx_pid_toggle$57 ;
  input rx_ready_for_response;
  wire \rx_ready_for_response$121 ;
  wire \rx_ready_for_response$153 ;
  output \rx_ready_for_response$29 ;
  output \rx_ready_for_response$55 ;
  input rx_timeout;
  output \rx_timeout$10 ;
  wire \rx_timeout$116 ;
  wire \rx_timeout$130 ;
  wire \rx_timeout$148 ;
  input [1:0] speed;
  wire [1:0] \speed$124 ;
  wire [1:0] \speed$142 ;
  wire [1:0] \speed$156 ;
  output [1:0] \speed$30 ;
  input stall;
  output \stall$13 ;
  wire \stall$133 ;
  wire \stall$191 ;
  output \stall$34 ;
  output \stall$5 ;
  output \stall$60 ;
  input \stall$85 ;
  input \stall$86 ;
  input \stall$87 ;
  output start;
  wire \start$198 ;
  wire \start$201 ;
  wire \start$204 ;
  wire \start$209 ;
  wire \start$212 ;
  wire \start$215 ;
  output \start$6 ;
  input \start$88 ;
  input \start$89 ;
  input tx_allowed;
  wire \tx_allowed$114 ;
  wire \tx_allowed$128 ;
  wire \tx_allowed$146 ;
  output \tx_allowed$8 ;
  wire tx_mux_first;
  wire tx_mux_last;
  wire [7:0] tx_mux_payload;
  wire tx_mux_ready;
  wire tx_mux_valid;
  wire \tx_mux_valid$108 ;
  output [1:0] tx_pid_toggle;
  reg [1:0] tx_pid_toggle;
  wire [1:0] \tx_pid_toggle$229 ;
  input [1:0] \tx_pid_toggle$93 ;
  input [1:0] \tx_pid_toggle$94 ;
  input [1:0] \tx_pid_toggle$95 ;
  input tx_timeout;
  wire \tx_timeout$115 ;
  wire \tx_timeout$129 ;
  wire \tx_timeout$147 ;
  output \tx_timeout$9 ;
  input usb_clk;
  input usb_rst;
  input valid;
  output \valid$1 ;
  wire \valid$117 ;
  wire \valid$149 ;
  output \valid$26 ;
  output \valid$51 ;
  input \valid$90 ;
  input \valid$91 ;
  input \valid$92 ;
  assign \$173  = \$171  | \ack$78 ;
  assign \$175  = \$173  | \ack$79 ;
  assign \$177  = \$175  | \ack$80 ;
  assign \$181  = \$179  | \nak$82 ;
  assign \$183  = \$181  | \nak$83 ;
  assign \$185  = \$183  | \nak$84 ;
  assign \$189  = \$187  | \stall$86 ;
  assign \$194  = \$192  | \stall$87 ;
  assign \$218  = \valid$90  | \$sample$s$valid$usb$1 ;
  assign \$221  = \valid$91  | \$sample$s$valid$usb$1$220 ;
  assign \$227  = \valid$92  | \$sample$s$valid$usb$1$226 ;
  always @(posedge usb_clk)
    \$sample$s$valid$usb$1$226  <= \valid$92 ;
  always @(posedge usb_clk)
    \$sample$s$valid$usb$1$223  <= 1'h0;
  always @(posedge usb_clk)
    \$sample$s$valid$usb$1$220  <= \valid$91 ;
  always @(posedge usb_clk)
    \$sample$s$valid$usb$1  <= \valid$90 ;
  tx_mux tx_mux (
    .first(tx_mux_first),
    .\first$10 (\first$101 ),
    .\first$8 (\first$99 ),
    .\first$9 (\first$100 ),
    .last(tx_mux_last),
    .\last$11 (\last$102 ),
    .\last$12 (\last$103 ),
    .\last$13 (\last$104 ),
    .payload(tx_mux_payload),
    .\payload$5 (\payload$96 ),
    .\payload$6 (\payload$97 ),
    .\payload$7 (\payload$98 ),
    .ready(tx_mux_ready),
    .\ready$14 (\ready$105 ),
    .\ready$15 (\ready$106 ),
    .\ready$16 (\ready$107 ),
    .valid(tx_mux_valid),
    .\valid$1 (\valid$90 ),
    .\valid$2 (\valid$91 ),
    .\valid$3 (1'h0),
    .\valid$4 (\valid$92 )
  );
  always @* begin
    if (\initial ) begin end
    address_changed = 1'h0;
    casez ({ \address_changed$161 , \address_changed$160 , \address_changed$159 , \address_changed$73  })
      4'b???1:
          address_changed = \address_changed$73 ;
      4'b??1?:
          address_changed = 1'h0;
      4'b?1??:
          address_changed = 1'h0;
      4'b1???:
          address_changed = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    new_address = 7'h00;
    casez ({ \address_changed$161 , \address_changed$160 , \address_changed$159 , \address_changed$73  })
      4'b???1:
          new_address = \new_address$74 ;
      4'b??1?:
          new_address = 7'h00;
      4'b?1??:
          new_address = 7'h00;
      4'b1???:
          new_address = 7'h00;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    config_changed = 1'h0;
    casez ({ \config_changed$167 , \config_changed$166 , \config_changed$165 , \config_changed$75  })
      4'b???1:
          config_changed = \config_changed$75 ;
      4'b??1?:
          config_changed = 1'h0;
      4'b?1??:
          config_changed = 1'h0;
      4'b1???:
          config_changed = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    new_config = 8'h00;
    casez ({ \config_changed$167 , \config_changed$166 , \config_changed$165 , \config_changed$75  })
      4'b???1:
          new_config = \new_config$76 ;
      4'b??1?:
          new_config = 8'h00;
      4'b?1??:
          new_config = 8'h00;
      4'b1???:
          new_config = 8'h00;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    tx_pid_toggle = 2'h0;
    casez ({ \$227 , \$224 , \$221 , \$218  })
      4'b???1:
          tx_pid_toggle = \tx_pid_toggle$93 ;
      4'b??1?:
          tx_pid_toggle = \tx_pid_toggle$94 ;
      4'b?1??:
          tx_pid_toggle = 2'h0;
      4'b1???:
          tx_pid_toggle = \tx_pid_toggle$95 ;
    endcase
  end
  assign \tx_mux_valid$108  = 1'h0;
  assign \address_changed$159  = 1'h0;
  assign \address_changed$160  = 1'h0;
  assign \address_changed$161  = 1'h0;
  assign \new_address$162  = 7'h00;
  assign \new_address$163  = 7'h00;
  assign \new_address$164  = 7'h00;
  assign \config_changed$165  = 1'h0;
  assign \config_changed$166  = 1'h0;
  assign \config_changed$167  = 1'h0;
  assign \new_config$168  = 8'h00;
  assign \new_config$169  = 8'h00;
  assign \new_config$170  = 8'h00;
  assign \stall$191  = 1'h0;
  assign \start$198  = 1'h0;
  assign \start$201  = 1'h0;
  assign \start$204  = 1'h0;
  assign \start$209  = 1'h0;
  assign \start$212  = 1'h0;
  assign \start$215  = 1'h0;
  assign \tx_pid_toggle$229  = 2'h0;
  assign \$sample$s$valid$usb$1$226$next  = \valid$92 ;
  assign \$sample$s$valid$usb$1$223$next  = 1'h0;
  assign \$sample$s$valid$usb$1$220$next  = \valid$91 ;
  assign \$sample$s$valid$usb$1$next  = \valid$90 ;
  assign \start$6  = \$216 ;
  assign start = \$205 ;
  assign \stall$5  = \$194 ;
  assign \nak$4  = \$185 ;
  assign \ack$3  = \$177 ;
  assign tx_mux_ready = ready;
  assign \payload$2  = tx_mux_payload;
  assign last = tx_mux_last;
  assign first = tx_mux_first;
  assign \valid$1  = tx_mux_valid;
  assign \active_address$158  = active_address;
  assign \active_config$157  = active_config;
  assign \speed$156  = speed;
  assign \rx_pid_toggle$155  = rx_pid_toggle;
  assign \rx_invalid$154  = rx_invalid;
  assign \rx_ready_for_response$153  = rx_ready_for_response;
  assign \rx_complete$152  = rx_complete;
  assign \payload$151  = payload;
  assign \next$150  = next;
  assign \valid$149  = valid;
  assign \is_ping$72  = is_ping;
  assign \is_setup$71  = is_setup;
  assign \is_out$70  = is_out;
  assign \is_in$69  = is_in;
  assign \new_frame$68  = new_frame;
  assign \frame$67  = frame;
  assign \ready_for_response$66  = ready_for_response;
  assign \new_token$65  = new_token;
  assign \endpoint$64  = endpoint;
  assign \address$63  = address;
  assign \pid$62  = pid;
  assign \nyet$61  = nyet;
  assign \stall$60  = stall;
  assign \nak$59  = nak;
  assign \ack$58  = ack;
  assign \rx_timeout$148  = rx_timeout;
  assign \tx_timeout$147  = tx_timeout;
  assign \tx_allowed$146  = tx_allowed;
  assign \crc$145  = crc;
  assign \active_address$144  = active_address;
  assign \active_config$143  = active_config;
  assign \speed$142  = speed;
  assign \rx_pid_toggle$57  = rx_pid_toggle;
  assign \rx_invalid$56  = rx_invalid;
  assign \rx_ready_for_response$55  = rx_ready_for_response;
  assign \rx_complete$54  = rx_complete;
  assign \payload$53  = payload;
  assign \next$52  = next;
  assign \valid$51  = valid;
  assign \is_ping$50  = is_ping;
  assign \is_setup$141  = is_setup;
  assign \is_out$49  = is_out;
  assign \is_in$140  = is_in;
  assign \new_frame$139  = new_frame;
  assign \frame$138  = frame;
  assign \ready_for_response$48  = ready_for_response;
  assign \new_token$137  = new_token;
  assign \endpoint$47  = endpoint;
  assign \address$136  = address;
  assign \pid$135  = pid;
  assign \nyet$134  = nyet;
  assign \stall$133  = stall;
  assign \nak$132  = nak;
  assign \ack$131  = ack;
  assign \rx_timeout$130  = rx_timeout;
  assign \tx_timeout$129  = tx_timeout;
  assign \tx_allowed$128  = tx_allowed;
  assign \crc$127  = crc;
  assign \active_address$126  = active_address;
  assign \active_config$125  = active_config;
  assign \speed$124  = speed;
  assign \rx_pid_toggle$123  = rx_pid_toggle;
  assign \rx_invalid$122  = rx_invalid;
  assign \rx_ready_for_response$121  = rx_ready_for_response;
  assign \rx_complete$120  = rx_complete;
  assign \payload$119  = payload;
  assign \next$118  = next;
  assign \valid$117  = valid;
  assign \is_ping$46  = is_ping;
  assign \is_setup$45  = is_setup;
  assign \is_out$44  = is_out;
  assign \is_in$43  = is_in;
  assign \new_frame$42  = new_frame;
  assign \frame$41  = frame;
  assign \ready_for_response$40  = ready_for_response;
  assign \new_token$39  = new_token;
  assign \endpoint$38  = endpoint;
  assign \address$37  = address;
  assign \pid$36  = pid;
  assign \nyet$35  = nyet;
  assign \stall$34  = stall;
  assign \nak$33  = nak;
  assign \ack$32  = ack;
  assign \rx_timeout$116  = rx_timeout;
  assign \tx_timeout$115  = tx_timeout;
  assign \tx_allowed$114  = tx_allowed;
  assign \crc$113  = crc;
  assign \active_address$112  = active_address;
  assign \active_config$31  = active_config;
  assign \speed$30  = speed;
  assign \rx_pid_toggle$111  = rx_pid_toggle;
  assign \rx_invalid$110  = rx_invalid;
  assign \rx_ready_for_response$29  = rx_ready_for_response;
  assign \rx_complete$109  = rx_complete;
  assign \payload$28  = payload;
  assign \next$27  = next;
  assign \valid$26  = valid;
  assign \is_ping$25  = is_ping;
  assign \is_setup$24  = is_setup;
  assign \is_out$23  = is_out;
  assign \is_in$22  = is_in;
  assign \new_frame$21  = new_frame;
  assign \frame$20  = frame;
  assign \ready_for_response$19  = ready_for_response;
  assign \new_token$18  = new_token;
  assign \endpoint$17  = endpoint;
  assign \address$16  = address;
  assign \pid$15  = pid;
  assign \nyet$14  = nyet;
  assign \stall$13  = stall;
  assign \nak$12  = nak;
  assign \ack$11  = ack;
  assign \rx_timeout$10  = rx_timeout;
  assign \tx_timeout$9  = tx_timeout;
  assign \tx_allowed$8  = tx_allowed;
  assign \crc$7  = crc;
  assign \$171  = \ack$77 ;
  assign \$179  = \nak$81 ;
  assign \$187  = \stall$85 ;
  assign \$192  = \$189 ;
  assign \$196  = \start$88 ;
  assign \$199  = \start$88 ;
  assign \$202  = \start$88 ;
  assign \$205  = \start$88 ;
  assign \$207  = \start$89 ;
  assign \$210  = \start$89 ;
  assign \$213  = \start$89 ;
  assign \$216  = \start$89 ;
  assign \$224  = \$sample$s$valid$usb$1$223 ;
endmodule

module fifo(usb_clk, write_data, write_en, write_commit, write_discard, space_available, empty, read_data, read_en, read_commit, full, usb_rst);
  reg \initial  = 0;
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire [7:0] \$17 ;
  wire [7:0] \$18 ;
  wire \$2 ;
  wire \$20 ;
  wire \$22 ;
  wire \$24 ;
  wire \$26 ;
  wire \$28 ;
  wire \$30 ;
  wire [8:0] \$32 ;
  wire [7:0] \$33 ;
  wire [8:0] \$35 ;
  wire [8:0] \$37 ;
  wire [7:0] \$38 ;
  wire \$4 ;
  wire [8:0] \$40 ;
  wire \$42 ;
  wire \$6 ;
  wire [7:0] \$8 ;
  wire [7:0] \$9 ;
  reg [6:0] committed_read_pointer = 7'h00;
  reg [6:0] \committed_read_pointer$next ;
  reg [6:0] committed_write_pointer = 7'h00;
  reg [6:0] \committed_write_pointer$next ;
  reg [6:0] current_read_pointer = 7'h00;
  reg [6:0] \current_read_pointer$next ;
  reg [6:0] current_write_pointer = 7'h00;
  reg [6:0] \current_write_pointer$next ;
  output empty;
  output full;
  reg [6:0] next_read_pointer;
  reg [6:0] next_write_pointer;
  input read_commit;
  output [9:0] read_data;
  wire read_discard;
  input read_en;
  reg [6:0] rx_fifo_r_addr;
  wire [9:0] rx_fifo_r_data;
  wire [6:0] rx_fifo_w_addr;
  wire [9:0] rx_fifo_w_data;
  wire rx_fifo_w_en;
  output [6:0] space_available;
  reg [6:0] space_available;
  input usb_clk;
  input usb_rst;
  input write_commit;
  input [9:0] write_data;
  input write_discard;
  input write_en;
  reg [9:0] rx_fifo [127:0];
  initial begin
    rx_fifo[0] = 10'h000;
    rx_fifo[1] = 10'h000;
    rx_fifo[2] = 10'h000;
    rx_fifo[3] = 10'h000;
    rx_fifo[4] = 10'h000;
    rx_fifo[5] = 10'h000;
    rx_fifo[6] = 10'h000;
    rx_fifo[7] = 10'h000;
    rx_fifo[8] = 10'h000;
    rx_fifo[9] = 10'h000;
    rx_fifo[10] = 10'h000;
    rx_fifo[11] = 10'h000;
    rx_fifo[12] = 10'h000;
    rx_fifo[13] = 10'h000;
    rx_fifo[14] = 10'h000;
    rx_fifo[15] = 10'h000;
    rx_fifo[16] = 10'h000;
    rx_fifo[17] = 10'h000;
    rx_fifo[18] = 10'h000;
    rx_fifo[19] = 10'h000;
    rx_fifo[20] = 10'h000;
    rx_fifo[21] = 10'h000;
    rx_fifo[22] = 10'h000;
    rx_fifo[23] = 10'h000;
    rx_fifo[24] = 10'h000;
    rx_fifo[25] = 10'h000;
    rx_fifo[26] = 10'h000;
    rx_fifo[27] = 10'h000;
    rx_fifo[28] = 10'h000;
    rx_fifo[29] = 10'h000;
    rx_fifo[30] = 10'h000;
    rx_fifo[31] = 10'h000;
    rx_fifo[32] = 10'h000;
    rx_fifo[33] = 10'h000;
    rx_fifo[34] = 10'h000;
    rx_fifo[35] = 10'h000;
    rx_fifo[36] = 10'h000;
    rx_fifo[37] = 10'h000;
    rx_fifo[38] = 10'h000;
    rx_fifo[39] = 10'h000;
    rx_fifo[40] = 10'h000;
    rx_fifo[41] = 10'h000;
    rx_fifo[42] = 10'h000;
    rx_fifo[43] = 10'h000;
    rx_fifo[44] = 10'h000;
    rx_fifo[45] = 10'h000;
    rx_fifo[46] = 10'h000;
    rx_fifo[47] = 10'h000;
    rx_fifo[48] = 10'h000;
    rx_fifo[49] = 10'h000;
    rx_fifo[50] = 10'h000;
    rx_fifo[51] = 10'h000;
    rx_fifo[52] = 10'h000;
    rx_fifo[53] = 10'h000;
    rx_fifo[54] = 10'h000;
    rx_fifo[55] = 10'h000;
    rx_fifo[56] = 10'h000;
    rx_fifo[57] = 10'h000;
    rx_fifo[58] = 10'h000;
    rx_fifo[59] = 10'h000;
    rx_fifo[60] = 10'h000;
    rx_fifo[61] = 10'h000;
    rx_fifo[62] = 10'h000;
    rx_fifo[63] = 10'h000;
    rx_fifo[64] = 10'h000;
    rx_fifo[65] = 10'h000;
    rx_fifo[66] = 10'h000;
    rx_fifo[67] = 10'h000;
    rx_fifo[68] = 10'h000;
    rx_fifo[69] = 10'h000;
    rx_fifo[70] = 10'h000;
    rx_fifo[71] = 10'h000;
    rx_fifo[72] = 10'h000;
    rx_fifo[73] = 10'h000;
    rx_fifo[74] = 10'h000;
    rx_fifo[75] = 10'h000;
    rx_fifo[76] = 10'h000;
    rx_fifo[77] = 10'h000;
    rx_fifo[78] = 10'h000;
    rx_fifo[79] = 10'h000;
    rx_fifo[80] = 10'h000;
    rx_fifo[81] = 10'h000;
    rx_fifo[82] = 10'h000;
    rx_fifo[83] = 10'h000;
    rx_fifo[84] = 10'h000;
    rx_fifo[85] = 10'h000;
    rx_fifo[86] = 10'h000;
    rx_fifo[87] = 10'h000;
    rx_fifo[88] = 10'h000;
    rx_fifo[89] = 10'h000;
    rx_fifo[90] = 10'h000;
    rx_fifo[91] = 10'h000;
    rx_fifo[92] = 10'h000;
    rx_fifo[93] = 10'h000;
    rx_fifo[94] = 10'h000;
    rx_fifo[95] = 10'h000;
    rx_fifo[96] = 10'h000;
    rx_fifo[97] = 10'h000;
    rx_fifo[98] = 10'h000;
    rx_fifo[99] = 10'h000;
    rx_fifo[100] = 10'h000;
    rx_fifo[101] = 10'h000;
    rx_fifo[102] = 10'h000;
    rx_fifo[103] = 10'h000;
    rx_fifo[104] = 10'h000;
    rx_fifo[105] = 10'h000;
    rx_fifo[106] = 10'h000;
    rx_fifo[107] = 10'h000;
    rx_fifo[108] = 10'h000;
    rx_fifo[109] = 10'h000;
    rx_fifo[110] = 10'h000;
    rx_fifo[111] = 10'h000;
    rx_fifo[112] = 10'h000;
    rx_fifo[113] = 10'h000;
    rx_fifo[114] = 10'h000;
    rx_fifo[115] = 10'h000;
    rx_fifo[116] = 10'h000;
    rx_fifo[117] = 10'h000;
    rx_fifo[118] = 10'h000;
    rx_fifo[119] = 10'h000;
    rx_fifo[120] = 10'h000;
    rx_fifo[121] = 10'h000;
    rx_fifo[122] = 10'h000;
    rx_fifo[123] = 10'h000;
    rx_fifo[124] = 10'h000;
    rx_fifo[125] = 10'h000;
    rx_fifo[126] = 10'h000;
    rx_fifo[127] = 10'h000;
  end
  always @(posedge usb_clk) begin
    if (rx_fifo_w_en)
      rx_fifo[rx_fifo_w_addr] <= rx_fifo_w_data;
  end
  reg [6:0] _0_;
  always @(posedge usb_clk) begin
    _0_ <= rx_fifo_r_addr;
  end
  assign rx_fifo_r_data = rx_fifo[_0_];
  assign \$9  = current_write_pointer + 1'h1;
  assign \$11  = ~ full;
  assign \$13  = write_en & \$11 ;
  assign \$15  = current_read_pointer == 7'h7f;
  assign \$18  = current_read_pointer + 1'h1;
  assign \$20  = ~ empty;
  assign \$22  = read_en & \$20 ;
  assign \$24  = ~ empty;
  assign \$26  = read_en & \$24 ;
  assign \$28  = current_read_pointer == committed_write_pointer;
  assign \$2  = ~ full;
  assign \$30  = committed_read_pointer <= current_write_pointer;
  assign \$33  = current_write_pointer - committed_read_pointer;
  assign \$35  = 7'h7f - \$33 ;
  assign \$38  = committed_read_pointer - current_write_pointer;
  assign \$40  = \$38  - 1'h1;
  assign \$42  = next_write_pointer == committed_read_pointer;
  assign \$4  = write_en & \$2 ;
  assign \$6  = current_write_pointer == 7'h7f;
  always @(posedge usb_clk)
    committed_read_pointer <= \committed_read_pointer$next ;
  always @(posedge usb_clk)
    current_read_pointer <= \current_read_pointer$next ;
  always @(posedge usb_clk)
    committed_write_pointer <= \committed_write_pointer$next ;
  always @(posedge usb_clk)
    current_write_pointer <= \current_write_pointer$next ;
  always @* begin
    if (\initial ) begin end
    \committed_read_pointer$next  = committed_read_pointer;
    casez (read_commit)
      1'h1:
          \committed_read_pointer$next  = current_read_pointer;
    endcase
    casez (usb_rst)
      1'h1:
          \committed_read_pointer$next  = 7'h00;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    (* full_case = 32'd1 *)
    casez ({ \$30 , full })
      2'b?1:
          space_available = 7'h00;
      2'b1?:
          space_available = \$35 [6:0];
      default:
          space_available = \$40 [6:0];
    endcase
  end
  always @* begin
    if (\initial ) begin end
    (* full_case = 32'd1 *)
    casez (\$6 )
      1'h1:
          next_write_pointer = 7'h00;
      default:
          next_write_pointer = \$9 [6:0];
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \current_write_pointer$next  = current_write_pointer;
    casez (\$13 )
      1'h1:
          \current_write_pointer$next  = next_write_pointer;
    endcase
    casez (write_discard)
      1'h1:
          \current_write_pointer$next  = committed_write_pointer;
    endcase
    casez (usb_rst)
      1'h1:
          \current_write_pointer$next  = 7'h00;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \committed_write_pointer$next  = committed_write_pointer;
    casez (write_commit)
      1'h1:
          \committed_write_pointer$next  = current_write_pointer;
    endcase
    casez (usb_rst)
      1'h1:
          \committed_write_pointer$next  = 7'h00;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    (* full_case = 32'd1 *)
    casez (\$15 )
      1'h1:
          next_read_pointer = 7'h00;
      default:
          next_read_pointer = \$18 [6:0];
    endcase
  end
  always @* begin
    if (\initial ) begin end
    (* full_case = 32'd1 *)
    casez (\$22 )
      1'h1:
          rx_fifo_r_addr = next_read_pointer;
      default:
          rx_fifo_r_addr = current_read_pointer;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \current_read_pointer$next  = current_read_pointer;
    casez (\$26 )
      1'h1:
          \current_read_pointer$next  = next_read_pointer;
    endcase
    casez (read_discard)
      1'h1:
          \current_read_pointer$next  = committed_read_pointer;
    endcase
    casez (usb_rst)
      1'h1:
          \current_read_pointer$next  = 7'h00;
    endcase
  end
  assign \$8  = \$9 ;
  assign \$17  = \$18 ;
  assign \$32  = \$35 ;
  assign \$37  = \$40 ;
  assign read_discard = 1'h0;
  assign full = \$42 ;
  assign empty = \$28 ;
  assign rx_fifo_w_addr = current_write_pointer;
  assign rx_fifo_w_en = \$4 ;
  assign rx_fifo_w_data = write_data;
  assign read_data = rx_fifo_r_data;
endmodule

module get_descriptor(usb_clk, value, length, start_position, valid, first, last, payload, ready, stall, start, usb_rst);
  reg \initial  = 0;
  wire \$10 ;
  wire \$101 ;
  wire [16:0] \$102 ;
  wire \$104 ;
  wire [16:0] \$106 ;
  wire \$108 ;
  wire [16:0] \$11 ;
  wire \$110 ;
  wire \$113 ;
  wire [16:0] \$114 ;
  wire \$116 ;
  wire [16:0] \$118 ;
  wire \$120 ;
  wire \$122 ;
  wire [7:0] \$125 ;
  wire [2:0] \$126 ;
  wire [6:0] \$128 ;
  wire \$13 ;
  wire \$131 ;
  wire [16:0] \$133 ;
  wire \$135 ;
  wire [16:0] \$137 ;
  wire \$139 ;
  wire \$141 ;
  wire [16:0] \$15 ;
  wire \$17 ;
  wire \$19 ;
  wire [16:0] \$22 ;
  wire [16:0] \$23 ;
  wire \$25 ;
  wire [8:0] \$27 ;
  wire [8:0] \$28 ;
  wire [16:0] \$3 ;
  wire [32:0] \$30 ;
  wire [32:0] \$31 ;
  wire [32:0] \$33 ;
  wire [6:0] \$35 ;
  wire [5:0] \$36 ;
  wire [6:0] \$38 ;
  wire \$40 ;
  wire [16:0] \$41 ;
  wire \$43 ;
  wire [16:0] \$45 ;
  wire \$47 ;
  wire \$49 ;
  wire \$5 ;
  wire [6:0] \$52 ;
  wire [6:0] \$53 ;
  wire [6:0] \$54 ;
  wire [6:0] \$56 ;
  wire \$58 ;
  wire [16:0] \$59 ;
  wire \$61 ;
  wire [16:0] \$63 ;
  wire \$65 ;
  wire \$67 ;
  wire [16:0] \$7 ;
  wire [6:0] \$70 ;
  wire [6:0] \$71 ;
  wire \$73 ;
  wire \$75 ;
  wire \$77 ;
  wire \$79 ;
  wire [16:0] \$8 ;
  wire \$81 ;
  wire [16:0] \$82 ;
  wire \$84 ;
  wire [16:0] \$86 ;
  wire \$88 ;
  wire \$90 ;
  wire \$93 ;
  wire \$95 ;
  wire \$97 ;
  wire \$99 ;
  reg [15:0] bytes_sent = 16'h0000;
  reg [15:0] \bytes_sent$next ;
  reg [5:0] descriptor_data_base_address = 6'h00;
  reg [5:0] \descriptor_data_base_address$next ;
  reg [15:0] descriptor_length = 16'h0000;
  reg [15:0] \descriptor_length$next ;
  output first;
  reg first;
  reg [1:0] fsm_state = 2'h0;
  reg [1:0] \fsm_state$next ;
  wire [7:0] index;
  output last;
  reg last;
  input [15:0] length;
  reg [15:0] \length$2 ;
  output [7:0] payload;
  reg [7:0] payload;
  reg [5:0] position_in_stream = 6'h00;
  reg [5:0] \position_in_stream$next ;
  input ready;
  reg [5:0] rom_r_addr;
  wire [31:0] rom_r_data;
  wire rom_r_en;
  output stall;
  reg stall;
  input start;
  input [10:0] start_position;
  wire [7:0] type_number;
  input usb_clk;
  input usb_rst;
  output valid;
  reg valid;
  input [15:0] value;
  reg [31:0] rom [43:0];
  initial begin
    rom[0] = 32'd0;
    rom[1] = 32'd65552;
    rom[2] = 32'd65556;
    rom[3] = 32'd196632;
    rom[4] = 32'd1179684;
    rom[5] = 32'd4128824;
    rom[6] = 32'd262264;
    rom[7] = 32'd524412;
    rom[8] = 32'd2752644;
    rom[9] = 32'd302055426;
    rom[10] = 32'd64;
    rom[11] = 32'd152236378;
    rom[12] = 32'd258;
    rom[13] = 32'd65536;
    rom[14] = 32'd151142144;
    rom[15] = 32'd33620096;
    rom[16] = 32'd4194894848;
    rom[17] = 32'd66050;
    rom[18] = 32'd16778532;
    rom[19] = 32'd1048837;
    rom[20] = 32'd604372993;
    rom[21] = 32'd86245632;
    rom[22] = 32'd17237379;
    rom[23] = 32'd54525963;
    rom[24] = 32'd151257344;
    rom[25] = 32'd34209792;
    rom[26] = 32'd460164;
    rom[27] = 32'd37748991;
    rom[28] = 32'd117769218;
    rom[29] = 32'd1073807104;
    rom[30] = 32'd67307780;
    rom[31] = 32'd134432512;
    rom[32] = 32'd1929397248;
    rom[33] = 32'd704856576;
    rom[34] = 32'd1962963968;
    rom[35] = 32'd1946182912;
    rom[36] = 32'd1912623872;
    rom[37] = 32'd1946183936;
    rom[38] = 32'd1660971776;
    rom[39] = 32'd536900096;
    rom[40] = 32'd822095360;
    rom[41] = 32'd805314560;
    rom[42] = 32'd1090536192;
    rom[43] = 32'd1291845632;
  end
  reg [31:0] _0_;
  always @(posedge usb_clk) begin
    _0_ <= rom[rom_r_addr];
  end
  assign rom_r_data = _0_;
  assign \$99  = index >= rom_r_data[31:16];
  assign \$102  = descriptor_length - 1'h1;
  assign \$104  = position_in_stream == \$102 ;
  assign \$106  = bytes_sent + 1'h1;
  assign \$108  = \$106  >= \length$2 ;
  assign \$110  = \$104  | \$108 ;
  assign \$101  = ~ \$110 ;
  assign \$114  = descriptor_length - 1'h1;
  assign \$116  = position_in_stream == \$114 ;
  assign \$118  = bytes_sent + 1'h1;
  assign \$11  = descriptor_length - 1'h1;
  assign \$120  = \$118  >= \length$2 ;
  assign \$122  = \$116  | \$120 ;
  assign \$113  = ~ \$122 ;
  assign \$126  = 2'h3 - position_in_stream[1:0];
  assign \$128  = \$126  * 4'h8;
  assign \$125  = rom_r_data >> \$128 ;
  assign \$131  = position_in_stream == start_position;
  assign \$133  = descriptor_length - 1'h1;
  assign \$135  = position_in_stream == \$133 ;
  assign \$137  = bytes_sent + 1'h1;
  assign \$13  = position_in_stream == \$11 ;
  assign \$139  = \$137  >= \length$2 ;
  assign \$141  = \$135  | \$139 ;
  assign \$15  = bytes_sent + 1'h1;
  assign \$17  = \$15  >= \length$2 ;
  assign \$19  = \$13  | \$17 ;
  assign \$10  = ~ \$19 ;
  assign \$23  = bytes_sent + 1'h1;
  assign \$25  = index >= rom_r_data[31:16];
  assign \$28  = rom_r_data[7:2] + index;
  assign \$31  = rom_r_data + position_in_stream;
  assign \$38  = descriptor_data_base_address + \$36 ;
  assign \$3  = length - start_position;
  assign \$41  = descriptor_length - 1'h1;
  assign \$43  = position_in_stream == \$41 ;
  assign \$45  = bytes_sent + 1'h1;
  assign \$47  = \$45  >= \length$2 ;
  assign \$49  = \$43  | \$47 ;
  assign \$40  = ~ \$49 ;
  assign \$54  = position_in_stream + 1'h1;
  assign \$56  = descriptor_data_base_address + \$53 [5:2];
  assign \$5  = \$3  <= 7'h40;
  assign \$59  = descriptor_length - 1'h1;
  assign \$61  = position_in_stream == \$59 ;
  assign \$63  = bytes_sent + 1'h1;
  assign \$65  = \$63  >= \length$2 ;
  assign \$67  = \$61  | \$65 ;
  assign \$58  = ~ \$67 ;
  assign \$71  = position_in_stream + 1'h1;
  assign \$73  = \length$2  > 1'h0;
  assign \$75  = type_number <= 2'h3;
  assign \$77  = \$73  & \$75 ;
  assign \$79  = index >= rom_r_data[31:16];
  assign \$82  = descriptor_length - 1'h1;
  assign \$84  = position_in_stream == \$82 ;
  assign \$86  = bytes_sent + 1'h1;
  assign \$88  = \$86  >= \length$2 ;
  assign \$8  = length - start_position;
  assign \$90  = \$84  | \$88 ;
  assign \$81  = ~ \$90 ;
  assign \$93  = \length$2  > 1'h0;
  assign \$95  = type_number <= 2'h3;
  assign \$97  = \$93  & \$95 ;
  always @(posedge usb_clk)
    descriptor_length <= \descriptor_length$next ;
  always @(posedge usb_clk)
    descriptor_data_base_address <= \descriptor_data_base_address$next ;
  always @(posedge usb_clk)
    fsm_state <= \fsm_state$next ;
  always @(posedge usb_clk)
    position_in_stream <= \position_in_stream$next ;
  always @(posedge usb_clk)
    bytes_sent <= \bytes_sent$next ;
  always @* begin
    if (\initial ) begin end
    valid = 1'h0;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          /* empty */;
      2'h3:
          valid = 1'h1;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    payload = 8'h00;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          /* empty */;
      2'h3:
          payload = \$125 ;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    first = 1'h0;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          /* empty */;
      2'h3:
          first = \$131 ;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    last = 1'h0;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          /* empty */;
      2'h3:
          last = \$141 ;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    (* full_case = 32'd1 *)
    casez (\$5 )
      1'h1:
          \length$2  = \$8 [15:0];
      default:
          \length$2  = 16'h0040;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \bytes_sent$next  = bytes_sent;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      2'h0:
          \bytes_sent$next  = 16'h0000;
      2'h1:
          /* empty */;
      2'h2:
          /* empty */;
      2'h3:
          casez (ready)
            1'h1:
                casez (\$10 )
                  1'h1:
                      \bytes_sent$next  = \$23 [15:0];
                endcase
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \bytes_sent$next  = 16'h0000;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    rom_r_addr = 6'h00;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      2'h0:
          rom_r_addr = type_number[5:0];
      2'h1:
          (* full_case = 32'd1 *)
          casez (\$25 )
            1'h1:
                /* empty */;
            default:
                rom_r_addr = \$28 [5:0];
          endcase
      2'h2:
          rom_r_addr = \$33 [5:0];
      2'h3:
        begin
          rom_r_addr = \$38 [5:0];
          casez (ready)
            1'h1:
                casez (\$40 )
                  1'h1:
                      rom_r_addr = \$56 [5:0];
                endcase
          endcase
        end
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \position_in_stream$next  = position_in_stream;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      2'h0:
          casez (start)
            1'h1:
                \position_in_stream$next  = start_position[5:0];
          endcase
      2'h1:
          /* empty */;
      2'h2:
          /* empty */;
      2'h3:
          casez (ready)
            1'h1:
                casez (\$58 )
                  1'h1:
                      \position_in_stream$next  = \$71 [5:0];
                endcase
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \position_in_stream$next  = 6'h00;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \fsm_state$next  = fsm_state;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      2'h0:
          casez (start)
            1'h1:
                casez (\$77 )
                  1'h1:
                      \fsm_state$next  = 2'h1;
                endcase
          endcase
      2'h1:
          (* full_case = 32'd1 *)
          casez (\$79 )
            1'h1:
                \fsm_state$next  = 2'h0;
            default:
                \fsm_state$next  = 2'h2;
          endcase
      2'h2:
          \fsm_state$next  = 2'h3;
      2'h3:
          casez (ready)
            1'h1:
                (* full_case = 32'd1 *)
                casez (\$81 )
                  1'h1:
                      /* empty */;
                  default:
                      \fsm_state$next  = 2'h0;
                endcase
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \fsm_state$next  = 2'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    stall = 1'h0;
    casez (fsm_state)
      2'h0:
          casez (start)
            1'h1:
                (* full_case = 32'd1 *)
                casez (\$97 )
                  1'h1:
                      /* empty */;
                  default:
                      stall = 1'h1;
                endcase
          endcase
      2'h1:
          casez (\$99 )
            1'h1:
                stall = 1'h1;
          endcase
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \descriptor_data_base_address$next  = descriptor_data_base_address;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          \descriptor_data_base_address$next  = rom_r_data[7:2];
      2'h3:
          casez (ready)
            1'h1:
                (* full_case = 32'd1 *)
                casez (\$101 )
                  1'h1:
                      /* empty */;
                  default:
                      \descriptor_data_base_address$next  = 6'h00;
                endcase
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \descriptor_data_base_address$next  = 6'h00;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \descriptor_length$next  = descriptor_length;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          \descriptor_length$next  = rom_r_data[31:16];
      2'h3:
          casez (ready)
            1'h1:
                (* full_case = 32'd1 *)
                casez (\$113 )
                  1'h1:
                      /* empty */;
                  default:
                      \descriptor_length$next  = 16'h0000;
                endcase
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \descriptor_length$next  = 16'h0000;
    endcase
  end
  assign \$7  = \$8 ;
  assign \$22  = \$23 ;
  assign \$27  = \$28 ;
  assign \$30  = \$33 ;
  assign \$35  = \$38 ;
  assign \$53  = \$54 ;
  assign \$52  = \$56 ;
  assign \$70  = \$71 ;
  assign rom_r_en = 1'h1;
  assign type_number = value[15:8];
  assign index = value[7:0];
  assign \$33  = { 2'h0, \$31 [32:2] };
  assign \$36  = { 2'h0, position_in_stream[5:2] };
endmodule

module handshake_detector(usb_clk, rx_data, rx_valid, ack, nak, stall, nyet, rx_active, usb_rst);
  reg \initial  = 0;
  wire \$1 ;
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire [3:0] \$19 ;
  wire \$21 ;
  wire \$23 ;
  wire \$25 ;
  wire \$27 ;
  wire [3:0] \$29 ;
  wire \$3 ;
  wire \$31 ;
  wire \$5 ;
  wire \$7 ;
  wire \$9 ;
  output ack;
  reg ack = 1'h0;
  reg \ack$next ;
  reg [3:0] active_pid = 4'h0;
  reg [3:0] \active_pid$next ;
  reg [1:0] fsm_state = 2'h0;
  reg [1:0] \fsm_state$next ;
  output nak;
  reg nak = 1'h0;
  reg \nak$next ;
  output nyet;
  reg nyet = 1'h0;
  reg \nyet$next ;
  input rx_active;
  input [7:0] rx_data;
  input rx_valid;
  output stall;
  reg stall = 1'h0;
  reg \stall$next ;
  input usb_clk;
  input usb_rst;
  assign \$9  = ~ rx_active;
  assign \$11  = active_pid == 4'he;
  assign \$13  = ~ rx_active;
  assign \$15  = active_pid == 3'h6;
  assign \$17  = ~ rx_active;
  assign \$1  = ~ rx_active;
  assign \$19  = ~ rx_data[7:4];
  assign \$21  = rx_data[3:0] == \$19 ;
  assign \$23  = ~ rx_active;
  assign \$25  = ~ rx_active;
  assign \$27  = ~ rx_active;
  assign \$29  = ~ rx_data[7:4];
  assign \$31  = rx_data[3:0] == \$29 ;
  assign \$3  = active_pid == 2'h2;
  assign \$5  = ~ rx_active;
  assign \$7  = active_pid == 4'ha;
  always @(posedge usb_clk)
    nak <= \nak$next ;
  always @(posedge usb_clk)
    ack <= \ack$next ;
  always @(posedge usb_clk)
    active_pid <= \active_pid$next ;
  always @(posedge usb_clk)
    fsm_state <= \fsm_state$next ;
  always @(posedge usb_clk)
    nyet <= \nyet$next ;
  always @(posedge usb_clk)
    stall <= \stall$next ;
  always @* begin
    if (\initial ) begin end
    \ack$next  = 1'h0;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          casez ({ rx_valid, \$1  })
            2'b?1:
                \ack$next  = \$3 ;
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \ack$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \nak$next  = 1'h0;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          casez ({ rx_valid, \$5  })
            2'b?1:
                \nak$next  = \$7 ;
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \nak$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \stall$next  = 1'h0;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          casez ({ rx_valid, \$9  })
            2'b?1:
                \stall$next  = \$11 ;
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \stall$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \nyet$next  = 1'h0;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          casez ({ rx_valid, \$13  })
            2'b?1:
                \nyet$next  = \$15 ;
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \nyet$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \fsm_state$next  = fsm_state;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      2'h0:
          casez (rx_active)
            1'h1:
                \fsm_state$next  = 2'h1;
          endcase
      2'h1:
          casez ({ rx_valid, \$17  })
            2'b?1:
                \fsm_state$next  = 2'h0;
            2'b1?:
                (* full_case = 32'd1 *)
                casez (\$21 )
                  1'h1:
                      \fsm_state$next  = 2'h2;
                  default:
                      \fsm_state$next  = 2'h3;
                endcase
          endcase
      2'h2:
          casez ({ rx_valid, \$23  })
            2'b?1:
                \fsm_state$next  = 2'h0;
            2'b1?:
                \fsm_state$next  = 2'h3;
          endcase
      2'h3:
          casez (\$25 )
            1'h1:
                \fsm_state$next  = 2'h0;
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \fsm_state$next  = 2'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \active_pid$next  = active_pid;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          casez ({ rx_valid, \$27  })
            2'b?1:
                /* empty */;
            2'b1?:
                casez (\$31 )
                  1'h1:
                      \active_pid$next  = rx_data[3:0];
                endcase
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \active_pid$next  = 4'h0;
    endcase
  end
endmodule

module handshake_generator(usb_clk, issue_ack, issue_nak, issue_stall, valid, data, ready, usb_rst);
  reg \initial  = 0;
  output [7:0] data;
  reg [7:0] data = 8'h00;
  reg [7:0] \data$next ;
  reg fsm_state = 1'h0;
  reg \fsm_state$next ;
  input issue_ack;
  input issue_nak;
  input issue_stall;
  input ready;
  input usb_clk;
  input usb_rst;
  output valid;
  reg valid;
  always @(posedge usb_clk)
    fsm_state <= \fsm_state$next ;
  always @(posedge usb_clk)
    data <= \data$next ;
  always @* begin
    if (\initial ) begin end
    (* full_case = 32'd1 *)
    casez (fsm_state)
      1'h0:
          valid = 1'h0;
      1'h1:
          valid = 1'h1;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \data$next  = data;
    casez (fsm_state)
      1'h0:
        begin
          casez (issue_ack)
            1'h1:
                \data$next  = 8'hd2;
          endcase
          casez (issue_nak)
            1'h1:
                \data$next  = 8'h5a;
          endcase
          casez (issue_stall)
            1'h1:
                \data$next  = 8'h1e;
          endcase
        end
    endcase
    casez (usb_rst)
      1'h1:
          \data$next  = 8'h00;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \fsm_state$next  = fsm_state;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      1'h0:
        begin
          casez (issue_ack)
            1'h1:
                \fsm_state$next  = 1'h1;
          endcase
          casez (issue_nak)
            1'h1:
                \fsm_state$next  = 1'h1;
          endcase
          casez (issue_stall)
            1'h1:
                \fsm_state$next  = 1'h1;
          endcase
        end
      1'h1:
          casez (ready)
            1'h1:
                \fsm_state$next  = 1'h0;
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \fsm_state$next  = 1'h0;
    endcase
  end
endmodule

module receiver(usb_clk, rx_data, rx_valid, valid, next, payload, packet_complete, crc_mismatch, ready_for_response, active_pid, rx_active, start, crc, \start$1 , tx_allowed, usb_rst);
  reg \initial  = 0;
  wire \$10 ;
  wire [3:0] \$12 ;
  wire \$14 ;
  wire \$16 ;
  wire \$18 ;
  wire \$2 ;
  wire \$20 ;
  wire \$22 ;
  wire \$24 ;
  wire \$26 ;
  wire \$28 ;
  wire \$30 ;
  wire [3:0] \$32 ;
  wire \$34 ;
  wire \$36 ;
  wire \$38 ;
  wire \$4 ;
  wire \$40 ;
  wire \$42 ;
  wire \$44 ;
  wire \$46 ;
  wire \$48 ;
  wire \$50 ;
  wire \$52 ;
  wire \$6 ;
  wire \$8 ;
  output [3:0] active_pid;
  reg [3:0] active_pid = 4'h0;
  reg [3:0] \active_pid$next ;
  input [15:0] crc;
  output crc_mismatch;
  reg crc_mismatch = 1'h0;
  reg \crc_mismatch$next ;
  reg [15:0] data_pipeline = 16'h0000;
  reg [15:0] \data_pipeline$next ;
  reg [2:0] fsm_state = 3'h0;
  reg [2:0] \fsm_state$next ;
  reg [15:0] last_byte_crc = 16'h0000;
  reg [15:0] \last_byte_crc$next ;
  reg [15:0] last_word_crc = 16'h0000;
  reg [15:0] \last_word_crc$next ;
  output next;
  reg next;
  output packet_complete;
  reg packet_complete = 1'h0;
  reg \packet_complete$next ;
  reg [3:0] packet_id = 4'h0;
  reg [3:0] \packet_id$next ;
  output [7:0] payload;
  reg [7:0] payload;
  output ready_for_response;
  reg ready_for_response;
  input rx_active;
  input [7:0] rx_data;
  input rx_valid;
  output start;
  reg start;
  output \start$1 ;
  reg \start$1 ;
  input tx_allowed;
  input usb_clk;
  input usb_rst;
  output valid;
  reg valid;
  assign \$10  = ~ rx_active;
  assign \$12  = ~ rx_data[7:4];
  assign \$14  = rx_data[3:0] == \$12 ;
  assign \$16  = rx_data[1:0] == 2'h3;
  assign \$18  = \$14  & \$16 ;
  assign \$20  = ~ rx_active;
  assign \$22  = ~ rx_active;
  assign \$24  = ~ rx_active;
  assign \$26  = last_word_crc == data_pipeline;
  assign \$28  = ~ rx_active;
  assign \$2  = ~ rx_active;
  assign \$30  = ~ rx_active;
  assign \$32  = ~ rx_data[7:4];
  assign \$34  = rx_data[3:0] == \$32 ;
  assign \$36  = rx_data[1:0] == 2'h3;
  assign \$38  = \$34  & \$36 ;
  assign \$40  = ~ rx_active;
  assign \$42  = ~ rx_active;
  assign \$44  = ~ rx_active;
  assign \$46  = ~ rx_active;
  assign \$48  = last_word_crc == data_pipeline;
  assign \$4  = last_word_crc == data_pipeline;
  assign \$50  = ~ rx_active;
  assign \$52  = last_word_crc == data_pipeline;
  assign \$6  = ~ rx_active;
  assign \$8  = last_word_crc == data_pipeline;
  always @(posedge usb_clk)
    packet_id <= \packet_id$next ;
  always @(posedge usb_clk)
    last_word_crc <= \last_word_crc$next ;
  always @(posedge usb_clk)
    last_byte_crc <= \last_byte_crc$next ;
  always @(posedge usb_clk)
    data_pipeline <= \data_pipeline$next ;
  always @(posedge usb_clk)
    active_pid <= \active_pid$next ;
  always @(posedge usb_clk)
    fsm_state <= \fsm_state$next ;
  always @(posedge usb_clk)
    crc_mismatch <= \crc_mismatch$next ;
  always @(posedge usb_clk)
    packet_complete <= \packet_complete$next ;
  always @* begin
    if (\initial ) begin end
    \packet_complete$next  = 1'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          casez (\$2 )
            1'h1:
                casez (\$4 )
                  1'h1:
                      \packet_complete$next  = 1'h1;
                endcase
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \packet_complete$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \crc_mismatch$next  = 1'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          casez (\$6 )
            1'h1:
                (* full_case = 32'd1 *)
                casez (\$8 )
                  1'h1:
                      /* empty */;
                  default:
                      \crc_mismatch$next  = 1'h1;
                endcase
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \crc_mismatch$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    payload = 8'h00;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          casez (rx_valid)
            1'h1:
                payload = data_pipeline[7:0];
          endcase
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \packet_id$next  = packet_id;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          casez (\$46 )
            1'h1:
                casez (\$48 )
                  1'h1:
                      \packet_id$next  = active_pid;
                endcase
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \packet_id$next  = 4'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \start$1  = 1'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          casez (\$50 )
            1'h1:
                casez (\$52 )
                  1'h1:
                      \start$1  = 1'h1;
                endcase
          endcase
    endcase
  end
  always @* begin
    if (\initial ) begin end
    ready_for_response = 1'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          /* empty */;
      3'h6:
          casez (tx_allowed)
            1'h1:
                ready_for_response = 1'h1;
          endcase
    endcase
  end
  always @* begin
    if (\initial ) begin end
    next = 1'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          casez (rx_valid)
            1'h1:
                next = 1'h1;
          endcase
    endcase
  end
  always @* begin
    if (\initial ) begin end
    start = 1'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          start = 1'h1;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \fsm_state$next  = fsm_state;
    casez (fsm_state)
      3'h0:
          casez (rx_active)
            1'h1:
                \fsm_state$next  = 3'h1;
          endcase
      3'h1:
          casez ({ rx_valid, \$10  })
            2'b?1:
                \fsm_state$next  = 3'h0;
            2'b1?:
                (* full_case = 32'd1 *)
                casez (\$18 )
                  1'h1:
                      \fsm_state$next  = 3'h2;
                  default:
                      \fsm_state$next  = 3'h3;
                endcase
          endcase
      3'h2:
        begin
          casez (rx_valid)
            1'h1:
                \fsm_state$next  = 3'h4;
          endcase
          casez (\$20 )
            1'h1:
                \fsm_state$next  = 3'h0;
          endcase
        end
      3'h4:
          casez ({ \$22 , rx_valid })
            2'b?1:
                \fsm_state$next  = 3'h5;
            2'b1?:
                \fsm_state$next  = 3'h0;
          endcase
      3'h5:
          casez (\$24 )
            1'h1:
                (* full_case = 32'd1 *)
                casez (\$26 )
                  1'h1:
                      \fsm_state$next  = 3'h6;
                  default:
                      \fsm_state$next  = 3'h0;
                endcase
          endcase
      3'h6:
          casez (tx_allowed)
            1'h1:
                \fsm_state$next  = 3'h0;
          endcase
      3'h3:
          casez (\$28 )
            1'h1:
                \fsm_state$next  = 3'h0;
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \fsm_state$next  = 3'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \active_pid$next  = active_pid;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          casez ({ rx_valid, \$30  })
            2'b?1:
                /* empty */;
            2'b1?:
                casez (\$38 )
                  1'h1:
                      \active_pid$next  = rx_data[3:0];
                endcase
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \active_pid$next  = 4'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \data_pipeline$next  = data_pipeline;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          casez (rx_valid)
            1'h1:
                \data_pipeline$next [15:8] = rx_data;
          endcase
      3'h4:
          casez ({ \$40 , rx_valid })
            2'b?1:
              begin
                \data_pipeline$next [15:8] = rx_data;
                \data_pipeline$next [7:0] = data_pipeline[15:8];
              end
          endcase
      3'h5:
          casez (rx_valid)
            1'h1:
              begin
                \data_pipeline$next [15:8] = rx_data;
                \data_pipeline$next [7:0] = data_pipeline[15:8];
              end
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \data_pipeline$next  = 16'h0000;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \last_byte_crc$next  = last_byte_crc;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          casez (rx_valid)
            1'h1:
                \last_byte_crc$next  = crc;
          endcase
      3'h4:
          casez ({ \$42 , rx_valid })
            2'b?1:
                \last_byte_crc$next  = crc;
          endcase
      3'h5:
          casez (rx_valid)
            1'h1:
                \last_byte_crc$next  = crc;
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \last_byte_crc$next  = 16'h0000;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \last_word_crc$next  = last_word_crc;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h4:
          casez ({ \$44 , rx_valid })
            2'b?1:
                \last_word_crc$next  = last_byte_crc;
          endcase
      3'h5:
          casez (rx_valid)
            1'h1:
                \last_word_crc$next  = last_byte_crc;
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \last_word_crc$next  = 16'h0000;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    valid = 1'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          valid = 1'h1;
    endcase
  end
endmodule

module register_window(usb_clk, busy, ulpi_data_in, ulpi_dir, ulpi_next, ulpi_data_out, ulpi_stop, done, address, write_data, read_request, write_request, usb_rst);
  reg \initial  = 0;
  wire \$1 ;
  wire [7:0] \$11 ;
  wire \$13 ;
  wire [7:0] \$15 ;
  wire \$17 ;
  wire \$19 ;
  wire \$3 ;
  wire \$5 ;
  wire \$6 ;
  wire \$9 ;
  input [5:0] address;
  output busy;
  reg [5:0] current_address = 6'h00;
  reg [5:0] \current_address$next ;
  reg [7:0] current_write = 8'h00;
  reg [7:0] \current_write$next ;
  output done;
  reg done = 1'h0;
  reg \done$next ;
  reg [2:0] fsm_state = 3'h0;
  reg [2:0] \fsm_state$next ;
  reg [7:0] read_data = 8'h00;
  reg [7:0] \read_data$next ;
  input read_request;
  input [7:0] ulpi_data_in;
  output [7:0] ulpi_data_out;
  reg [7:0] ulpi_data_out = 8'h00;
  reg [7:0] \ulpi_data_out$next ;
  input ulpi_dir;
  input ulpi_next;
  reg ulpi_out_req = 1'h0;
  reg \ulpi_out_req$next ;
  output ulpi_stop;
  reg ulpi_stop = 1'h0;
  reg \ulpi_stop$next ;
  input usb_clk;
  input usb_rst;
  input [7:0] write_data;
  input write_request;
  assign \$9  = ~ ulpi_dir;
  assign \$11  = 8'hc0 | address;
  assign \$13  = ~ ulpi_dir;
  assign \$15  = 8'h80 | address;
  assign \$17  = ~ ulpi_dir;
  assign \$1  = ~ ulpi_dir;
  assign \$19  = ~ ulpi_dir;
  assign \$3  = ~ ulpi_dir;
  assign \$6  = ! fsm_state;
  assign \$5  = ~ \$6 ;
  always @(posedge usb_clk)
    read_data <= \read_data$next ;
  always @(posedge usb_clk)
    fsm_state <= \fsm_state$next ;
  always @(posedge usb_clk)
    current_write <= \current_write$next ;
  always @(posedge usb_clk)
    current_address <= \current_address$next ;
  always @(posedge usb_clk)
    ulpi_data_out <= \ulpi_data_out$next ;
  always @(posedge usb_clk)
    done <= \done$next ;
  always @(posedge usb_clk)
    ulpi_stop <= \ulpi_stop$next ;
  always @(posedge usb_clk)
    ulpi_out_req <= \ulpi_out_req$next ;
  always @* begin
    if (\initial ) begin end
    \ulpi_out_req$next  = 1'h0;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          casez (\$1 )
            1'h1:
                \ulpi_out_req$next  = 1'h1;
          endcase
      3'h3:
        begin
          \ulpi_out_req$next  = 1'h1;
          casez ({ ulpi_next, ulpi_dir })
            2'b?1:
                \ulpi_out_req$next  = 1'h0;
            2'b1?:
                \ulpi_out_req$next  = 1'h0;
          endcase
        end
      3'h4:
          /* empty */;
      3'h5:
          /* empty */;
      3'h2:
          casez (\$3 )
            1'h1:
                \ulpi_out_req$next  = 1'h1;
          endcase
      3'h6:
        begin
          \ulpi_out_req$next  = 1'h1;
          casez ({ ulpi_next, ulpi_dir })
            2'b?1:
                \ulpi_out_req$next  = 1'h0;
          endcase
        end
      3'h7:
        begin
          \ulpi_out_req$next  = 1'h1;
          casez ({ ulpi_next, ulpi_dir })
            2'b?1:
                \ulpi_out_req$next  = 1'h0;
            2'b1?:
                \ulpi_out_req$next  = 1'h0;
          endcase
        end
    endcase
    casez (usb_rst)
      1'h1:
          \ulpi_out_req$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \ulpi_stop$next  = 1'h0;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          /* empty */;
      3'h2:
          /* empty */;
      3'h6:
          /* empty */;
      3'h7:
          casez ({ ulpi_next, ulpi_dir })
            2'b?1:
                /* empty */;
            2'b1?:
                \ulpi_stop$next  = 1'h1;
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \ulpi_stop$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \done$next  = 1'h0;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          \done$next  = 1'h1;
      3'h2:
          /* empty */;
      3'h6:
          /* empty */;
      3'h7:
          casez ({ ulpi_next, ulpi_dir })
            2'b?1:
                /* empty */;
            2'b1?:
                \done$next  = 1'h1;
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \done$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \ulpi_data_out$next  = ulpi_data_out;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      3'h0:
          \ulpi_data_out$next  = 8'h00;
      3'h1:
          casez (\$9 )
            1'h1:
                \ulpi_data_out$next  = \$11 ;
          endcase
      3'h3:
          casez ({ ulpi_next, ulpi_dir })
            2'b?1:
                /* empty */;
            2'b1?:
                \ulpi_data_out$next  = 8'h00;
          endcase
      3'h4:
          /* empty */;
      3'h5:
          /* empty */;
      3'h2:
          casez (\$13 )
            1'h1:
                \ulpi_data_out$next  = \$15 ;
          endcase
      3'h6:
          casez ({ ulpi_next, ulpi_dir })
            2'b?1:
                /* empty */;
            2'b1?:
                \ulpi_data_out$next  = write_data;
          endcase
      3'h7:
          casez ({ ulpi_next, ulpi_dir })
            2'b?1:
                /* empty */;
            2'b1?:
                \ulpi_data_out$next  = 8'h00;
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \ulpi_data_out$next  = 8'h00;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \current_address$next  = current_address;
    casez (fsm_state)
      3'h0:
          \current_address$next  = address;
    endcase
    casez (usb_rst)
      1'h1:
          \current_address$next  = 6'h00;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \current_write$next  = current_write;
    casez (fsm_state)
      3'h0:
          \current_write$next  = write_data;
    endcase
    casez (usb_rst)
      1'h1:
          \current_write$next  = 8'h00;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \fsm_state$next  = fsm_state;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      3'h0:
        begin
          casez (read_request)
            1'h1:
                \fsm_state$next  = 3'h1;
          endcase
          casez (write_request)
            1'h1:
                \fsm_state$next  = 3'h2;
          endcase
        end
      3'h1:
          casez (\$17 )
            1'h1:
                \fsm_state$next  = 3'h3;
          endcase
      3'h3:
          casez ({ ulpi_next, ulpi_dir })
            2'b?1:
                \fsm_state$next  = 3'h1;
            2'b1?:
                \fsm_state$next  = 3'h4;
          endcase
      3'h4:
          \fsm_state$next  = 3'h5;
      3'h5:
          \fsm_state$next  = 3'h0;
      3'h2:
          casez (\$19 )
            1'h1:
                \fsm_state$next  = 3'h6;
          endcase
      3'h6:
          casez ({ ulpi_next, ulpi_dir })
            2'b?1:
                \fsm_state$next  = 3'h2;
            2'b1?:
                \fsm_state$next  = 3'h7;
          endcase
      3'h7:
          casez ({ ulpi_next, ulpi_dir })
            2'b?1:
                \fsm_state$next  = 3'h2;
            2'b1?:
                \fsm_state$next  = 3'h0;
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \fsm_state$next  = 3'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \read_data$next  = read_data;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          \read_data$next  = ulpi_data_in;
    endcase
    casez (usb_rst)
      1'h1:
          \read_data$next  = 8'h00;
    endcase
  end
  assign busy = \$5 ;
endmodule

module request_mux(\type , is_in_request, request, value, index, length, received, pid, address, endpoint, new_token, ready_for_response, frame, new_frame, is_in, is_out, is_setup, is_ping, valid, first, last, payload, ready, ack, nak, stall, \ack$1 , \nak$2 , \stall$3 , nyet, address_changed, new_address, active_config, config_changed, new_config, tx_data_pid, data_requested, \valid$4 , next, \payload$5 , rx_ready_for_response, status_requested, \type$6 , \request$7 , \value$8 , \length$9 , \received$10 , \data_requested$11 , \status_requested$12 , \ack$13 , \active_config$14 , \type$15 , \request$16 , \data_requested$17 , \status_requested$18 , \rx_ready_for_response$19 , \type$20 , \data_requested$21 , \status_requested$22 , \address_changed$23 , \new_address$24 , \config_changed$25 , \new_config$26 , \valid$27 , \tx_data_pid$28 , \valid$29 , \ack$30 , \ack$31 , \stall$32 , \stall$33 , \stall$34 , \payload$35 , \first$36 , \last$37 , \last$38 , \ready$39 , recipient);
  reg \initial  = 0;
  wire \$124 ;
  wire \$127 ;
  wire \$131 ;
  wire \$134 ;
  wire \$136 ;
  wire \$138 ;
  output ack;
  input \ack$1 ;
  wire \ack$105 ;
  wire \ack$126 ;
  output \ack$13 ;
  input \ack$30 ;
  input \ack$31 ;
  wire \ack$79 ;
  input [7:0] active_config;
  wire [7:0] \active_config$109 ;
  output [7:0] \active_config$14 ;
  wire [7:0] \active_config$83 ;
  input [6:0] address;
  wire [6:0] \address$45 ;
  wire [6:0] \address$69 ;
  wire [6:0] \address$95 ;
  output address_changed;
  reg address_changed;
  wire \address_changed$114 ;
  wire \address_changed$115 ;
  input \address_changed$23 ;
  output config_changed;
  reg config_changed;
  wire \config_changed$118 ;
  wire \config_changed$119 ;
  input \config_changed$25 ;
  input data_requested;
  output \data_requested$11 ;
  output \data_requested$17 ;
  output \data_requested$21 ;
  input [3:0] endpoint;
  wire [3:0] \endpoint$46 ;
  wire [3:0] \endpoint$70 ;
  wire [3:0] \endpoint$96 ;
  output first;
  input \first$36 ;
  input [10:0] frame;
  wire [10:0] \frame$49 ;
  wire [10:0] \frame$73 ;
  wire [10:0] \frame$99 ;
  input [15:0] index;
  wire [15:0] \index$43 ;
  wire [15:0] \index$65 ;
  wire [15:0] \index$91 ;
  input is_in;
  wire \is_in$101 ;
  wire \is_in$51 ;
  wire \is_in$75 ;
  input is_in_request;
  wire \is_in_request$42 ;
  wire \is_in_request$63 ;
  wire \is_in_request$88 ;
  input is_out;
  wire \is_out$102 ;
  wire \is_out$52 ;
  wire \is_out$76 ;
  input is_ping;
  wire \is_ping$104 ;
  wire \is_ping$54 ;
  wire \is_ping$78 ;
  input is_setup;
  wire \is_setup$103 ;
  wire \is_setup$53 ;
  wire \is_setup$77 ;
  output last;
  input \last$37 ;
  input \last$38 ;
  input [15:0] length;
  wire [15:0] \length$66 ;
  output [15:0] \length$9 ;
  wire [15:0] \length$92 ;
  output nak;
  wire \nak$106 ;
  wire \nak$129 ;
  wire \nak$130 ;
  wire \nak$133 ;
  input \nak$2 ;
  wire \nak$55 ;
  wire \nak$80 ;
  output [6:0] new_address;
  reg [6:0] new_address;
  wire [6:0] \new_address$116 ;
  wire [6:0] \new_address$117 ;
  input [6:0] \new_address$24 ;
  output [7:0] new_config;
  reg [7:0] new_config;
  wire [7:0] \new_config$120 ;
  wire [7:0] \new_config$121 ;
  input [7:0] \new_config$26 ;
  input new_frame;
  wire \new_frame$100 ;
  wire \new_frame$50 ;
  wire \new_frame$74 ;
  input new_token;
  wire \new_token$47 ;
  wire \new_token$71 ;
  wire \new_token$97 ;
  input next;
  wire \next$111 ;
  wire \next$59 ;
  wire \next$85 ;
  input nyet;
  wire \nyet$108 ;
  wire \nyet$57 ;
  wire \nyet$82 ;
  output [7:0] payload;
  wire [7:0] \payload$112 ;
  input [7:0] \payload$35 ;
  input [7:0] \payload$5 ;
  wire [7:0] \payload$60 ;
  wire [7:0] \payload$86 ;
  input [3:0] pid;
  wire [3:0] \pid$44 ;
  wire [3:0] \pid$68 ;
  wire [3:0] \pid$94 ;
  input ready;
  output \ready$39 ;
  input ready_for_response;
  wire \ready_for_response$48 ;
  wire \ready_for_response$72 ;
  wire \ready_for_response$98 ;
  input received;
  output \received$10 ;
  wire \received$67 ;
  wire \received$93 ;
  input [4:0] recipient;
  wire [4:0] \recipient$41 ;
  wire [4:0] \recipient$62 ;
  wire [4:0] \recipient$87 ;
  input [7:0] request;
  output [7:0] \request$16 ;
  output [7:0] \request$7 ;
  wire [7:0] \request$89 ;
  input rx_ready_for_response;
  wire \rx_ready_for_response$113 ;
  output \rx_ready_for_response$19 ;
  wire \rx_ready_for_response$61 ;
  output stall;
  wire \stall$107 ;
  input \stall$3 ;
  input \stall$32 ;
  input \stall$33 ;
  input \stall$34 ;
  wire \stall$56 ;
  wire \stall$81 ;
  input status_requested;
  output \status_requested$12 ;
  output \status_requested$18 ;
  output \status_requested$22 ;
  output tx_data_pid;
  reg tx_data_pid;
  wire \tx_data_pid$122 ;
  wire \tx_data_pid$123 ;
  input \tx_data_pid$28 ;
  wire tx_mux_first;
  wire tx_mux_last;
  wire [7:0] tx_mux_payload;
  wire tx_mux_ready;
  wire tx_mux_valid;
  wire \tx_mux_valid$40 ;
  input [1:0] \type ;
  output [1:0] \type$15 ;
  output [1:0] \type$20 ;
  output [1:0] \type$6 ;
  output valid;
  wire \valid$110 ;
  input \valid$27 ;
  input \valid$29 ;
  input \valid$4 ;
  wire \valid$58 ;
  wire \valid$84 ;
  input [15:0] value;
  wire [15:0] \value$64 ;
  output [15:0] \value$8 ;
  wire [15:0] \value$90 ;
  assign \$124  = \ack$30  | \ack$31 ;
  assign \$136  = \stall$32  | \stall$33 ;
  assign \$138  = \$136  | \stall$34 ;
  \tx_mux$2  tx_mux (
    .first(tx_mux_first),
    .\first$5 (\first$36 ),
    .last(tx_mux_last),
    .\last$6 (\last$37 ),
    .\last$7 (\last$38 ),
    .payload(tx_mux_payload),
    .\payload$4 (\payload$35 ),
    .ready(tx_mux_ready),
    .\ready$8 (\ready$39 ),
    .valid(tx_mux_valid),
    .\valid$1 (\valid$27 ),
    .\valid$2 (\valid$29 ),
    .\valid$3 (1'h0)
  );
  always @* begin
    if (\initial ) begin end
    address_changed = 1'h0;
    casez ({ \address_changed$115 , \address_changed$114 , \address_changed$23  })
      3'b??1:
          address_changed = \address_changed$23 ;
      3'b?1?:
          address_changed = 1'h0;
      3'b1??:
          address_changed = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    new_address = 7'h00;
    casez ({ \address_changed$115 , \address_changed$114 , \address_changed$23  })
      3'b??1:
          new_address = \new_address$24 ;
      3'b?1?:
          new_address = 7'h00;
      3'b1??:
          new_address = 7'h00;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    config_changed = 1'h0;
    casez ({ \config_changed$119 , \config_changed$118 , \config_changed$25  })
      3'b??1:
          config_changed = \config_changed$25 ;
      3'b?1?:
          config_changed = 1'h0;
      3'b1??:
          config_changed = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    new_config = 8'h00;
    casez ({ \config_changed$119 , \config_changed$118 , \config_changed$25  })
      3'b??1:
          new_config = \new_config$26 ;
      3'b?1?:
          new_config = 8'h00;
      3'b1??:
          new_config = 8'h00;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    tx_data_pid = 1'h1;
    casez (\valid$27 )
      1'h1:
          tx_data_pid = \tx_data_pid$28 ;
    endcase
    casez (\valid$29 )
      1'h1:
          tx_data_pid = 1'h1;
    endcase
    casez (\tx_mux_valid$40 )
      1'h1:
          tx_data_pid = 1'h1;
    endcase
  end
  assign \tx_mux_valid$40  = 1'h0;
  assign \address_changed$114  = 1'h0;
  assign \address_changed$115  = 1'h0;
  assign \new_address$116  = 7'h00;
  assign \new_address$117  = 7'h00;
  assign \config_changed$118  = 1'h0;
  assign \config_changed$119  = 1'h0;
  assign \new_config$120  = 8'h00;
  assign \new_config$121  = 8'h00;
  assign \tx_data_pid$122  = 1'h1;
  assign \tx_data_pid$123  = 1'h1;
  assign \ack$126  = 1'h0;
  assign \nak$129  = 1'h0;
  assign \nak$130  = 1'h0;
  assign \nak$133  = 1'h0;
  assign stall = \$138 ;
  assign nak = \$134 ;
  assign ack = \$127 ;
  assign tx_mux_ready = ready;
  assign payload = tx_mux_payload;
  assign last = tx_mux_last;
  assign first = tx_mux_first;
  assign valid = tx_mux_valid;
  assign \rx_ready_for_response$113  = rx_ready_for_response;
  assign \payload$112  = \payload$5 ;
  assign \next$111  = next;
  assign \valid$110  = \valid$4 ;
  assign \active_config$109  = active_config;
  assign \nyet$108  = nyet;
  assign \stall$107  = \stall$3 ;
  assign \nak$106  = \nak$2 ;
  assign \ack$105  = \ack$1 ;
  assign \status_requested$22  = status_requested;
  assign \data_requested$21  = data_requested;
  assign \is_ping$104  = is_ping;
  assign \is_setup$103  = is_setup;
  assign \is_out$102  = is_out;
  assign \is_in$101  = is_in;
  assign \new_frame$100  = new_frame;
  assign \frame$99  = frame;
  assign \ready_for_response$98  = ready_for_response;
  assign \new_token$97  = new_token;
  assign \endpoint$96  = endpoint;
  assign \address$95  = address;
  assign \pid$94  = pid;
  assign \received$93  = received;
  assign \length$92  = length;
  assign \index$91  = index;
  assign \value$90  = value;
  assign \request$89  = request;
  assign \is_in_request$88  = is_in_request;
  assign \type$20  = \type ;
  assign \recipient$87  = recipient;
  assign \rx_ready_for_response$19  = rx_ready_for_response;
  assign \payload$86  = \payload$5 ;
  assign \next$85  = next;
  assign \valid$84  = \valid$4 ;
  assign \active_config$83  = active_config;
  assign \nyet$82  = nyet;
  assign \stall$81  = \stall$3 ;
  assign \nak$80  = \nak$2 ;
  assign \ack$79  = \ack$1 ;
  assign \status_requested$18  = status_requested;
  assign \data_requested$17  = data_requested;
  assign \is_ping$78  = is_ping;
  assign \is_setup$77  = is_setup;
  assign \is_out$76  = is_out;
  assign \is_in$75  = is_in;
  assign \new_frame$74  = new_frame;
  assign \frame$73  = frame;
  assign \ready_for_response$72  = ready_for_response;
  assign \new_token$71  = new_token;
  assign \endpoint$70  = endpoint;
  assign \address$69  = address;
  assign \pid$68  = pid;
  assign \received$67  = received;
  assign \length$66  = length;
  assign \index$65  = index;
  assign \value$64  = value;
  assign \request$16  = request;
  assign \is_in_request$63  = is_in_request;
  assign \type$15  = \type ;
  assign \recipient$62  = recipient;
  assign \rx_ready_for_response$61  = rx_ready_for_response;
  assign \payload$60  = \payload$5 ;
  assign \next$59  = next;
  assign \valid$58  = \valid$4 ;
  assign \active_config$14  = active_config;
  assign \nyet$57  = nyet;
  assign \stall$56  = \stall$3 ;
  assign \nak$55  = \nak$2 ;
  assign \ack$13  = \ack$1 ;
  assign \status_requested$12  = status_requested;
  assign \data_requested$11  = data_requested;
  assign \is_ping$54  = is_ping;
  assign \is_setup$53  = is_setup;
  assign \is_out$52  = is_out;
  assign \is_in$51  = is_in;
  assign \new_frame$50  = new_frame;
  assign \frame$49  = frame;
  assign \ready_for_response$48  = ready_for_response;
  assign \new_token$47  = new_token;
  assign \endpoint$46  = endpoint;
  assign \address$45  = address;
  assign \pid$44  = pid;
  assign \received$10  = received;
  assign \length$9  = length;
  assign \index$43  = index;
  assign \value$8  = value;
  assign \request$7  = request;
  assign \is_in_request$42  = is_in_request;
  assign \type$6  = \type ;
  assign \recipient$41  = recipient;
  assign \$127  = \$124 ;
  assign \$131  = 1'h0;
  assign \$134  = 1'h0;
endmodule

module reset_sequencer(usb_clk, bus_busy, vbus_connected, line_state, bus_reset, low_speed_only, full_speed_only, operating_mode, current_speed, termination_select, suspended, valid, data, usb_rst);
  reg \initial  = 0;
  wire [18:0] \$1 ;
  wire \$10 ;
  wire \$101 ;
  wire \$103 ;
  wire \$105 ;
  wire \$107 ;
  wire \$109 ;
  wire \$111 ;
  wire \$113 ;
  wire \$115 ;
  wire \$117 ;
  wire \$119 ;
  wire \$12 ;
  wire \$121 ;
  wire \$123 ;
  wire \$125 ;
  wire \$127 ;
  wire \$129 ;
  wire \$131 ;
  wire \$133 ;
  wire \$135 ;
  wire \$137 ;
  wire \$139 ;
  wire \$14 ;
  wire \$141 ;
  wire \$143 ;
  wire \$145 ;
  wire \$147 ;
  wire \$149 ;
  wire \$151 ;
  wire \$153 ;
  wire \$155 ;
  wire \$157 ;
  wire \$159 ;
  wire \$16 ;
  wire \$161 ;
  wire \$163 ;
  wire \$165 ;
  wire \$167 ;
  wire [2:0] \$169 ;
  wire [2:0] \$170 ;
  wire \$18 ;
  wire [18:0] \$2 ;
  wire \$20 ;
  wire \$22 ;
  wire \$24 ;
  wire \$26 ;
  wire \$28 ;
  wire \$30 ;
  wire \$32 ;
  wire \$34 ;
  wire [18:0] \$36 ;
  wire [18:0] \$37 ;
  wire \$39 ;
  wire \$4 ;
  wire \$41 ;
  wire \$43 ;
  wire \$45 ;
  wire \$47 ;
  wire \$49 ;
  wire \$51 ;
  wire \$53 ;
  wire \$55 ;
  wire \$57 ;
  wire \$59 ;
  wire \$6 ;
  wire \$61 ;
  wire \$63 ;
  wire \$65 ;
  wire \$67 ;
  wire \$69 ;
  wire \$71 ;
  wire \$73 ;
  wire \$75 ;
  wire \$77 ;
  wire \$79 ;
  wire \$8 ;
  wire \$81 ;
  wire \$83 ;
  wire \$85 ;
  wire \$87 ;
  wire \$89 ;
  wire \$91 ;
  wire \$93 ;
  wire \$95 ;
  wire \$97 ;
  wire \$99 ;
  input bus_busy;
  reg bus_idle;
  output bus_reset;
  reg bus_reset;
  output [1:0] current_speed;
  reg [1:0] current_speed = 2'h1;
  reg [1:0] \current_speed$next ;
  output [7:0] data;
  reg [7:0] data;
  reg [3:0] fsm_state = 4'h0;
  reg [3:0] \fsm_state$next ;
  input full_speed_only;
  input [1:0] line_state;
  reg [17:0] line_state_time = 18'h00000;
  reg [17:0] \line_state_time$next ;
  input low_speed_only;
  output [1:0] operating_mode;
  reg [1:0] operating_mode = 2'h0;
  reg [1:0] \operating_mode$next ;
  output suspended;
  reg suspended;
  output termination_select;
  reg termination_select = 1'h1;
  reg \termination_select$next ;
  reg [17:0] timer = 18'h00000;
  reg [17:0] \timer$next ;
  input usb_clk;
  input usb_rst;
  output valid;
  reg valid;
  reg [1:0] valid_pairs = 2'h0;
  reg [1:0] \valid_pairs$next ;
  input vbus_connected;
  reg was_hs_pre_suspend = 1'h0;
  reg \was_hs_pre_suspend$next ;
  assign \$99  = line_state == 2'h2;
  assign \$101  = line_state_time == 8'h96;
  assign \$103  = line_state != 2'h2;
  assign \$105  = timer == 18'h249f0;
  assign \$107  = timer == 18'h249f0;
  assign \$10  = timer == 18'h2bf20;
  assign \$109  = line_state == 1'h1;
  assign \$111  = line_state_time == 8'h96;
  assign \$113  = valid_pairs == 2'h2;
  assign \$115  = line_state != 1'h1;
  assign \$117  = timer == 18'h249f0;
  assign \$119  = | line_state;
  assign \$121  = timer == 14'h2ee0;
  assign \$123  = line_state == 1'h1;
  assign \$125  = line_state == 1'h1;
  assign \$127  = low_speed_only & \$125 ;
  assign \$12  = timer == 17'h1d4c0;
  assign \$129  = ~ low_speed_only;
  assign \$131  = line_state == 2'h2;
  assign \$133  = \$129  & \$131 ;
  assign \$135  = \$127  | \$133 ;
  assign \$137  = timer == 8'h96;
  assign \$139  = low_speed_only | full_speed_only;
  assign \$141  = ~ vbus_connected;
  assign \$143  = timer == 9'h12c;
  assign \$145  = ~ vbus_connected;
  assign \$147  = timer == 14'h2ee0;
  assign \$14  = | line_state;
  assign \$149  = line_state == 1'h1;
  assign \$151  = timer == 8'h96;
  assign \$153  = line_state_time == 18'h2bf20;
  assign \$155  = timer == 14'h2ee0;
  assign \$157  = line_state == 1'h1;
  assign \$159  = timer == 18'h2bf20;
  assign \$161  = timer == 18'h2bf20;
  assign \$163  = timer == 17'h1d4c0;
  assign \$165  = line_state_time == 8'h96;
  assign \$167  = valid_pairs == 2'h2;
  assign \$16  = timer == 14'h2ee0;
  assign \$170  = valid_pairs + 1'h1;
  assign \$18  = line_state == 1'h1;
  assign \$20  = low_speed_only & \$18 ;
  assign \$22  = ~ low_speed_only;
  assign \$24  = line_state == 2'h2;
  assign \$26  = \$22  & \$24 ;
  assign \$28  = \$20  | \$26 ;
  assign \$2  = timer + 1'h1;
  assign \$30  = | line_state;
  assign \$32  = timer == 8'h96;
  assign \$34  = low_speed_only | full_speed_only;
  assign \$37  = line_state_time + 1'h1;
  assign \$39  = ~ bus_idle;
  assign \$41  = line_state == 2'h2;
  assign \$43  = line_state == 1'h1;
  assign \$45  = | line_state;
  assign \$47  = line_state == 1'h1;
  assign \$4  = | line_state;
  assign \$49  = low_speed_only & \$47 ;
  assign \$51  = ~ low_speed_only;
  assign \$53  = line_state == 2'h2;
  assign \$55  = \$51  & \$53 ;
  assign \$57  = \$49  | \$55 ;
  assign \$59  = timer == 8'h96;
  assign \$61  = low_speed_only | full_speed_only;
  assign \$63  = ! current_speed;
  assign \$65  = current_speed == 1'h1;
  assign \$67  = ! line_state;
  assign \$6  = ~ vbus_connected;
  assign \$69  = line_state == 1'h1;
  assign \$71  = line_state == 2'h2;
  assign \$73  = timer == 18'h2bf20;
  assign \$75  = timer == 9'h12c;
  assign \$77  = ~ low_speed_only;
  assign \$79  = ~ full_speed_only;
  assign \$81  = \$77  & \$79 ;
  assign \$83  = line_state_time == 18'h2bf20;
  assign \$85  = ~ vbus_connected;
  assign \$87  = timer == 18'h2bf20;
  assign \$8  = | line_state;
  assign \$89  = full_speed_only | low_speed_only;
  assign \$91  = ~ bus_busy;
  assign \$93  = ~ bus_busy;
  assign \$95  = timer == 17'h1d4c0;
  assign \$97  = timer == 18'h249f0;
  always @(posedge usb_clk)
    valid_pairs <= \valid_pairs$next ;
  always @(posedge usb_clk)
    termination_select <= \termination_select$next ;
  always @(posedge usb_clk)
    operating_mode <= \operating_mode$next ;
  always @(posedge usb_clk)
    was_hs_pre_suspend <= \was_hs_pre_suspend$next ;
  always @(posedge usb_clk)
    fsm_state <= \fsm_state$next ;
  always @(posedge usb_clk)
    current_speed <= \current_speed$next ;
  always @(posedge usb_clk)
    line_state_time <= \line_state_time$next ;
  always @(posedge usb_clk)
    timer <= \timer$next ;
  always @* begin
    if (\initial ) begin end
    \timer$next  = \$2 [17:0];
    casez (fsm_state)
      4'h0:
          \timer$next  = 18'h00000;
      4'h1:
        begin
          casez (\$4 )
            1'h1:
                \timer$next  = 18'h00000;
          endcase
          casez (\$6 )
            1'h1:
                \timer$next  = 18'h00000;
          endcase
        end
      4'h4:
        begin
          casez (\$8 )
            1'h1:
                \timer$next  = 18'h00000;
          endcase
          casez (\$10 )
            1'h1:
                \timer$next  = 18'h00000;
          endcase
        end
      4'h2:
          \timer$next  = 18'h00000;
      4'h7:
          /* empty */;
      4'h8:
          /* empty */;
      4'h9:
          casez (\$12 )
            1'h1:
                \timer$next  = 18'h00000;
          endcase
      4'ha:
          /* empty */;
      4'hb:
          /* empty */;
      4'hc:
          /* empty */;
      4'hd:
          /* empty */;
      4'he:
          \timer$next  = 18'h00000;
      4'h5:
          casez (\$14 )
            1'h1:
                \timer$next  = 18'h00000;
          endcase
      4'h6:
          casez (\$16 )
            1'h1:
                \timer$next  = 18'h00000;
          endcase
      4'h3:
        begin
          casez (\$28 )
            1'h1:
              begin
                \timer$next  = 18'h00000;
                (* full_case = 32'd1 *)
                casez (was_hs_pre_suspend)
                  1'h1:
                      /* empty */;
                  default:
                      \timer$next  = 18'h00000;
                endcase
              end
          endcase
          casez (\$30 )
            1'h1:
                \timer$next  = 18'h00000;
          endcase
          casez (\$32 )
            1'h1:
              begin
                \timer$next  = 18'h00000;
                casez (\$34 )
                  1'h1:
                      \timer$next  = 18'h00000;
                endcase
              end
          endcase
        end
    endcase
    casez (usb_rst)
      1'h1:
          \timer$next  = 18'h00000;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \line_state_time$next  = \$37 [17:0];
    casez (fsm_state)
      4'h0:
          \line_state_time$next  = 18'h00000;
      4'h1:
          casez (\$39 )
            1'h1:
                \line_state_time$next  = 18'h00000;
          endcase
      4'h4:
          /* empty */;
      4'h2:
          /* empty */;
      4'h7:
          /* empty */;
      4'h8:
          /* empty */;
      4'h9:
          /* empty */;
      4'ha:
          casez (\$41 )
            1'h1:
                \line_state_time$next  = 18'h00000;
          endcase
      4'hb:
          /* empty */;
      4'hc:
          casez (\$43 )
            1'h1:
                \line_state_time$next  = 18'h00000;
          endcase
      4'hd:
          /* empty */;
      4'he:
          \line_state_time$next  = 18'h00000;
      4'h5:
          casez (\$45 )
            1'h1:
                \line_state_time$next  = 18'h00000;
          endcase
      4'h6:
          /* empty */;
      4'h3:
        begin
          casez (\$57 )
            1'h1:
                (* full_case = 32'd1 *)
                casez (was_hs_pre_suspend)
                  1'h1:
                      /* empty */;
                  default:
                      \line_state_time$next  = 18'h00000;
                endcase
          endcase
          casez (\$59 )
            1'h1:
                casez (\$61 )
                  1'h1:
                      \line_state_time$next  = 18'h00000;
                endcase
          endcase
        end
    endcase
    casez (usb_rst)
      1'h1:
          \line_state_time$next  = 18'h00000;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    data = 8'h00;
    casez (fsm_state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h4:
          /* empty */;
      4'h2:
          /* empty */;
      4'h7:
          /* empty */;
      4'h8:
          /* empty */;
      4'h9:
          data = 8'h00;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \valid_pairs$next  = valid_pairs;
    casez (fsm_state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h4:
          /* empty */;
      4'h2:
          /* empty */;
      4'h7:
          /* empty */;
      4'h8:
          /* empty */;
      4'h9:
          casez (\$163 )
            1'h1:
                \valid_pairs$next  = 2'h0;
          endcase
      4'ha:
          /* empty */;
      4'hb:
          /* empty */;
      4'hc:
          /* empty */;
      4'hd:
          casez (\$165 )
            1'h1:
                (* full_case = 32'd1 *)
                casez (\$167 )
                  1'h1:
                      /* empty */;
                  default:
                      \valid_pairs$next  = \$170 [1:0];
                endcase
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \valid_pairs$next  = 2'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    suspended = 1'h0;
    casez (fsm_state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h4:
          /* empty */;
      4'h2:
          /* empty */;
      4'h7:
          /* empty */;
      4'h8:
          /* empty */;
      4'h9:
          /* empty */;
      4'ha:
          /* empty */;
      4'hb:
          /* empty */;
      4'hc:
          /* empty */;
      4'hd:
          /* empty */;
      4'he:
          /* empty */;
      4'h5:
          /* empty */;
      4'h6:
          /* empty */;
      4'h3:
          suspended = 1'h1;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    (* full_case = 32'd1 *)
    casez ({ \$65 , \$63  })
      2'b?1:
          bus_idle = \$67 ;
      2'b1?:
          bus_idle = \$69 ;
      default:
          bus_idle = \$71 ;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \current_speed$next  = current_speed;
    casez (fsm_state)
      4'h0:
          casez (low_speed_only)
            1'h1:
                \current_speed$next  = 2'h2;
          endcase
      4'h1:
          /* empty */;
      4'h4:
          casez (\$73 )
            1'h1:
                \current_speed$next  = 2'h1;
          endcase
      4'h2:
          \current_speed$next  = 2'h0;
      4'h7:
          /* empty */;
      4'h8:
          /* empty */;
      4'h9:
          /* empty */;
      4'ha:
          /* empty */;
      4'hb:
          /* empty */;
      4'hc:
          /* empty */;
      4'hd:
          /* empty */;
      4'he:
          \current_speed$next  = 2'h0;
      4'h5:
          (* full_case = 32'd1 *)
          casez (low_speed_only)
            1'h1:
                \current_speed$next  = 2'h2;
            default:
                \current_speed$next  = 2'h1;
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \current_speed$next  = 2'h1;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \fsm_state$next  = fsm_state;
    casez (fsm_state)
      4'h0:
          \fsm_state$next  = 4'h1;
      4'h1:
        begin
          casez (\$75 )
            1'h1:
                casez (\$81 )
                  1'h1:
                      \fsm_state$next  = 4'h2;
                endcase
          endcase
          casez (\$83 )
            1'h1:
                \fsm_state$next  = 4'h3;
          endcase
        end
      4'h4:
        begin
          casez (\$85 )
            1'h1:
                \fsm_state$next  = 4'h5;
          endcase
          casez (\$87 )
            1'h1:
                \fsm_state$next  = 4'h6;
          endcase
          casez (\$89 )
            1'h1:
                \fsm_state$next  = 4'h5;
          endcase
        end
      4'h2:
          \fsm_state$next  = 4'h7;
      4'h7:
          casez (\$91 )
            1'h1:
                \fsm_state$next  = 4'h8;
          endcase
      4'h8:
          casez (\$93 )
            1'h1:
                \fsm_state$next  = 4'h9;
          endcase
      4'h9:
          casez (\$95 )
            1'h1:
                \fsm_state$next  = 4'ha;
          endcase
      4'ha:
        begin
          casez (\$97 )
            1'h1:
                \fsm_state$next  = 4'h5;
          endcase
          casez (\$99 )
            1'h1:
                \fsm_state$next  = 4'hb;
          endcase
        end
      4'hb:
        begin
          casez (\$101 )
            1'h1:
                \fsm_state$next  = 4'hc;
          endcase
          casez (\$103 )
            1'h1:
                \fsm_state$next  = 4'ha;
          endcase
          casez (\$105 )
            1'h1:
                \fsm_state$next  = 4'h5;
          endcase
        end
      4'hc:
        begin
          casez (\$107 )
            1'h1:
                \fsm_state$next  = 4'h5;
          endcase
          casez (\$109 )
            1'h1:
                \fsm_state$next  = 4'hd;
          endcase
        end
      4'hd:
        begin
          casez (\$111 )
            1'h1:
                (* full_case = 32'd1 *)
                casez (\$113 )
                  1'h1:
                      \fsm_state$next  = 4'he;
                  default:
                      \fsm_state$next  = 4'ha;
                endcase
          endcase
          casez (\$115 )
            1'h1:
                \fsm_state$next  = 4'hc;
          endcase
          casez (\$117 )
            1'h1:
                \fsm_state$next  = 4'h5;
          endcase
        end
      4'he:
          \fsm_state$next  = 4'h4;
      4'h5:
          casez (\$119 )
            1'h1:
                \fsm_state$next  = 4'h1;
          endcase
      4'h6:
          casez (\$121 )
            1'h1:
                (* full_case = 32'd1 *)
                casez (\$123 )
                  1'h1:
                      \fsm_state$next  = 4'h3;
                  default:
                      \fsm_state$next  = 4'h2;
                endcase
          endcase
      4'h3:
        begin
          casez (\$135 )
            1'h1:
                (* full_case = 32'd1 *)
                casez (was_hs_pre_suspend)
                  1'h1:
                      \fsm_state$next  = 4'he;
                  default:
                      \fsm_state$next  = 4'h1;
                endcase
          endcase
          casez (\$137 )
            1'h1:
                (* full_case = 32'd1 *)
                casez (\$139 )
                  1'h1:
                      \fsm_state$next  = 4'h1;
                  default:
                      \fsm_state$next  = 4'h2;
                endcase
          endcase
        end
    endcase
    casez (usb_rst)
      1'h1:
          \fsm_state$next  = 4'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    bus_reset = 1'h0;
    casez (fsm_state)
      4'h0:
          /* empty */;
      4'h1:
        begin
          casez (\$141 )
            1'h1:
                bus_reset = 1'h1;
          endcase
          casez (\$143 )
            1'h1:
                bus_reset = 1'h1;
          endcase
        end
      4'h4:
          casez (\$145 )
            1'h1:
                bus_reset = 1'h1;
          endcase
      4'h2:
          /* empty */;
      4'h7:
          /* empty */;
      4'h8:
          /* empty */;
      4'h9:
          /* empty */;
      4'ha:
          /* empty */;
      4'hb:
          /* empty */;
      4'hc:
          /* empty */;
      4'hd:
          /* empty */;
      4'he:
          /* empty */;
      4'h5:
          /* empty */;
      4'h6:
          casez (\$147 )
            1'h1:
                (* full_case = 32'd1 *)
                casez (\$149 )
                  1'h1:
                      /* empty */;
                  default:
                      bus_reset = 1'h1;
                endcase
          endcase
      4'h3:
          casez (\$151 )
            1'h1:
                bus_reset = 1'h1;
          endcase
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \was_hs_pre_suspend$next  = was_hs_pre_suspend;
    casez (fsm_state)
      4'h0:
          /* empty */;
      4'h1:
          casez (\$153 )
            1'h1:
                \was_hs_pre_suspend$next  = 1'h0;
          endcase
      4'h4:
          /* empty */;
      4'h2:
          /* empty */;
      4'h7:
          /* empty */;
      4'h8:
          /* empty */;
      4'h9:
          /* empty */;
      4'ha:
          /* empty */;
      4'hb:
          /* empty */;
      4'hc:
          /* empty */;
      4'hd:
          /* empty */;
      4'he:
          /* empty */;
      4'h5:
          /* empty */;
      4'h6:
          casez (\$155 )
            1'h1:
                casez (\$157 )
                  1'h1:
                      \was_hs_pre_suspend$next  = 1'h1;
                endcase
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \was_hs_pre_suspend$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \operating_mode$next  = operating_mode;
    casez (fsm_state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h4:
          casez (\$159 )
            1'h1:
                \operating_mode$next  = 2'h0;
          endcase
      4'h2:
          \operating_mode$next  = 2'h2;
      4'h7:
          /* empty */;
      4'h8:
          /* empty */;
      4'h9:
          /* empty */;
      4'ha:
          /* empty */;
      4'hb:
          /* empty */;
      4'hc:
          /* empty */;
      4'hd:
          /* empty */;
      4'he:
          \operating_mode$next  = 2'h0;
      4'h5:
          \operating_mode$next  = 2'h0;
    endcase
    casez (usb_rst)
      1'h1:
          \operating_mode$next  = 2'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \termination_select$next  = termination_select;
    casez (fsm_state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h4:
          casez (\$161 )
            1'h1:
                \termination_select$next  = 1'h1;
          endcase
      4'h2:
          \termination_select$next  = 1'h1;
      4'h7:
          /* empty */;
      4'h8:
          /* empty */;
      4'h9:
          /* empty */;
      4'ha:
          /* empty */;
      4'hb:
          /* empty */;
      4'hc:
          /* empty */;
      4'hd:
          /* empty */;
      4'he:
          \termination_select$next  = 1'h0;
      4'h5:
          \termination_select$next  = 1'h1;
    endcase
    casez (usb_rst)
      1'h1:
          \termination_select$next  = 1'h1;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    valid = 1'h0;
    casez (fsm_state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h4:
          /* empty */;
      4'h2:
          /* empty */;
      4'h7:
          /* empty */;
      4'h8:
          /* empty */;
      4'h9:
          valid = 1'h1;
    endcase
  end
  assign \$1  = \$2 ;
  assign \$36  = \$37 ;
  assign \$169  = \$170 ;
endmodule

module rxevent_decoder(usb_clk, ulpi__dir__i, register_operation_in_progress, last_rx_command, ulpi__nxt__i, ulpi__data__i, line_state, vbus_valid, session_valid, session_end, rx_error, host_disconnect, id_digital, rx_stop, rx_start, usb_rst);
  reg \initial  = 0;
  wire \$1 ;
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire \$19 ;
  wire \$21 ;
  wire \$23 ;
  wire \$25 ;
  wire \$27 ;
  wire \$29 ;
  wire \$3 ;
  wire \$31 ;
  wire \$33 ;
  wire \$35 ;
  wire \$37 ;
  wire \$39 ;
  wire \$41 ;
  wire \$43 ;
  wire \$5 ;
  wire \$7 ;
  wire \$9 ;
  reg direction_delayed = 1'h0;
  reg \direction_delayed$next ;
  output host_disconnect;
  output id_digital;
  output [7:0] last_rx_command;
  reg [7:0] last_rx_command = 8'h00;
  reg [7:0] \last_rx_command$next ;
  output [1:0] line_state;
  wire receiving;
  input register_operation_in_progress;
  wire rx_active;
  output rx_error;
  output rx_start;
  reg rx_start = 1'h0;
  reg \rx_start$next ;
  output rx_stop;
  reg rx_stop = 1'h0;
  reg \rx_stop$next ;
  output session_end;
  output session_valid;
  input [7:0] ulpi__data__i;
  input ulpi__dir__i;
  input ulpi__nxt__i;
  input usb_clk;
  input usb_rst;
  output vbus_valid;
  assign \$9  = \$5  & \$7 ;
  assign \$11  = ~ rx_active;
  assign \$13  = \$11  & ulpi__data__i[4];
  assign \$15  = ~ ulpi__nxt__i;
  assign \$17  = receiving & \$15 ;
  assign \$1  = direction_delayed & ulpi__dir__i;
  assign \$19  = ~ register_operation_in_progress;
  assign \$21  = \$17  & \$19 ;
  assign \$23  = ~ ulpi__data__i[4];
  assign \$25  = rx_active & \$23 ;
  assign \$27  = ~ ulpi__nxt__i;
  assign \$29  = receiving & \$27 ;
  assign \$31  = ~ register_operation_in_progress;
  assign \$33  = \$29  & \$31 ;
  assign \$35  = last_rx_command[3:2] == 2'h3;
  assign \$37  = last_rx_command[3:2] == 2'h2;
  assign \$3  = ~ ulpi__nxt__i;
  assign \$39  = ! last_rx_command[3:2];
  assign \$41  = last_rx_command[5:4] == 2'h3;
  assign \$43  = last_rx_command[5:4] == 2'h2;
  assign \$5  = receiving & \$3 ;
  assign \$7  = ~ register_operation_in_progress;
  always @(posedge usb_clk)
    last_rx_command <= \last_rx_command$next ;
  always @(posedge usb_clk)
    rx_stop <= \rx_stop$next ;
  always @(posedge usb_clk)
    rx_start <= \rx_start$next ;
  always @(posedge usb_clk)
    direction_delayed <= \direction_delayed$next ;
  always @* begin
    if (\initial ) begin end
    \direction_delayed$next  = ulpi__dir__i;
    casez (usb_rst)
      1'h1:
          \direction_delayed$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \rx_start$next  = 1'h0;
    casez (\$9 )
      1'h1:
          casez (\$13 )
            1'h1:
                \rx_start$next  = 1'h1;
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \rx_start$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \rx_stop$next  = 1'h0;
    casez (\$21 )
      1'h1:
          casez (\$25 )
            1'h1:
                \rx_stop$next  = 1'h1;
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \rx_stop$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \last_rx_command$next  = last_rx_command;
    casez (\$33 )
      1'h1:
          \last_rx_command$next  = ulpi__data__i;
    endcase
    casez (usb_rst)
      1'h1:
          \last_rx_command$next  = 8'h00;
    endcase
  end
  assign id_digital = last_rx_command[6];
  assign host_disconnect = \$43 ;
  assign rx_error = \$41 ;
  assign rx_active = last_rx_command[4];
  assign session_end = \$39 ;
  assign session_valid = \$37 ;
  assign vbus_valid = \$35 ;
  assign line_state = last_rx_command[1:0];
  assign receiving = \$1 ;
endmodule

module setup_decoder(usb_clk, rx_data, rx_valid, rx_active, start, crc, pid, new_token, speed, tx_allowed, \start$1 , recipient, \type , is_in_request, request, value, index, length, received, ack, usb_rst);
  reg \initial  = 0;
  wire \$10 ;
  wire \$12 ;
  wire \$14 ;
  wire \$16 ;
  wire \$18 ;
  wire \$2 ;
  wire \$20 ;
  wire \$22 ;
  wire \$24 ;
  wire \$26 ;
  wire \$28 ;
  wire \$4 ;
  wire \$6 ;
  wire \$8 ;
  output ack;
  reg ack;
  input [15:0] crc;
  wire [15:0] data_handler_crc;
  wire [3:0] data_handler_length;
  wire data_handler_new_packet;
  wire [7:0] data_handler_packet_0;
  wire [7:0] data_handler_packet_1;
  wire [7:0] data_handler_packet_2;
  wire [7:0] data_handler_packet_3;
  wire [7:0] data_handler_packet_4;
  wire [7:0] data_handler_packet_5;
  wire [7:0] data_handler_packet_6;
  wire [7:0] data_handler_packet_7;
  wire data_handler_start;
  reg [1:0] fsm_state = 2'h0;
  reg [1:0] \fsm_state$next ;
  output [15:0] index;
  reg [15:0] index = 16'h0000;
  reg [15:0] \index$next ;
  output is_in_request;
  reg is_in_request = 1'h0;
  reg \is_in_request$next ;
  output [15:0] length;
  reg [15:0] length = 16'h0000;
  reg [15:0] \length$next ;
  input new_token;
  input [3:0] pid;
  output received;
  reg received = 1'h0;
  reg \received$next ;
  output [4:0] recipient;
  reg [4:0] recipient = 5'h00;
  reg [4:0] \recipient$next ;
  output [7:0] request;
  reg [7:0] request = 8'h00;
  reg [7:0] \request$next ;
  input rx_active;
  input [7:0] rx_data;
  input rx_valid;
  input [1:0] speed;
  output start;
  output \start$1 ;
  input tx_allowed;
  output [1:0] \type ;
  reg [1:0] \type  = 2'h0;
  reg [1:0] \type$next ;
  input usb_clk;
  input usb_rst;
  output [15:0] value;
  reg [15:0] value = 16'h0000;
  reg [15:0] \value$next ;
  assign \$10  = ! speed;
  assign \$12  = tx_allowed | \$10 ;
  assign \$14  = data_handler_length == 4'h8;
  assign \$16  = data_handler_length == 4'h8;
  assign \$18  = data_handler_length == 4'h8;
  assign \$20  = data_handler_length == 4'h8;
  assign \$22  = data_handler_length == 4'h8;
  assign \$24  = data_handler_length == 4'h8;
  assign \$26  = ! speed;
  assign \$28  = tx_allowed | \$26 ;
  assign \$2  = data_handler_length == 4'h8;
  assign \$4  = pid == 4'hd;
  assign \$6  = \$4  & new_token;
  assign \$8  = data_handler_length == 4'h8;
  always @(posedge usb_clk)
    length <= \length$next ;
  always @(posedge usb_clk)
    index <= \index$next ;
  always @(posedge usb_clk)
    value <= \value$next ;
  always @(posedge usb_clk)
    request <= \request$next ;
  always @(posedge usb_clk)
    recipient <= \recipient$next ;
  always @(posedge usb_clk)
    \type  <= \type$next ;
  always @(posedge usb_clk)
    is_in_request <= \is_in_request$next ;
  always @(posedge usb_clk)
    fsm_state <= \fsm_state$next ;
  always @(posedge usb_clk)
    received <= \received$next ;
  data_handler data_handler (
    .crc(data_handler_crc),
    .length(data_handler_length),
    .new_packet(data_handler_new_packet),
    .packet_0(data_handler_packet_0),
    .packet_1(data_handler_packet_1),
    .packet_2(data_handler_packet_2),
    .packet_3(data_handler_packet_3),
    .packet_4(data_handler_packet_4),
    .packet_5(data_handler_packet_5),
    .packet_6(data_handler_packet_6),
    .packet_7(data_handler_packet_7),
    .rx_active(rx_active),
    .rx_data(rx_data),
    .rx_valid(rx_valid),
    .start(data_handler_start),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst)
  );
  always @* begin
    if (\initial ) begin end
    \index$next  = index;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          casez (data_handler_new_packet)
            1'h1:
                casez (\$20 )
                  1'h1:
                      \index$next  = { data_handler_packet_5, data_handler_packet_4 };
                endcase
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \index$next  = 16'h0000;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \length$next  = length;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          casez (data_handler_new_packet)
            1'h1:
                casez (\$22 )
                  1'h1:
                      \length$next  = { data_handler_packet_7, data_handler_packet_6 };
                endcase
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \length$next  = 16'h0000;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    ack = 1'h0;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          casez (data_handler_new_packet)
            1'h1:
                casez (\$24 )
                  1'h1:
                      casez (\$28 )
                        1'h1:
                            ack = 1'h1;
                      endcase
                endcase
          endcase
      2'h2:
          casez (tx_allowed)
            1'h1:
                ack = 1'h1;
          endcase
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \received$next  = 1'h0;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          casez (data_handler_new_packet)
            1'h1:
                casez (\$2 )
                  1'h1:
                      \received$next  = 1'h1;
                endcase
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \received$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \fsm_state$next  = fsm_state;
    casez (fsm_state)
      2'h0:
          casez (\$6 )
            1'h1:
                \fsm_state$next  = 2'h1;
          endcase
      2'h1:
        begin
          casez (new_token)
            1'h1:
                \fsm_state$next  = 2'h0;
          endcase
          casez (data_handler_new_packet)
            1'h1:
                (* full_case = 32'd1 *)
                casez (\$8 )
                  1'h1:
                      (* full_case = 32'd1 *)
                      casez (\$12 )
                        1'h1:
                            \fsm_state$next  = 2'h0;
                        default:
                            \fsm_state$next  = 2'h2;
                      endcase
                  default:
                      \fsm_state$next  = 2'h0;
                endcase
          endcase
        end
      2'h2:
          casez (tx_allowed)
            1'h1:
                \fsm_state$next  = 2'h0;
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \fsm_state$next  = 2'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \recipient$next  = recipient;
    \type$next  = \type ;
    \is_in_request$next  = is_in_request;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          casez (data_handler_new_packet)
            1'h1:
                casez (\$14 )
                  1'h1:
                      { \is_in_request$next , \type$next , \recipient$next  } = data_handler_packet_0;
                endcase
          endcase
    endcase
    casez (usb_rst)
      1'h1:
        begin
          \recipient$next  = 5'h00;
          \type$next  = 2'h0;
          \is_in_request$next  = 1'h0;
        end
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \request$next  = request;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          casez (data_handler_new_packet)
            1'h1:
                casez (\$16 )
                  1'h1:
                      \request$next  = data_handler_packet_1;
                endcase
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \request$next  = 8'h00;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \value$next  = value;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          casez (data_handler_new_packet)
            1'h1:
                casez (\$18 )
                  1'h1:
                      \value$next  = { data_handler_packet_3, data_handler_packet_2 };
                endcase
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \value$next  = 16'h0000;
    endcase
  end
  assign \start$1  = data_handler_new_packet;
  assign data_handler_crc = crc;
  assign start = data_handler_start;
endmodule

module timer(usb_clk, speed, tx_allowed, start, usb_rst);
  reg \initial  = 0;
  wire \$1 ;
  wire \$10 ;
  wire \$12 ;
  wire \$14 ;
  wire \$16 ;
  wire \$18 ;
  wire \$20 ;
  wire \$22 ;
  wire \$24 ;
  wire \$26 ;
  wire \$28 ;
  wire [10:0] \$3 ;
  wire \$30 ;
  wire \$32 ;
  wire \$34 ;
  wire [10:0] \$4 ;
  wire \$6 ;
  wire \$8 ;
  reg [9:0] counter = 10'h000;
  reg [9:0] \counter$next ;
  wire rx_timeout;
  reg rx_to_tx_at_max;
  reg rx_to_tx_at_min;
  input [1:0] speed;
  input start;
  output tx_allowed;
  wire tx_timeout;
  reg tx_to_rx_timeout;
  input usb_clk;
  input usb_rst;
  assign \$10  = counter == 1'h1;
  assign \$12  = counter == 4'ha;
  assign \$14  = counter == 1'h1;
  assign \$16  = ! speed;
  assign \$18  = speed == 1'h1;
  assign \$1  = counter < 10'h281;
  assign \$20  = counter == 5'h18;
  assign \$22  = counter == 6'h20;
  assign \$24  = counter == 5'h18;
  assign \$26  = ! speed;
  assign \$28  = speed == 1'h1;
  assign \$30  = counter == 7'h5c;
  assign \$32  = counter == 7'h50;
  assign \$34  = counter == 7'h5c;
  assign \$4  = counter + 1'h1;
  assign \$6  = ! speed;
  assign \$8  = speed == 1'h1;
  always @(posedge usb_clk)
    counter <= \counter$next ;
  always @* begin
    if (\initial ) begin end
    \counter$next  = counter;
    casez ({ \$1 , start })
      2'b?1:
          \counter$next  = 10'h000;
      2'b1?:
          \counter$next  = \$4 [9:0];
    endcase
    casez (usb_rst)
      1'h1:
          \counter$next  = 10'h000;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    (* full_case = 32'd1 *)
    casez ({ \$8 , \$6  })
      2'b?1:
          rx_to_tx_at_min = \$10 ;
      2'b1?:
          rx_to_tx_at_min = \$12 ;
      default:
          rx_to_tx_at_min = \$14 ;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    (* full_case = 32'd1 *)
    casez ({ \$18 , \$16  })
      2'b?1:
          rx_to_tx_at_max = \$20 ;
      2'b1?:
          rx_to_tx_at_max = \$22 ;
      default:
          rx_to_tx_at_max = \$24 ;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    (* full_case = 32'd1 *)
    casez ({ \$28 , \$26  })
      2'b?1:
          tx_to_rx_timeout = \$30 ;
      2'b1?:
          tx_to_rx_timeout = \$32 ;
      default:
          tx_to_rx_timeout = \$34 ;
    endcase
  end
  assign \$3  = \$4 ;
  assign rx_timeout = tx_to_rx_timeout;
  assign tx_timeout = rx_to_tx_at_max;
  assign tx_allowed = rx_to_tx_at_min;
endmodule

module \timer$1 (usb_clk, speed, start, tx_allowed, \start$1 , \tx_allowed$2 , tx_timeout, rx_timeout, usb_rst);
  reg \initial  = 0;
  wire \$10 ;
  wire \$12 ;
  wire \$14 ;
  wire \$16 ;
  wire \$18 ;
  wire \$20 ;
  wire \$22 ;
  wire \$24 ;
  wire \$26 ;
  wire \$28 ;
  wire \$3 ;
  wire \$30 ;
  wire \$32 ;
  wire \$34 ;
  wire \$36 ;
  wire \$38 ;
  wire \$5 ;
  wire [10:0] \$7 ;
  wire [10:0] \$8 ;
  reg [9:0] counter = 10'h000;
  reg [9:0] \counter$next ;
  output rx_timeout;
  wire \rx_timeout$41 ;
  reg rx_to_tx_at_max;
  reg rx_to_tx_at_min;
  input [1:0] speed;
  input start;
  input \start$1 ;
  output tx_allowed;
  output \tx_allowed$2 ;
  output tx_timeout;
  wire \tx_timeout$40 ;
  reg tx_to_rx_timeout;
  input usb_clk;
  input usb_rst;
  assign \$10  = ! speed;
  assign \$12  = speed == 1'h1;
  assign \$14  = counter == 1'h1;
  assign \$16  = counter == 4'ha;
  assign \$18  = counter == 1'h1;
  assign \$20  = ! speed;
  assign \$22  = speed == 1'h1;
  assign \$24  = counter == 5'h18;
  assign \$26  = counter == 6'h20;
  assign \$28  = counter == 5'h18;
  assign \$30  = ! speed;
  assign \$32  = speed == 1'h1;
  assign \$34  = counter == 7'h5c;
  assign \$36  = counter == 7'h50;
  assign \$38  = counter == 7'h5c;
  assign \$3  = start | \start$1 ;
  assign \$5  = counter < 10'h281;
  assign \$8  = counter + 1'h1;
  always @(posedge usb_clk)
    counter <= \counter$next ;
  always @* begin
    if (\initial ) begin end
    \counter$next  = counter;
    casez ({ \$5 , \$3  })
      2'b?1:
          \counter$next  = 10'h000;
      2'b1?:
          \counter$next  = \$8 [9:0];
    endcase
    casez (usb_rst)
      1'h1:
          \counter$next  = 10'h000;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    (* full_case = 32'd1 *)
    casez ({ \$12 , \$10  })
      2'b?1:
          rx_to_tx_at_min = \$14 ;
      2'b1?:
          rx_to_tx_at_min = \$16 ;
      default:
          rx_to_tx_at_min = \$18 ;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    (* full_case = 32'd1 *)
    casez ({ \$22 , \$20  })
      2'b?1:
          rx_to_tx_at_max = \$24 ;
      2'b1?:
          rx_to_tx_at_max = \$26 ;
      default:
          rx_to_tx_at_max = \$28 ;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    (* full_case = 32'd1 *)
    casez ({ \$32 , \$30  })
      2'b?1:
          tx_to_rx_timeout = \$34 ;
      2'b1?:
          tx_to_rx_timeout = \$36 ;
      default:
          tx_to_rx_timeout = \$38 ;
    endcase
  end
  assign \$7  = \$8 ;
  assign rx_timeout = tx_to_rx_timeout;
  assign tx_timeout = rx_to_tx_at_max;
  assign \tx_allowed$2  = rx_to_tx_at_min;
  assign \rx_timeout$41  = tx_to_rx_timeout;
  assign \tx_timeout$40  = rx_to_tx_at_max;
  assign tx_allowed = rx_to_tx_at_min;
endmodule

module token_detector(usb_clk, address, rx_data, rx_valid, speed, pid, \address$1 , endpoint, new_token, ready_for_response, frame, new_frame, is_in, is_out, is_setup, is_ping, rx_active, usb_rst);
  reg \initial  = 0;
  wire \$10 ;
  wire \$100 ;
  wire \$102 ;
  wire \$104 ;
  wire \$106 ;
  wire [3:0] \$108 ;
  wire \$110 ;
  wire \$112 ;
  wire \$114 ;
  wire [10:0] \$116 ;
  wire \$118 ;
  wire \$12 ;
  wire \$120 ;
  wire \$122 ;
  wire \$124 ;
  wire \$126 ;
  wire \$128 ;
  wire \$130 ;
  wire \$131 ;
  wire \$133 ;
  wire \$135 ;
  wire \$137 ;
  wire \$139 ;
  wire \$14 ;
  wire \$141 ;
  wire \$144 ;
  wire \$146 ;
  wire \$148 ;
  wire \$150 ;
  wire \$152 ;
  wire \$154 ;
  wire \$156 ;
  wire \$158 ;
  wire \$16 ;
  wire \$160 ;
  wire \$162 ;
  wire \$164 ;
  wire \$166 ;
  wire \$168 ;
  wire \$170 ;
  wire \$172 ;
  wire \$174 ;
  wire \$176 ;
  wire \$178 ;
  wire \$18 ;
  wire \$180 ;
  wire \$182 ;
  wire \$184 ;
  wire \$186 ;
  wire \$188 ;
  wire \$190 ;
  wire \$192 ;
  wire \$194 ;
  wire \$196 ;
  wire \$198 ;
  wire \$2 ;
  wire \$20 ;
  wire \$22 ;
  wire \$24 ;
  wire \$26 ;
  wire [3:0] \$28 ;
  wire \$30 ;
  wire \$32 ;
  wire \$34 ;
  wire \$36 ;
  wire \$38 ;
  wire \$4 ;
  wire \$40 ;
  wire \$42 ;
  wire \$44 ;
  wire \$46 ;
  wire \$48 ;
  wire \$49 ;
  wire \$51 ;
  wire \$53 ;
  wire \$55 ;
  wire \$57 ;
  wire \$59 ;
  wire \$6 ;
  wire \$62 ;
  wire \$64 ;
  wire \$66 ;
  wire \$68 ;
  wire \$70 ;
  wire \$72 ;
  wire \$74 ;
  wire \$76 ;
  wire \$78 ;
  wire \$8 ;
  wire \$80 ;
  wire \$82 ;
  wire \$84 ;
  wire \$86 ;
  wire \$88 ;
  wire \$90 ;
  wire \$92 ;
  wire \$94 ;
  wire \$96 ;
  wire \$98 ;
  input [6:0] address;
  output [6:0] \address$1 ;
  reg [6:0] \address$1  = 7'h00;
  reg [6:0] \address$1$next ;
  reg [3:0] current_pid = 4'h0;
  reg [3:0] \current_pid$next ;
  output [3:0] endpoint;
  reg [3:0] endpoint = 4'h0;
  reg [3:0] \endpoint$next ;
  output [10:0] frame;
  reg [10:0] frame = 11'h000;
  reg [10:0] \frame$next ;
  reg [2:0] fsm_state = 3'h0;
  reg [2:0] \fsm_state$next ;
  output is_in;
  output is_out;
  output is_ping;
  output is_setup;
  output new_frame;
  reg new_frame = 1'h0;
  reg \new_frame$next ;
  output new_token;
  reg new_token = 1'h0;
  reg \new_token$next ;
  output [3:0] pid;
  reg [3:0] pid = 4'h0;
  reg [3:0] \pid$next ;
  output ready_for_response;
  input rx_active;
  input [7:0] rx_data;
  input rx_valid;
  input [1:0] speed;
  wire [1:0] timer_speed;
  reg timer_start;
  wire timer_tx_allowed;
  reg [10:0] token_data = 11'h000;
  reg [10:0] \token_data$next ;
  input usb_clk;
  input usb_rst;
  assign \$100  = ~ rx_active;
  assign \$102  = rx_data[1:0] == 1'h1;
  assign \$104  = rx_data[3:0] == 3'h4;
  assign \$106  = \$102  | \$104 ;
  assign \$108  = ~ rx_data[7:4];
  assign \$10  = ~ rx_active;
  assign \$110  = rx_data[3:0] == \$108 ;
  assign \$112  = \$106  & \$110 ;
  assign \$114  = ~ rx_active;
  assign \$116  = + rx_data;
  assign \$118  = ~ rx_active;
  assign \$120  = token_data[0] ^ token_data[1];
  assign \$122  = \$120  ^ token_data[2];
  assign \$124  = \$122  ^ token_data[5];
  assign \$126  = \$124  ^ token_data[6];
  assign \$128  = \$126  ^ rx_data[0];
  assign \$12  = current_pid == 3'h5;
  assign \$131  = token_data[0] ^ token_data[1];
  assign \$133  = \$131  ^ token_data[2];
  assign \$135  = \$133  ^ token_data[3];
  assign \$137  = \$135  ^ token_data[6];
  assign \$139  = \$137  ^ token_data[7];
  assign \$141  = \$139  ^ rx_data[1];
  assign \$130  = ~ \$141 ;
  assign \$144  = token_data[0] ^ token_data[1];
  assign \$146  = \$144  ^ token_data[2];
  assign \$148  = \$146  ^ token_data[3];
  assign \$14  = ~ rx_active;
  assign \$150  = \$148  ^ token_data[4];
  assign \$152  = \$150  ^ token_data[7];
  assign \$154  = \$152  ^ rx_data[0];
  assign \$156  = \$154  ^ rx_data[2];
  assign \$158  = token_data[0] ^ token_data[3];
  assign \$160  = \$158  ^ token_data[4];
  assign \$162  = \$160  ^ token_data[6];
  assign \$164  = \$162  ^ rx_data[1];
  assign \$166  = token_data[0] ^ token_data[1];
  assign \$168  = \$166  ^ token_data[4];
  assign \$16  = current_pid == 3'h5;
  assign \$170  = \$168  ^ token_data[5];
  assign \$172  = \$170  ^ token_data[7];
  assign \$174  = \$172  ^ rx_data[2];
  assign \$176  = rx_data[7:3] == { \$174 , \$164 , \$156 , \$130 , \$128  };
  assign \$178  = ~ rx_active;
  assign \$180  = current_pid == 3'h5;
  assign \$182  = ~ rx_active;
  assign \$184  = current_pid == 3'h5;
  assign \$186  = token_data[6:0] == address;
  assign \$188  = ~ rx_active;
  assign \$18  = token_data[6:0] == address;
  assign \$190  = current_pid == 3'h5;
  assign \$192  = token_data[6:0] == address;
  assign \$194  = ~ rx_active;
  assign \$196  = current_pid == 3'h5;
  assign \$198  = token_data[6:0] == address;
  assign \$20  = ~ rx_active;
  assign \$22  = rx_data[1:0] == 1'h1;
  assign \$24  = rx_data[3:0] == 3'h4;
  assign \$26  = \$22  | \$24 ;
  assign \$28  = ~ rx_data[7:4];
  assign \$2  = pid == 4'h9;
  assign \$30  = rx_data[3:0] == \$28 ;
  assign \$32  = \$26  & \$30 ;
  assign \$34  = ~ rx_active;
  assign \$36  = ~ rx_active;
  assign \$38  = token_data[0] ^ token_data[1];
  assign \$40  = \$38  ^ token_data[2];
  assign \$42  = \$40  ^ token_data[5];
  assign \$44  = \$42  ^ token_data[6];
  assign \$46  = \$44  ^ rx_data[0];
  assign \$4  = pid == 1'h1;
  assign \$49  = token_data[0] ^ token_data[1];
  assign \$51  = \$49  ^ token_data[2];
  assign \$53  = \$51  ^ token_data[3];
  assign \$55  = \$53  ^ token_data[6];
  assign \$57  = \$55  ^ token_data[7];
  assign \$59  = \$57  ^ rx_data[1];
  assign \$48  = ~ \$59 ;
  assign \$62  = token_data[0] ^ token_data[1];
  assign \$64  = \$62  ^ token_data[2];
  assign \$66  = \$64  ^ token_data[3];
  assign \$68  = \$66  ^ token_data[4];
  assign \$6  = pid == 4'hd;
  assign \$70  = \$68  ^ token_data[7];
  assign \$72  = \$70  ^ rx_data[0];
  assign \$74  = \$72  ^ rx_data[2];
  assign \$76  = token_data[0] ^ token_data[3];
  assign \$78  = \$76  ^ token_data[4];
  assign \$80  = \$78  ^ token_data[6];
  assign \$82  = \$80  ^ rx_data[1];
  assign \$84  = token_data[0] ^ token_data[1];
  assign \$86  = \$84  ^ token_data[4];
  assign \$88  = \$86  ^ token_data[5];
  assign \$8  = pid == 3'h4;
  assign \$90  = \$88  ^ token_data[7];
  assign \$92  = \$90  ^ rx_data[2];
  assign \$94  = rx_data[7:3] == { \$92 , \$82 , \$74 , \$48 , \$46  };
  assign \$96  = ~ rx_active;
  assign \$98  = ~ rx_active;
  always @(posedge usb_clk)
    \address$1  <= \address$1$next ;
  always @(posedge usb_clk)
    endpoint <= \endpoint$next ;
  always @(posedge usb_clk)
    pid <= \pid$next ;
  always @(posedge usb_clk)
    frame <= \frame$next ;
  always @(posedge usb_clk)
    token_data <= \token_data$next ;
  always @(posedge usb_clk)
    current_pid <= \current_pid$next ;
  always @(posedge usb_clk)
    fsm_state <= \fsm_state$next ;
  always @(posedge usb_clk)
    new_token <= \new_token$next ;
  always @(posedge usb_clk)
    new_frame <= \new_frame$next ;
  timer timer (
    .speed(timer_speed),
    .start(timer_start),
    .tx_allowed(timer_tx_allowed),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst)
  );
  always @* begin
    if (\initial ) begin end
    \token_data$next  = token_data;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          casez ({ rx_valid, \$114  })
            2'b?1:
                /* empty */;
            2'b1?:
                \token_data$next  = \$116 ;
          endcase
      3'h4:
          casez ({ rx_valid, \$118  })
            2'b?1:
                /* empty */;
            2'b1?:
                casez (\$176 )
                  1'h1:
                      \token_data$next [10:8] = rx_data[2:0];
                endcase
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \token_data$next  = 11'h000;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \frame$next  = frame;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          casez ({ rx_valid, \$178  })
            2'b?1:
                casez (\$180 )
                  1'h1:
                      \frame$next  = token_data;
                endcase
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \frame$next  = 11'h000;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \pid$next  = pid;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          casez ({ rx_valid, \$182  })
            2'b?1:
                (* full_case = 32'd1 *)
                casez (\$184 )
                  1'h1:
                      /* empty */;
                  default:
                      (* full_case = 32'd1 *)
                      casez (\$186 )
                        1'h1:
                            \pid$next  = current_pid;
                        default:
                            \pid$next  = 4'h0;
                      endcase
                endcase
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \pid$next  = 4'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \address$1$next  = \address$1 ;
    \endpoint$next  = endpoint;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          casez ({ rx_valid, \$188  })
            2'b?1:
                (* full_case = 32'd1 *)
                casez (\$190 )
                  1'h1:
                      /* empty */;
                  default:
                      casez (\$192 )
                        1'h1:
                            { \endpoint$next , \address$1$next  } = token_data;
                      endcase
                endcase
          endcase
    endcase
    casez (usb_rst)
      1'h1:
        begin
          \address$1$next  = 7'h00;
          \endpoint$next  = 4'h0;
        end
    endcase
  end
  always @* begin
    if (\initial ) begin end
    timer_start = 1'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          casez ({ rx_valid, \$194  })
            2'b?1:
                (* full_case = 32'd1 *)
                casez (\$196 )
                  1'h1:
                      /* empty */;
                  default:
                      casez (\$198 )
                        1'h1:
                            timer_start = 1'h1;
                      endcase
                endcase
          endcase
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \new_frame$next  = 1'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          casez ({ rx_valid, \$10  })
            2'b?1:
                casez (\$12 )
                  1'h1:
                      \new_frame$next  = 1'h1;
                endcase
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \new_frame$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \new_token$next  = 1'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          casez ({ rx_valid, \$14  })
            2'b?1:
                (* full_case = 32'd1 *)
                casez (\$16 )
                  1'h1:
                      /* empty */;
                  default:
                      casez (\$18 )
                        1'h1:
                            \new_token$next  = 1'h1;
                      endcase
                endcase
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \new_token$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \fsm_state$next  = fsm_state;
    casez (fsm_state)
      3'h0:
          casez (rx_active)
            1'h1:
                \fsm_state$next  = 3'h1;
          endcase
      3'h1:
          casez ({ rx_valid, \$20  })
            2'b?1:
                \fsm_state$next  = 3'h0;
            2'b1?:
                (* full_case = 32'd1 *)
                casez (\$32 )
                  1'h1:
                      \fsm_state$next  = 3'h2;
                  default:
                      \fsm_state$next  = 3'h3;
                endcase
          endcase
      3'h2:
          casez ({ rx_valid, \$34  })
            2'b?1:
                \fsm_state$next  = 3'h0;
            2'b1?:
                \fsm_state$next  = 3'h4;
          endcase
      3'h4:
          casez ({ rx_valid, \$36  })
            2'b?1:
                \fsm_state$next  = 3'h0;
            2'b1?:
                (* full_case = 32'd1 *)
                casez (\$94 )
                  1'h1:
                      \fsm_state$next  = 3'h5;
                  default:
                      \fsm_state$next  = 3'h3;
                endcase
          endcase
      3'h5:
          casez ({ rx_valid, \$96  })
            2'b?1:
                \fsm_state$next  = 3'h0;
            2'b1?:
                \fsm_state$next  = 3'h3;
          endcase
      3'h3:
          casez (\$98 )
            1'h1:
                \fsm_state$next  = 3'h0;
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \fsm_state$next  = 3'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \current_pid$next  = current_pid;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          casez ({ rx_valid, \$100  })
            2'b?1:
                /* empty */;
            2'b1?:
                casez (\$112 )
                  1'h1:
                      \current_pid$next  = rx_data[3:0];
                endcase
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \current_pid$next  = 4'h0;
    endcase
  end
  assign is_ping = \$8 ;
  assign is_setup = \$6 ;
  assign is_out = \$4 ;
  assign is_in = \$2 ;
  assign ready_for_response = timer_tx_allowed;
  assign timer_speed = speed;
endmodule

module translator(usb_clk, busy, session_end, line_state, rx_data, rx_valid, tx_data, tx_valid, tx_ready, dm_pulldown, dp_pulldown, op_mode, xcvr_select, term_select, ulpi__clk__o, ulpi__rst, ulpi__data__oe, ulpi__dir__i, ulpi__nxt__i, ulpi__data__i, ulpi__data__o, ulpi__stp, rx_active, usb_rst);
  reg \initial  = 0;
  wire \$1 ;
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire \$19 ;
  wire \$21 ;
  wire \$23 ;
  wire \$25 ;
  wire \$27 ;
  wire \$29 ;
  wire \$3 ;
  wire \$5 ;
  wire \$7 ;
  wire \$9 ;
  (* \nmigen.sample_reg  = 32'd1 *)
  reg \$sample$s$ulpi__dir__i$usb$1  = 1'h0;
  wire \$sample$s$ulpi__dir__i$usb$1$next ;
  output busy;
  wire chrg_vbus;
  wire control_translator_bus_idle;
  wire control_translator_busy;
  wire control_translator_chrg_vbus;
  wire control_translator_dischrg_vbus;
  wire control_translator_dm_pulldown;
  wire control_translator_dp_pulldown;
  wire control_translator_id_pullup;
  wire [1:0] control_translator_op_mode;
  wire control_translator_suspend;
  wire control_translator_term_select;
  wire control_translator_use_external_vbus_indicator;
  wire [1:0] control_translator_xcvr_select;
  wire dischrg_vbus;
  input dm_pulldown;
  input dp_pulldown;
  wire host_disconnect;
  wire id_digital;
  wire id_pullup;
  wire [7:0] last_rx_command;
  output [1:0] line_state;
  input [1:0] op_mode;
  wire [5:0] register_window_address;
  wire register_window_busy;
  wire register_window_done;
  wire register_window_read_request;
  wire [7:0] register_window_ulpi_data_in;
  wire [7:0] register_window_ulpi_data_out;
  wire register_window_ulpi_dir;
  wire register_window_ulpi_next;
  wire register_window_ulpi_stop;
  wire [7:0] register_window_write_data;
  wire register_window_write_request;
  output rx_active;
  reg rx_active = 1'h0;
  reg \rx_active$next ;
  output [7:0] rx_data;
  reg [7:0] rx_data = 8'h00;
  reg [7:0] \rx_data$next ;
  wire rx_error;
  output rx_valid;
  reg rx_valid = 1'h0;
  reg \rx_valid$next ;
  wire rxevent_decoder_host_disconnect;
  wire rxevent_decoder_id_digital;
  wire [7:0] rxevent_decoder_last_rx_command;
  wire [1:0] rxevent_decoder_line_state;
  wire rxevent_decoder_register_operation_in_progress;
  wire rxevent_decoder_rx_error;
  wire rxevent_decoder_rx_start;
  wire rxevent_decoder_rx_stop;
  wire rxevent_decoder_session_end;
  wire rxevent_decoder_session_valid;
  wire rxevent_decoder_vbus_valid;
  output session_end;
  wire session_valid;
  wire suspend;
  input term_select;
  wire transmit_translator_bus_idle;
  wire transmit_translator_busy;
  wire [1:0] transmit_translator_op_mode;
  wire [7:0] transmit_translator_tx_data;
  wire transmit_translator_tx_ready;
  wire transmit_translator_tx_valid;
  wire [7:0] transmit_translator_ulpi_data_out;
  wire transmit_translator_ulpi_nxt;
  wire transmit_translator_ulpi_out_req;
  wire transmit_translator_ulpi_stp;
  input [7:0] tx_data;
  output tx_ready;
  input tx_valid;
  output ulpi__clk__o;
  input [7:0] ulpi__data__i;
  output [7:0] ulpi__data__o;
  reg [7:0] ulpi__data__o;
  output ulpi__data__oe;
  input ulpi__dir__i;
  input ulpi__nxt__i;
  output ulpi__rst;
  output ulpi__stp;
  reg ulpi__stp;
  input usb_clk;
  input usb_rst;
  wire use_external_vbus_indicator;
  wire vbus_valid;
  input [1:0] xcvr_select;
  assign \$9  = ~ control_translator_busy;
  assign \$11  = ~ ulpi__dir__i;
  assign \$13  = \$9  & \$11 ;
  assign \$15  = ~ transmit_translator_busy;
  assign \$17  = ~ ulpi__dir__i;
  assign \$1  = ~ ulpi__dir__i;
  assign \$19  = \$17  | rxevent_decoder_rx_stop;
  assign \$21  = ~ \$sample$s$ulpi__dir__i$usb$1 ;
  assign \$23  = \$21  & ulpi__dir__i;
  assign \$25  = \$23  & ulpi__nxt__i;
  assign \$27  = \$25  | rxevent_decoder_rx_start;
  assign \$29  = ulpi__nxt__i & rx_active;
  assign \$3  = register_window_busy | transmit_translator_busy;
  assign \$5  = \$3  | control_translator_busy;
  assign \$7  = \$5  | ulpi__dir__i;
  always @(posedge usb_clk)
    \$sample$s$ulpi__dir__i$usb$1  <= ulpi__dir__i;
  always @(posedge usb_clk)
    rx_valid <= \rx_valid$next ;
  always @(posedge usb_clk)
    rx_data <= \rx_data$next ;
  always @(posedge usb_clk)
    rx_active <= \rx_active$next ;
  control_translator control_translator (
    .address(register_window_address),
    .bus_idle(control_translator_bus_idle),
    .busy(register_window_busy),
    .\busy$1 (control_translator_busy),
    .chrg_vbus(1'h0),
    .dischrg_vbus(1'h0),
    .dm_pulldown(control_translator_dm_pulldown),
    .done(register_window_done),
    .dp_pulldown(control_translator_dp_pulldown),
    .id_pullup(1'h0),
    .op_mode(control_translator_op_mode),
    .read_request(register_window_read_request),
    .suspend(1'h0),
    .term_select(control_translator_term_select),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst),
    .use_external_vbus_indicator(1'h0),
    .write_data(register_window_write_data),
    .write_request(register_window_write_request),
    .xcvr_select(control_translator_xcvr_select)
  );
  register_window register_window (
    .address(register_window_address),
    .busy(register_window_busy),
    .done(register_window_done),
    .read_request(register_window_read_request),
    .ulpi_data_in(register_window_ulpi_data_in),
    .ulpi_data_out(register_window_ulpi_data_out),
    .ulpi_dir(register_window_ulpi_dir),
    .ulpi_next(register_window_ulpi_next),
    .ulpi_stop(register_window_ulpi_stop),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst),
    .write_data(register_window_write_data),
    .write_request(register_window_write_request)
  );
  rxevent_decoder rxevent_decoder (
    .host_disconnect(rxevent_decoder_host_disconnect),
    .id_digital(rxevent_decoder_id_digital),
    .last_rx_command(rxevent_decoder_last_rx_command),
    .line_state(rxevent_decoder_line_state),
    .register_operation_in_progress(rxevent_decoder_register_operation_in_progress),
    .rx_error(rxevent_decoder_rx_error),
    .rx_start(rxevent_decoder_rx_start),
    .rx_stop(rxevent_decoder_rx_stop),
    .session_end(rxevent_decoder_session_end),
    .session_valid(rxevent_decoder_session_valid),
    .ulpi__data__i(ulpi__data__i),
    .ulpi__dir__i(ulpi__dir__i),
    .ulpi__nxt__i(ulpi__nxt__i),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst),
    .vbus_valid(rxevent_decoder_vbus_valid)
  );
  transmit_translator transmit_translator (
    .bus_idle(transmit_translator_bus_idle),
    .busy(transmit_translator_busy),
    .op_mode(transmit_translator_op_mode),
    .tx_data(transmit_translator_tx_data),
    .tx_ready(transmit_translator_tx_ready),
    .tx_valid(transmit_translator_tx_valid),
    .ulpi_data_out(transmit_translator_ulpi_data_out),
    .ulpi_nxt(transmit_translator_ulpi_nxt),
    .ulpi_out_req(transmit_translator_ulpi_out_req),
    .ulpi_stp(transmit_translator_ulpi_stp),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst)
  );
  always @* begin
    if (\initial ) begin end
    (* full_case = 32'd1 *)
    casez (transmit_translator_ulpi_out_req)
      1'h1:
          ulpi__data__o = transmit_translator_ulpi_data_out;
      default:
          ulpi__data__o = register_window_ulpi_data_out;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    (* full_case = 32'd1 *)
    casez (transmit_translator_ulpi_out_req)
      1'h1:
          ulpi__stp = transmit_translator_ulpi_stp;
      default:
          ulpi__stp = register_window_ulpi_stop;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \rx_active$next  = rx_active;
    casez ({ \$27 , \$19  })
      2'b?1:
          \rx_active$next  = 1'h0;
      2'b1?:
          \rx_active$next  = 1'h1;
    endcase
    casez (usb_rst)
      1'h1:
          \rx_active$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \rx_data$next  = ulpi__data__i;
    casez (usb_rst)
      1'h1:
          \rx_data$next  = 8'h00;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \rx_valid$next  = \$29 ;
    casez (usb_rst)
      1'h1:
          \rx_valid$next  = 1'h0;
    endcase
  end
  assign suspend = 1'h0;
  assign id_pullup = 1'h0;
  assign chrg_vbus = 1'h0;
  assign dischrg_vbus = 1'h0;
  assign use_external_vbus_indicator = 1'h0;
  assign \$sample$s$ulpi__dir__i$usb$1$next  = ulpi__dir__i;
  assign control_translator_use_external_vbus_indicator = 1'h0;
  assign control_translator_dischrg_vbus = 1'h0;
  assign control_translator_chrg_vbus = 1'h0;
  assign control_translator_dp_pulldown = dp_pulldown;
  assign control_translator_dm_pulldown = dm_pulldown;
  assign control_translator_id_pullup = 1'h0;
  assign control_translator_suspend = 1'h0;
  assign control_translator_op_mode = op_mode;
  assign control_translator_term_select = term_select;
  assign control_translator_xcvr_select = xcvr_select;
  assign id_digital = rxevent_decoder_id_digital;
  assign host_disconnect = rxevent_decoder_host_disconnect;
  assign rx_error = rxevent_decoder_rx_error;
  assign session_end = rxevent_decoder_session_end;
  assign session_valid = rxevent_decoder_session_valid;
  assign vbus_valid = rxevent_decoder_vbus_valid;
  assign line_state = rxevent_decoder_line_state;
  assign register_window_ulpi_next = ulpi__nxt__i;
  assign register_window_ulpi_dir = ulpi__dir__i;
  assign register_window_ulpi_data_in = ulpi__data__i;
  assign control_translator_bus_idle = \$15 ;
  assign tx_ready = transmit_translator_tx_ready;
  assign transmit_translator_tx_valid = tx_valid;
  assign transmit_translator_tx_data = tx_data;
  assign transmit_translator_bus_idle = \$13 ;
  assign transmit_translator_op_mode = op_mode;
  assign transmit_translator_ulpi_nxt = ulpi__nxt__i;
  assign last_rx_command = rxevent_decoder_last_rx_command;
  assign rxevent_decoder_register_operation_in_progress = register_window_busy;
  assign busy = \$7 ;
  assign ulpi__data__oe = \$1 ;
  assign ulpi__rst = usb_rst;
  assign ulpi__clk__o = usb_clk;
endmodule

module transmit_translator(usb_clk, busy, ulpi_nxt, op_mode, bus_idle, tx_data, tx_valid, tx_ready, ulpi_out_req, ulpi_data_out, ulpi_stp, usb_rst);
  reg \initial  = 0;
  wire \$1 ;
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire [7:0] \$17 ;
  wire [6:0] \$18 ;
  wire \$2 ;
  wire \$21 ;
  wire \$23 ;
  wire \$25 ;
  wire \$27 ;
  wire \$29 ;
  wire \$31 ;
  wire \$5 ;
  wire \$7 ;
  wire \$9 ;
  input bus_idle;
  output busy;
  reg fsm_state = 1'h0;
  reg \fsm_state$next ;
  input [1:0] op_mode;
  input [7:0] tx_data;
  output tx_ready;
  reg tx_ready;
  input tx_valid;
  output [7:0] ulpi_data_out;
  reg [7:0] ulpi_data_out;
  input ulpi_nxt;
  output ulpi_out_req;
  reg ulpi_out_req = 1'h0;
  reg \ulpi_out_req$next ;
  output ulpi_stp;
  reg ulpi_stp;
  input usb_clk;
  input usb_rst;
  assign \$9  = op_mode == 2'h2;
  assign \$11  = ~ tx_valid;
  assign \$13  = tx_valid & bus_idle;
  assign \$15  = op_mode == 2'h2;
  assign \$18  = 7'h40 | tx_data[3:0];
  assign \$17  = + \$18 ;
  assign \$21  = ~ tx_valid;
  assign \$23  = op_mode == 2'h2;
  assign \$25  = tx_valid & bus_idle;
  assign \$27  = op_mode == 2'h2;
  assign \$2  = ~ fsm_state;
  assign \$29  = tx_valid & bus_idle;
  assign \$31  = ~ tx_valid;
  assign \$5  = ~ tx_valid;
  assign \$7  = tx_valid & bus_idle;
  always @(posedge usb_clk)
    fsm_state <= \fsm_state$next ;
  always @(posedge usb_clk)
    ulpi_out_req <= \ulpi_out_req$next ;
  always @* begin
    if (\initial ) begin end
    (* full_case = 32'd1 *)
    casez (fsm_state)
      1'h0:
          ulpi_stp = 1'h0;
      1'h1:
        begin
          ulpi_stp = 1'h0;
          casez (\$5 )
            1'h1:
                ulpi_stp = 1'h1;
          endcase
        end
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \ulpi_out_req$next  = ulpi_out_req;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      1'h0:
          casez (\$7 )
            1'h1:
                (* full_case = 32'd1 *)
                casez (\$9 )
                  1'h1:
                      \ulpi_out_req$next  = 1'h1;
                  default:
                      \ulpi_out_req$next  = 1'h1;
                endcase
          endcase
      1'h1:
          casez (\$11 )
            1'h1:
                \ulpi_out_req$next  = 1'h0;
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \ulpi_out_req$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    ulpi_data_out = 8'h00;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      1'h0:
          casez (\$13 )
            1'h1:
                (* full_case = 32'd1 *)
                casez (\$15 )
                  1'h1:
                      ulpi_data_out = 8'h40;
                  default:
                      ulpi_data_out = \$17 ;
                endcase
          endcase
      1'h1:
        begin
          ulpi_data_out = tx_data;
          casez (\$21 )
            1'h1:
                (* full_case = 32'd1 *)
                casez (\$23 )
                  1'h1:
                      ulpi_data_out = 8'hff;
                  default:
                      ulpi_data_out = 8'h00;
                endcase
          endcase
        end
    endcase
  end
  always @* begin
    if (\initial ) begin end
    tx_ready = 1'h0;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      1'h0:
          casez (\$25 )
            1'h1:
                (* full_case = 32'd1 *)
                casez (\$27 )
                  1'h1:
                      tx_ready = 1'h0;
                  default:
                      tx_ready = ulpi_nxt;
                endcase
          endcase
      1'h1:
          tx_ready = ulpi_nxt;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \fsm_state$next  = fsm_state;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      1'h0:
          casez (\$29 )
            1'h1:
                casez (ulpi_nxt)
                  1'h1:
                      \fsm_state$next  = 1'h1;
                endcase
          endcase
      1'h1:
          casez (\$31 )
            1'h1:
                \fsm_state$next  = 1'h0;
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \fsm_state$next  = 1'h0;
    endcase
  end
  assign busy = \$1 ;
  assign \$1  = fsm_state;
endmodule

module transmitter(usb_clk, valid, first, last, payload, ready, data_pid, start, data, \valid$1 , \ready$2 , crc, usb_rst);
  reg \initial  = 0;
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$3 ;
  wire \$5 ;
  wire \$7 ;
  wire \$9 ;
  input [15:0] crc;
  reg [7:0] current_data_pid = 8'h00;
  reg [7:0] \current_data_pid$next ;
  output [7:0] data;
  reg [7:0] data;
  input [1:0] data_pid;
  input first;
  reg [2:0] fsm_state = 3'h0;
  reg [2:0] \fsm_state$next ;
  reg is_zlp = 1'h0;
  reg \is_zlp$next ;
  input last;
  input [7:0] payload;
  output ready;
  reg ready;
  input \ready$2 ;
  reg [7:0] remaining_crc = 8'h00;
  reg [7:0] \remaining_crc$next ;
  output start;
  reg start;
  input usb_clk;
  input usb_rst;
  input valid;
  output \valid$1 ;
  reg \valid$1 ;
  assign \$9  = last & valid;
  assign \$11  = ~ valid;
  assign \$13  = last | \$11 ;
  assign \$15  = \ready$2  & \$13 ;
  assign \$3  = first & valid;
  assign \$5  = last & valid;
  assign \$7  = first & valid;
  always @(posedge usb_clk)
    remaining_crc <= \remaining_crc$next ;
  always @(posedge usb_clk)
    fsm_state <= \fsm_state$next ;
  always @(posedge usb_clk)
    is_zlp <= \is_zlp$next ;
  always @(posedge usb_clk)
    current_data_pid <= \current_data_pid$next ;
  always @* begin
    if (\initial ) begin end
    ready = 1'h0;
    casez (fsm_state)
      3'h0:
          ready = 1'h0;
      3'h1:
          ready = 1'h0;
      3'h3:
          ready = \ready$2 ;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \current_data_pid$next  = current_data_pid;
    casez (fsm_state)
      3'h0:
          (* full_case = 32'd1 *)
          casez (data_pid)
            2'h0:
                \current_data_pid$next  = 8'hc3;
            2'h1:
                \current_data_pid$next  = 8'h4b;
            2'h2:
                \current_data_pid$next  = 8'h87;
            2'h?:
                \current_data_pid$next  = 8'h0f;
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \current_data_pid$next  = 8'h00;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \is_zlp$next  = is_zlp;
    casez (fsm_state)
      3'h0:
          casez ({ \$5 , \$3  })
            2'b?1:
                \is_zlp$next  = 1'h0;
            2'b1?:
                \is_zlp$next  = 1'h1;
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \is_zlp$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \fsm_state$next  = fsm_state;
    casez (fsm_state)
      3'h0:
          casez ({ \$9 , \$7  })
            2'b?1:
                \fsm_state$next  = 3'h1;
            2'b1?:
                \fsm_state$next  = 3'h1;
          endcase
      3'h1:
          casez (\ready$2 )
            1'h1:
                (* full_case = 32'd1 *)
                casez (is_zlp)
                  1'h1:
                      \fsm_state$next  = 3'h2;
                  default:
                      \fsm_state$next  = 3'h3;
                endcase
          endcase
      3'h3:
          casez (\$15 )
            1'h1:
                \fsm_state$next  = 3'h2;
          endcase
      3'h2:
          casez (\ready$2 )
            1'h1:
                \fsm_state$next  = 3'h4;
          endcase
      3'h4:
          casez (\ready$2 )
            1'h1:
                \fsm_state$next  = 3'h0;
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \fsm_state$next  = 3'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    start = 1'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          start = 1'h1;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    data = 8'h00;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          data = current_data_pid;
      3'h3:
          data = payload;
      3'h2:
          data = crc[7:0];
      3'h4:
          data = remaining_crc;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \valid$1  = 1'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          \valid$1  = 1'h1;
      3'h3:
          \valid$1  = valid;
      3'h2:
          \valid$1  = 1'h1;
      3'h4:
          \valid$1  = 1'h1;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \remaining_crc$next  = remaining_crc;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h3:
          /* empty */;
      3'h2:
          \remaining_crc$next  = crc[15:8];
    endcase
    casez (usb_rst)
      1'h1:
          \remaining_crc$next  = 8'h00;
    endcase
  end
endmodule

module \transmitter$4 (usb_clk, valid, first, last, payload, ready, datum_0, datum_1, max_length, start, usb_rst);
  reg \initial  = 0;
  wire \$1 ;
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire [1:0] \$17 ;
  wire \$19 ;
  wire [1:0] \$21 ;
  wire \$23 ;
  wire \$25 ;
  wire [1:0] \$27 ;
  wire [1:0] \$28 ;
  wire \$3 ;
  wire \$30 ;
  wire \$32 ;
  wire [1:0] \$34 ;
  wire \$36 ;
  wire [1:0] \$38 ;
  wire \$40 ;
  wire \$42 ;
  wire \$5 ;
  wire [2:0] \$7 ;
  wire \$9 ;
  input [7:0] datum_0;
  input [7:0] datum_1;
  reg done;
  output first;
  reg [1:0] fsm_state = 2'h1;
  reg [1:0] \fsm_state$next ;
  output last;
  input [1:0] max_length;
  output [7:0] payload;
  reg [7:0] payload;
  reg position_in_stream = 1'h0;
  reg \position_in_stream$next ;
  input ready;
  input start;
  input usb_clk;
  input usb_rst;
  output valid;
  assign \$9  = position_in_stream == \$7 ;
  assign \$11  = \$5  | \$9 ;
  assign \$13  = \$11  & valid;
  assign \$15  = ! fsm_state;
  assign \$17  = position_in_stream + 1'h1;
  assign \$1  = ~ position_in_stream;
  assign \$19  = \$17  < max_length;
  assign \$21  = position_in_stream + 1'h1;
  assign \$23  = \$21  < 2'h2;
  assign \$25  = \$19  & \$23 ;
  assign \$28  = position_in_stream + 1'h1;
  assign \$30  = max_length > 1'h0;
  assign \$32  = start & \$30 ;
  assign \$34  = position_in_stream + 1'h1;
  assign \$36  = \$34  < max_length;
  assign \$38  = position_in_stream + 1'h1;
  assign \$3  = \$1  & valid;
  assign \$40  = \$38  < 2'h2;
  assign \$42  = \$36  & \$40 ;
  assign \$7  = max_length - 1'h1;
  always @(posedge usb_clk)
    fsm_state <= \fsm_state$next ;
  always @(posedge usb_clk)
    position_in_stream <= \position_in_stream$next ;
  always @* begin
    if (\initial ) begin end
    \position_in_stream$next  = position_in_stream;
    casez (fsm_state)
      2'h1:
          \position_in_stream$next  = 1'h0;
      2'h0:
          casez (ready)
            1'h1:
                casez (\$25 )
                  1'h1:
                      \position_in_stream$next  = \$28 [0];
                endcase
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \position_in_stream$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \fsm_state$next  = fsm_state;
    casez (fsm_state)
      2'h1:
          casez (\$32 )
            1'h1:
                \fsm_state$next  = 2'h0;
          endcase
      2'h0:
          casez (ready)
            1'h1:
                (* full_case = 32'd1 *)
                casez (\$42 )
                  1'h1:
                      /* empty */;
                  default:
                      \fsm_state$next  = 2'h2;
                endcase
          endcase
      2'h2:
          \fsm_state$next  = 2'h1;
    endcase
    casez (usb_rst)
      1'h1:
          \fsm_state$next  = 2'h1;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    payload = 8'h00;
    casez (fsm_state)
      2'h1:
          /* empty */;
      2'h0:
          (* full_case = 32'd1 *)
          casez (position_in_stream)
            1'h0:
                payload = datum_0;
            1'h?:
                payload = datum_1;
          endcase
    endcase
  end
  always @* begin
    if (\initial ) begin end
    done = 1'h0;
    casez (fsm_state)
      2'h1:
          /* empty */;
      2'h0:
          /* empty */;
      2'h2:
          done = 1'h1;
    endcase
  end
  assign \$27  = \$28 ;
  assign valid = \$15 ;
  assign last = \$13 ;
  assign first = \$3 ;
  assign \$5  = position_in_stream;
endmodule

module tx_manager(usb_clk, generate_zlps, active, valid, last, payload, ready, \valid$1 , first, \last$2 , \payload$3 , \ready$4 , data_pid, new_token, ready_for_response, is_in, nak, ack, usb_rst);
  reg \initial  = 0;
  wire \$100 ;
  wire \$102 ;
  wire \$104 ;
  wire \$106 ;
  wire \$108 ;
  wire [7:0] \$11 ;
  wire \$110 ;
  wire \$112 ;
  wire [7:0] \$114 ;
  wire \$116 ;
  wire \$118 ;
  wire \$120 ;
  wire \$122 ;
  wire \$124 ;
  wire \$126 ;
  wire \$128 ;
  wire \$13 ;
  wire \$130 ;
  wire \$132 ;
  wire \$134 ;
  wire [7:0] \$136 ;
  wire \$138 ;
  wire \$140 ;
  wire \$142 ;
  wire \$144 ;
  wire \$146 ;
  wire \$148 ;
  wire \$15 ;
  wire [6:0] \$150 ;
  wire [6:0] \$151 ;
  wire [6:0] \$152 ;
  wire [6:0] \$153 ;
  wire [6:0] \$154 ;
  wire [6:0] \$155 ;
  wire \$156 ;
  wire [7:0] \$158 ;
  wire [7:0] \$159 ;
  wire \$161 ;
  wire [7:0] \$163 ;
  wire [7:0] \$164 ;
  wire [7:0] \$166 ;
  wire [7:0] \$167 ;
  wire \$169 ;
  wire \$17 ;
  wire \$171 ;
  wire \$173 ;
  wire \$175 ;
  wire \$177 ;
  wire \$179 ;
  wire \$181 ;
  wire \$183 ;
  wire \$185 ;
  wire \$187 ;
  wire [7:0] \$189 ;
  wire [7:0] \$19 ;
  wire [7:0] \$190 ;
  wire [7:0] \$192 ;
  wire [7:0] \$193 ;
  wire \$195 ;
  wire \$197 ;
  wire \$199 ;
  wire [7:0] \$201 ;
  wire \$203 ;
  wire \$205 ;
  wire \$207 ;
  wire [7:0] \$209 ;
  wire \$21 ;
  wire \$211 ;
  wire \$213 ;
  wire \$215 ;
  wire [7:0] \$217 ;
  wire \$219 ;
  wire \$221 ;
  wire \$223 ;
  wire [7:0] \$225 ;
  wire \$227 ;
  wire \$229 ;
  wire \$23 ;
  wire \$231 ;
  wire \$233 ;
  wire \$235 ;
  wire \$237 ;
  wire \$238 ;
  wire \$240 ;
  wire \$242 ;
  wire \$244 ;
  wire \$246 ;
  wire \$248 ;
  wire \$25 ;
  wire \$250 ;
  wire \$252 ;
  wire \$254 ;
  wire \$256 ;
  wire \$258 ;
  wire \$260 ;
  wire [7:0] \$262 ;
  wire \$264 ;
  wire \$266 ;
  wire \$268 ;
  wire \$270 ;
  wire \$272 ;
  wire \$274 ;
  wire \$276 ;
  wire \$278 ;
  wire [7:0] \$28 ;
  wire [7:0] \$280 ;
  wire \$282 ;
  wire \$284 ;
  wire \$286 ;
  wire \$288 ;
  wire \$290 ;
  wire \$292 ;
  wire \$294 ;
  wire \$296 ;
  wire \$298 ;
  wire \$30 ;
  wire \$300 ;
  wire \$302 ;
  wire \$304 ;
  wire [7:0] \$306 ;
  wire \$308 ;
  wire \$310 ;
  wire \$312 ;
  wire \$314 ;
  wire \$316 ;
  wire \$318 ;
  wire \$32 ;
  wire \$320 ;
  wire \$322 ;
  wire [7:0] \$324 ;
  wire \$326 ;
  wire \$328 ;
  wire \$330 ;
  wire \$332 ;
  wire \$334 ;
  wire \$336 ;
  wire [7:0] \$338 ;
  wire \$34 ;
  wire \$340 ;
  wire \$342 ;
  wire \$344 ;
  wire [7:0] \$346 ;
  wire \$348 ;
  wire \$350 ;
  wire [7:0] \$352 ;
  wire \$354 ;
  wire \$356 ;
  wire \$358 ;
  wire [7:0] \$36 ;
  wire [7:0] \$360 ;
  wire \$362 ;
  wire \$364 ;
  wire \$366 ;
  wire \$368 ;
  wire \$370 ;
  wire \$371 ;
  wire \$373 ;
  wire \$375 ;
  wire [7:0] \$377 ;
  wire \$379 ;
  wire \$38 ;
  wire [7:0] \$381 ;
  wire \$383 ;
  wire [7:0] \$385 ;
  wire \$387 ;
  wire \$389 ;
  wire \$391 ;
  wire \$393 ;
  wire \$395 ;
  wire \$397 ;
  wire \$399 ;
  wire \$40 ;
  wire \$401 ;
  wire \$403 ;
  wire \$405 ;
  wire [7:0] \$407 ;
  wire \$409 ;
  wire \$411 ;
  wire \$413 ;
  wire \$415 ;
  wire \$417 ;
  wire \$419 ;
  wire \$42 ;
  wire \$421 ;
  wire \$423 ;
  wire [7:0] \$425 ;
  wire \$427 ;
  wire \$429 ;
  wire \$431 ;
  wire \$433 ;
  wire \$435 ;
  wire \$437 ;
  wire \$439 ;
  wire \$44 ;
  wire \$441 ;
  wire \$443 ;
  wire \$445 ;
  wire \$447 ;
  wire \$449 ;
  wire [7:0] \$451 ;
  wire \$453 ;
  wire \$455 ;
  wire \$457 ;
  wire \$459 ;
  wire \$46 ;
  wire \$461 ;
  wire \$463 ;
  wire \$465 ;
  wire \$467 ;
  wire [7:0] \$469 ;
  wire \$471 ;
  wire \$473 ;
  wire \$475 ;
  wire \$477 ;
  wire [7:0] \$479 ;
  wire \$48 ;
  wire \$481 ;
  wire \$483 ;
  wire \$485 ;
  wire [7:0] \$487 ;
  wire \$489 ;
  wire \$491 ;
  wire \$493 ;
  wire [7:0] \$495 ;
  wire \$497 ;
  wire \$499 ;
  wire \$50 ;
  wire \$501 ;
  wire [7:0] \$503 ;
  wire \$505 ;
  wire \$507 ;
  wire \$509 ;
  wire \$511 ;
  wire \$513 ;
  wire \$515 ;
  wire \$517 ;
  wire \$519 ;
  wire \$52 ;
  wire \$521 ;
  wire \$523 ;
  wire \$525 ;
  wire \$527 ;
  wire [7:0] \$529 ;
  wire \$531 ;
  wire \$533 ;
  wire \$535 ;
  wire \$537 ;
  wire \$539 ;
  wire \$54 ;
  wire \$541 ;
  wire \$543 ;
  wire \$545 ;
  wire [7:0] \$547 ;
  wire \$549 ;
  wire \$551 ;
  wire \$553 ;
  wire \$555 ;
  wire \$557 ;
  wire \$559 ;
  wire \$56 ;
  wire \$561 ;
  wire \$563 ;
  wire \$565 ;
  wire \$567 ;
  wire \$569 ;
  wire \$571 ;
  wire [7:0] \$573 ;
  wire \$575 ;
  wire \$577 ;
  wire \$579 ;
  wire \$58 ;
  wire \$581 ;
  wire \$583 ;
  wire \$585 ;
  wire \$587 ;
  wire \$589 ;
  wire [7:0] \$591 ;
  wire \$593 ;
  wire \$595 ;
  wire \$597 ;
  wire \$599 ;
  wire \$60 ;
  wire [7:0] \$601 ;
  wire [7:0] \$602 ;
  wire \$604 ;
  wire \$606 ;
  wire \$608 ;
  wire \$609 ;
  wire \$611 ;
  wire \$613 ;
  wire \$615 ;
  wire \$617 ;
  wire \$619 ;
  wire [7:0] \$62 ;
  wire \$620 ;
  wire \$622 ;
  wire \$624 ;
  wire \$626 ;
  wire \$628 ;
  wire \$630 ;
  wire \$631 ;
  wire \$633 ;
  wire \$635 ;
  wire [7:0] \$637 ;
  wire \$639 ;
  wire \$64 ;
  wire [7:0] \$641 ;
  wire \$643 ;
  wire [7:0] \$645 ;
  wire \$647 ;
  wire \$66 ;
  wire \$68 ;
  wire [1:0] \$7 ;
  wire \$70 ;
  wire \$72 ;
  wire \$74 ;
  wire \$76 ;
  wire \$78 ;
  wire \$8 ;
  wire \$80 ;
  wire \$82 ;
  wire [7:0] \$84 ;
  wire \$86 ;
  wire \$88 ;
  wire \$90 ;
  wire \$92 ;
  wire \$94 ;
  wire \$96 ;
  wire \$98 ;
  reg [6:0] \$signal  = 7'h00;
  reg [6:0] \$signal$27  = 7'h00;
  reg [6:0] \$signal$27$next ;
  reg [6:0] \$signal$next ;
  input ack;
  input active;
  reg buffer_toggle = 1'h0;
  reg \buffer_toggle$next ;
  output [1:0] data_pid;
  reg [1:0] data_pid = 2'h1;
  reg [1:0] \data_pid$next ;
  output first;
  reg first = 1'h0;
  reg \first$next ;
  reg [1:0] fsm_state = 2'h0;
  reg [1:0] \fsm_state$next ;
  input generate_zlps;
  input is_in;
  input last;
  output \last$2 ;
  reg \last$2 ;
  output nak;
  reg nak;
  input new_token;
  input [7:0] payload;
  output [7:0] \payload$3 ;
  reg [7:0] \payload$3 ;
  output ready;
  reg ready;
  input \ready$4 ;
  input ready_for_response;
  wire reset_sequence;
  reg [6:0] send_position = 7'h00;
  reg [6:0] \send_position$next ;
  wire start_with_data1;
  reg stream_ended_in_buffer0 = 1'h0;
  reg \stream_ended_in_buffer0$next ;
  reg stream_ended_in_buffer1 = 1'h0;
  reg \stream_ended_in_buffer1$next ;
  reg [5:0] transmit_buffer_0_r_addr;
  wire [7:0] transmit_buffer_0_r_data;
  reg [5:0] transmit_buffer_0_w_addr;
  wire [7:0] transmit_buffer_0_w_data;
  reg transmit_buffer_0_w_en;
  reg [5:0] transmit_buffer_1_r_addr;
  wire [7:0] transmit_buffer_1_r_data;
  reg [5:0] transmit_buffer_1_w_addr;
  wire [7:0] transmit_buffer_1_w_data;
  reg transmit_buffer_1_w_en;
  input usb_clk;
  input usb_rst;
  input valid;
  output \valid$1 ;
  reg \valid$1 ;
  reg [7:0] transmit_buffer_0 [63:0];
  initial begin
    transmit_buffer_0[0] = 8'h00;
    transmit_buffer_0[1] = 8'h00;
    transmit_buffer_0[2] = 8'h00;
    transmit_buffer_0[3] = 8'h00;
    transmit_buffer_0[4] = 8'h00;
    transmit_buffer_0[5] = 8'h00;
    transmit_buffer_0[6] = 8'h00;
    transmit_buffer_0[7] = 8'h00;
    transmit_buffer_0[8] = 8'h00;
    transmit_buffer_0[9] = 8'h00;
    transmit_buffer_0[10] = 8'h00;
    transmit_buffer_0[11] = 8'h00;
    transmit_buffer_0[12] = 8'h00;
    transmit_buffer_0[13] = 8'h00;
    transmit_buffer_0[14] = 8'h00;
    transmit_buffer_0[15] = 8'h00;
    transmit_buffer_0[16] = 8'h00;
    transmit_buffer_0[17] = 8'h00;
    transmit_buffer_0[18] = 8'h00;
    transmit_buffer_0[19] = 8'h00;
    transmit_buffer_0[20] = 8'h00;
    transmit_buffer_0[21] = 8'h00;
    transmit_buffer_0[22] = 8'h00;
    transmit_buffer_0[23] = 8'h00;
    transmit_buffer_0[24] = 8'h00;
    transmit_buffer_0[25] = 8'h00;
    transmit_buffer_0[26] = 8'h00;
    transmit_buffer_0[27] = 8'h00;
    transmit_buffer_0[28] = 8'h00;
    transmit_buffer_0[29] = 8'h00;
    transmit_buffer_0[30] = 8'h00;
    transmit_buffer_0[31] = 8'h00;
    transmit_buffer_0[32] = 8'h00;
    transmit_buffer_0[33] = 8'h00;
    transmit_buffer_0[34] = 8'h00;
    transmit_buffer_0[35] = 8'h00;
    transmit_buffer_0[36] = 8'h00;
    transmit_buffer_0[37] = 8'h00;
    transmit_buffer_0[38] = 8'h00;
    transmit_buffer_0[39] = 8'h00;
    transmit_buffer_0[40] = 8'h00;
    transmit_buffer_0[41] = 8'h00;
    transmit_buffer_0[42] = 8'h00;
    transmit_buffer_0[43] = 8'h00;
    transmit_buffer_0[44] = 8'h00;
    transmit_buffer_0[45] = 8'h00;
    transmit_buffer_0[46] = 8'h00;
    transmit_buffer_0[47] = 8'h00;
    transmit_buffer_0[48] = 8'h00;
    transmit_buffer_0[49] = 8'h00;
    transmit_buffer_0[50] = 8'h00;
    transmit_buffer_0[51] = 8'h00;
    transmit_buffer_0[52] = 8'h00;
    transmit_buffer_0[53] = 8'h00;
    transmit_buffer_0[54] = 8'h00;
    transmit_buffer_0[55] = 8'h00;
    transmit_buffer_0[56] = 8'h00;
    transmit_buffer_0[57] = 8'h00;
    transmit_buffer_0[58] = 8'h00;
    transmit_buffer_0[59] = 8'h00;
    transmit_buffer_0[60] = 8'h00;
    transmit_buffer_0[61] = 8'h00;
    transmit_buffer_0[62] = 8'h00;
    transmit_buffer_0[63] = 8'h00;
  end
  always @(posedge usb_clk) begin
    if (transmit_buffer_0_w_en)
      transmit_buffer_0[transmit_buffer_0_w_addr] <= transmit_buffer_0_w_data;
  end
  reg [5:0] _0_;
  always @(posedge usb_clk) begin
    _0_ <= transmit_buffer_0_r_addr;
  end
  assign transmit_buffer_0_r_data = transmit_buffer_0[_0_];
  reg [7:0] transmit_buffer_1 [63:0];
  initial begin
    transmit_buffer_1[0] = 8'h00;
    transmit_buffer_1[1] = 8'h00;
    transmit_buffer_1[2] = 8'h00;
    transmit_buffer_1[3] = 8'h00;
    transmit_buffer_1[4] = 8'h00;
    transmit_buffer_1[5] = 8'h00;
    transmit_buffer_1[6] = 8'h00;
    transmit_buffer_1[7] = 8'h00;
    transmit_buffer_1[8] = 8'h00;
    transmit_buffer_1[9] = 8'h00;
    transmit_buffer_1[10] = 8'h00;
    transmit_buffer_1[11] = 8'h00;
    transmit_buffer_1[12] = 8'h00;
    transmit_buffer_1[13] = 8'h00;
    transmit_buffer_1[14] = 8'h00;
    transmit_buffer_1[15] = 8'h00;
    transmit_buffer_1[16] = 8'h00;
    transmit_buffer_1[17] = 8'h00;
    transmit_buffer_1[18] = 8'h00;
    transmit_buffer_1[19] = 8'h00;
    transmit_buffer_1[20] = 8'h00;
    transmit_buffer_1[21] = 8'h00;
    transmit_buffer_1[22] = 8'h00;
    transmit_buffer_1[23] = 8'h00;
    transmit_buffer_1[24] = 8'h00;
    transmit_buffer_1[25] = 8'h00;
    transmit_buffer_1[26] = 8'h00;
    transmit_buffer_1[27] = 8'h00;
    transmit_buffer_1[28] = 8'h00;
    transmit_buffer_1[29] = 8'h00;
    transmit_buffer_1[30] = 8'h00;
    transmit_buffer_1[31] = 8'h00;
    transmit_buffer_1[32] = 8'h00;
    transmit_buffer_1[33] = 8'h00;
    transmit_buffer_1[34] = 8'h00;
    transmit_buffer_1[35] = 8'h00;
    transmit_buffer_1[36] = 8'h00;
    transmit_buffer_1[37] = 8'h00;
    transmit_buffer_1[38] = 8'h00;
    transmit_buffer_1[39] = 8'h00;
    transmit_buffer_1[40] = 8'h00;
    transmit_buffer_1[41] = 8'h00;
    transmit_buffer_1[42] = 8'h00;
    transmit_buffer_1[43] = 8'h00;
    transmit_buffer_1[44] = 8'h00;
    transmit_buffer_1[45] = 8'h00;
    transmit_buffer_1[46] = 8'h00;
    transmit_buffer_1[47] = 8'h00;
    transmit_buffer_1[48] = 8'h00;
    transmit_buffer_1[49] = 8'h00;
    transmit_buffer_1[50] = 8'h00;
    transmit_buffer_1[51] = 8'h00;
    transmit_buffer_1[52] = 8'h00;
    transmit_buffer_1[53] = 8'h00;
    transmit_buffer_1[54] = 8'h00;
    transmit_buffer_1[55] = 8'h00;
    transmit_buffer_1[56] = 8'h00;
    transmit_buffer_1[57] = 8'h00;
    transmit_buffer_1[58] = 8'h00;
    transmit_buffer_1[59] = 8'h00;
    transmit_buffer_1[60] = 8'h00;
    transmit_buffer_1[61] = 8'h00;
    transmit_buffer_1[62] = 8'h00;
    transmit_buffer_1[63] = 8'h00;
  end
  always @(posedge usb_clk) begin
    if (transmit_buffer_1_w_en)
      transmit_buffer_1[transmit_buffer_1_w_addr] <= transmit_buffer_1_w_data;
  end
  reg [5:0] _1_;
  always @(posedge usb_clk) begin
    _1_ <= transmit_buffer_1_r_addr;
  end
  assign transmit_buffer_1_r_data = transmit_buffer_1[_1_];
  assign \$100  = generate_zlps & \$98 ;
  assign \$102  = \$100  & stream_ended_in_buffer1;
  assign \$104  = ~ ready;
  assign \$106  = \$signal$27  == 7'h40;
  assign \$108  = generate_zlps & \$106 ;
  assign \$110  = \$108  & stream_ended_in_buffer1;
  assign \$112  = ~ ready;
  assign \$114  = \$signal  + 1'h1;
  assign \$116  = \$114  == 7'h40;
  assign \$118  = \$116  | last;
  assign \$11  = \$signal  + 1'h1;
  assign \$120  = valid & \$118 ;
  assign \$122  = \$112  | \$120 ;
  assign \$124  = ~ data_pid[0];
  assign \$126  = ~ data_pid[0];
  assign \$128  = \$signal$27  == 7'h40;
  assign \$130  = generate_zlps & \$128 ;
  assign \$132  = \$130  & stream_ended_in_buffer1;
  assign \$134  = ~ ready;
  assign \$136  = \$signal$27  + 1'h1;
  assign \$138  = \$136  == 7'h40;
  assign \$13  = \$11  == 7'h40;
  assign \$140  = \$138  | last;
  assign \$142  = valid & \$140 ;
  assign \$144  = \$134  | \$142 ;
  assign \$146  = ~ data_pid[0];
  assign \$148  = ~ data_pid[0];
  assign \$156  = ~ buffer_toggle;
  assign \$15  = \$13  | last;
  assign \$159  = send_position + 1'h1;
  assign \$161  = ~ buffer_toggle;
  assign \$164  = send_position + 1'h1;
  assign \$167  = send_position + 1'h1;
  assign \$169  = ~ buffer_toggle;
  assign \$171  = \$signal  != 7'h40;
  assign \$173  = ~ stream_ended_in_buffer0;
  assign \$175  = \$171  & \$173 ;
  assign \$177  = \$signal$27  != 7'h40;
  assign \$17  = valid & \$15 ;
  assign \$179  = ~ stream_ended_in_buffer1;
  assign \$181  = \$177  & \$179 ;
  assign \$183  = valid & ready;
  assign \$185  = valid & ready;
  assign \$187  = valid & ready;
  assign \$190  = \$signal  + 1'h1;
  assign \$193  = \$signal$27  + 1'h1;
  assign \$195  = ~ buffer_toggle;
  assign \$197  = last & transmit_buffer_0_w_en;
  assign \$19  = \$signal  + 1'h1;
  assign \$199  = last & transmit_buffer_1_w_en;
  assign \$201  = \$signal  + 1'h1;
  assign \$203  = \$201  == 7'h40;
  assign \$205  = \$203  | last;
  assign \$207  = valid & \$205 ;
  assign \$209  = \$signal  + 1'h1;
  assign \$211  = \$209  == 7'h40;
  assign \$213  = \$211  | last;
  assign \$217  = \$signal$27  + 1'h1;
  assign \$21  = \$19  == 7'h40;
  assign \$219  = \$217  == 7'h40;
  assign \$221  = \$219  | last;
  assign \$223  = valid & \$221 ;
  assign \$225  = \$signal$27  + 1'h1;
  assign \$227  = \$225  == 7'h40;
  assign \$229  = \$227  | last;
  assign \$233  = active & is_in;
  assign \$235  = \$233  & ready_for_response;
  assign \$238  = ~ buffer_toggle;
  assign \$23  = \$21  | last;
  assign \$240  = | \$signal ;
  assign \$242  = | \$signal$27 ;
  assign \$244  = ~ buffer_toggle;
  assign \$246  = \$signal  == 7'h40;
  assign \$248  = generate_zlps & \$246 ;
  assign \$250  = \$248  & stream_ended_in_buffer0;
  assign \$252  = ~ ready;
  assign \$254  = \$signal  == 7'h40;
  assign \$256  = generate_zlps & \$254 ;
  assign \$258  = \$256  & stream_ended_in_buffer0;
  assign \$25  = ~ data_pid[0];
  assign \$260  = ~ ready;
  assign \$262  = \$signal  + 1'h1;
  assign \$264  = \$262  == 7'h40;
  assign \$266  = \$264  | last;
  assign \$268  = valid & \$266 ;
  assign \$270  = \$260  | \$268 ;
  assign \$272  = \$signal  == 7'h40;
  assign \$274  = generate_zlps & \$272 ;
  assign \$276  = \$274  & stream_ended_in_buffer0;
  assign \$278  = ~ ready;
  assign \$280  = \$signal$27  + 1'h1;
  assign \$282  = \$280  == 7'h40;
  assign \$284  = \$282  | last;
  assign \$286  = valid & \$284 ;
  assign \$288  = \$278  | \$286 ;
  assign \$28  = \$signal$27  + 1'h1;
  assign \$290  = \$signal$27  == 7'h40;
  assign \$292  = generate_zlps & \$290 ;
  assign \$294  = \$292  & stream_ended_in_buffer1;
  assign \$296  = ~ ready;
  assign \$298  = \$signal$27  == 7'h40;
  assign \$300  = generate_zlps & \$298 ;
  assign \$302  = \$300  & stream_ended_in_buffer1;
  assign \$304  = ~ ready;
  assign \$306  = \$signal  + 1'h1;
  assign \$308  = \$306  == 7'h40;
  assign \$30  = \$28  == 7'h40;
  assign \$310  = \$308  | last;
  assign \$312  = valid & \$310 ;
  assign \$314  = \$304  | \$312 ;
  assign \$316  = \$signal$27  == 7'h40;
  assign \$318  = generate_zlps & \$316 ;
  assign \$320  = \$318  & stream_ended_in_buffer1;
  assign \$322  = ~ ready;
  assign \$324  = \$signal$27  + 1'h1;
  assign \$326  = \$324  == 7'h40;
  assign \$328  = \$326  | last;
  assign \$32  = \$30  | last;
  assign \$330  = valid & \$328 ;
  assign \$332  = \$322  | \$330 ;
  assign \$334  = active & is_in;
  assign \$336  = \$334  & ready_for_response;
  assign \$338  = \$signal  + 1'h1;
  assign \$340  = \$338  == 7'h40;
  assign \$342  = \$340  | last;
  assign \$344  = valid & \$342 ;
  assign \$346  = \$signal  + 1'h1;
  assign \$348  = \$346  == 7'h40;
  assign \$34  = valid & \$32 ;
  assign \$350  = \$348  | last;
  assign \$352  = \$signal$27  + 1'h1;
  assign \$354  = \$352  == 7'h40;
  assign \$356  = \$354  | last;
  assign \$358  = valid & \$356 ;
  assign \$360  = \$signal$27  + 1'h1;
  assign \$362  = \$360  == 7'h40;
  assign \$364  = \$362  | last;
  assign \$366  = active & is_in;
  assign \$368  = \$366  & ready_for_response;
  assign \$36  = \$signal$27  + 1'h1;
  assign \$371  = ~ buffer_toggle;
  assign \$373  = | \$signal ;
  assign \$375  = | \$signal$27 ;
  assign \$377  = send_position + 1'h1;
  assign \$379  = ~ buffer_toggle;
  assign \$381  = send_position + 1'h1;
  assign \$383  = \$381  == \$signal ;
  assign \$385  = send_position + 1'h1;
  assign \$387  = \$385  == \$signal$27 ;
  assign \$38  = \$36  == 7'h40;
  assign \$389  = ~ buffer_toggle;
  assign \$391  = \$signal  == 7'h40;
  assign \$393  = generate_zlps & \$391 ;
  assign \$395  = \$393  & stream_ended_in_buffer0;
  assign \$397  = ~ ready;
  assign \$399  = \$signal  == 7'h40;
  assign \$401  = generate_zlps & \$399 ;
  assign \$403  = \$401  & stream_ended_in_buffer0;
  assign \$405  = ~ ready;
  assign \$407  = \$signal  + 1'h1;
  assign \$40  = \$38  | last;
  assign \$409  = \$407  == 7'h40;
  assign \$411  = \$409  | last;
  assign \$413  = valid & \$411 ;
  assign \$415  = \$405  | \$413 ;
  assign \$417  = \$signal  == 7'h40;
  assign \$419  = generate_zlps & \$417 ;
  assign \$421  = \$419  & stream_ended_in_buffer0;
  assign \$423  = ~ ready;
  assign \$425  = \$signal$27  + 1'h1;
  assign \$427  = \$425  == 7'h40;
  assign \$42  = ~ data_pid[0];
  assign \$429  = \$427  | last;
  assign \$431  = valid & \$429 ;
  assign \$433  = \$423  | \$431 ;
  assign \$435  = \$signal$27  == 7'h40;
  assign \$437  = generate_zlps & \$435 ;
  assign \$439  = \$437  & stream_ended_in_buffer1;
  assign \$441  = ~ ready;
  assign \$443  = \$signal$27  == 7'h40;
  assign \$445  = generate_zlps & \$443 ;
  assign \$447  = \$445  & stream_ended_in_buffer1;
  assign \$44  = ~ buffer_toggle;
  assign \$449  = ~ ready;
  assign \$451  = \$signal  + 1'h1;
  assign \$453  = \$451  == 7'h40;
  assign \$455  = \$453  | last;
  assign \$457  = valid & \$455 ;
  assign \$459  = \$449  | \$457 ;
  assign \$461  = \$signal$27  == 7'h40;
  assign \$463  = generate_zlps & \$461 ;
  assign \$465  = \$463  & stream_ended_in_buffer1;
  assign \$467  = ~ ready;
  assign \$46  = \$signal  == 7'h40;
  assign \$469  = \$signal$27  + 1'h1;
  assign \$471  = \$469  == 7'h40;
  assign \$473  = \$471  | last;
  assign \$475  = valid & \$473 ;
  assign \$477  = \$467  | \$475 ;
  assign \$479  = \$signal  + 1'h1;
  assign \$481  = \$479  == 7'h40;
  assign \$483  = \$481  | last;
  assign \$485  = valid & \$483 ;
  assign \$487  = \$signal  + 1'h1;
  assign \$48  = generate_zlps & \$46 ;
  assign \$489  = \$487  == 7'h40;
  assign \$491  = \$489  | last;
  assign \$495  = \$signal$27  + 1'h1;
  assign \$497  = \$495  == 7'h40;
  assign \$499  = \$497  | last;
  assign \$501  = valid & \$499 ;
  assign \$503  = \$signal$27  + 1'h1;
  assign \$505  = \$503  == 7'h40;
  assign \$507  = \$505  | last;
  assign \$50  = \$48  & stream_ended_in_buffer0;
  assign \$511  = ~ buffer_toggle;
  assign \$513  = \$signal  == 7'h40;
  assign \$515  = generate_zlps & \$513 ;
  assign \$517  = \$515  & stream_ended_in_buffer0;
  assign \$519  = ~ ready;
  assign \$521  = \$signal  == 7'h40;
  assign \$523  = generate_zlps & \$521 ;
  assign \$525  = \$523  & stream_ended_in_buffer0;
  assign \$527  = ~ ready;
  assign \$52  = ~ ready;
  assign \$529  = \$signal  + 1'h1;
  assign \$531  = \$529  == 7'h40;
  assign \$533  = \$531  | last;
  assign \$535  = valid & \$533 ;
  assign \$537  = \$527  | \$535 ;
  assign \$539  = \$signal  == 7'h40;
  assign \$541  = generate_zlps & \$539 ;
  assign \$543  = \$541  & stream_ended_in_buffer0;
  assign \$545  = ~ ready;
  assign \$547  = \$signal$27  + 1'h1;
  assign \$54  = \$signal  == 7'h40;
  assign \$549  = \$547  == 7'h40;
  assign \$551  = \$549  | last;
  assign \$553  = valid & \$551 ;
  assign \$555  = \$545  | \$553 ;
  assign \$557  = \$signal$27  == 7'h40;
  assign \$559  = generate_zlps & \$557 ;
  assign \$561  = \$559  & stream_ended_in_buffer1;
  assign \$563  = ~ ready;
  assign \$565  = \$signal$27  == 7'h40;
  assign \$567  = generate_zlps & \$565 ;
  assign \$56  = generate_zlps & \$54 ;
  assign \$569  = \$567  & stream_ended_in_buffer1;
  assign \$571  = ~ ready;
  assign \$573  = \$signal  + 1'h1;
  assign \$575  = \$573  == 7'h40;
  assign \$577  = \$575  | last;
  assign \$579  = valid & \$577 ;
  assign \$581  = \$571  | \$579 ;
  assign \$583  = \$signal$27  == 7'h40;
  assign \$585  = generate_zlps & \$583 ;
  assign \$587  = \$585  & stream_ended_in_buffer1;
  assign \$58  = \$56  & stream_ended_in_buffer0;
  assign \$589  = ~ ready;
  assign \$591  = \$signal$27  + 1'h1;
  assign \$593  = \$591  == 7'h40;
  assign \$595  = \$593  | last;
  assign \$597  = valid & \$595 ;
  assign \$599  = \$589  | \$597 ;
  assign \$602  = send_position + 1'h1;
  assign \$604  = active & is_in;
  assign \$606  = \$604  & ready_for_response;
  assign \$60  = ~ ready;
  assign \$609  = ~ buffer_toggle;
  assign \$611  = | \$signal ;
  assign \$613  = | \$signal$27 ;
  assign \$615  = active & is_in;
  assign \$617  = \$615  & ready_for_response;
  assign \$620  = ~ buffer_toggle;
  assign \$622  = | \$signal ;
  assign \$624  = | \$signal$27 ;
  assign \$626  = active & is_in;
  assign \$628  = \$626  & ready_for_response;
  assign \$62  = \$signal  + 1'h1;
  assign \$631  = ~ buffer_toggle;
  assign \$633  = | \$signal ;
  assign \$635  = | \$signal$27 ;
  assign \$637  = send_position + 1'h1;
  assign \$639  = ~ buffer_toggle;
  assign \$641  = send_position + 1'h1;
  assign \$643  = \$641  == \$signal ;
  assign \$645  = send_position + 1'h1;
  assign \$647  = \$645  == \$signal$27 ;
  assign \$64  = \$62  == 7'h40;
  assign \$66  = \$64  | last;
  assign \$68  = valid & \$66 ;
  assign \$70  = \$60  | \$68 ;
  assign \$72  = ~ data_pid[0];
  assign \$74  = ~ data_pid[0];
  assign \$76  = \$signal  == 7'h40;
  assign \$78  = generate_zlps & \$76 ;
  assign \$80  = \$78  & stream_ended_in_buffer0;
  assign \$82  = ~ ready;
  assign \$84  = \$signal$27  + 1'h1;
  assign \$86  = \$84  == 7'h40;
  assign \$88  = \$86  | last;
  assign \$90  = valid & \$88 ;
  assign \$92  = \$82  | \$90 ;
  assign \$94  = ~ data_pid[0];
  assign \$96  = ~ data_pid[0];
  assign \$98  = \$signal$27  == 7'h40;
  always @(posedge usb_clk)
    first <= \first$next ;
  always @(posedge usb_clk)
    send_position <= \send_position$next ;
  always @(posedge usb_clk)
    buffer_toggle <= \buffer_toggle$next ;
  always @(posedge usb_clk)
    fsm_state <= \fsm_state$next ;
  always @(posedge usb_clk)
    stream_ended_in_buffer0 <= \stream_ended_in_buffer0$next ;
  always @(posedge usb_clk)
    stream_ended_in_buffer1 <= \stream_ended_in_buffer1$next ;
  always @(posedge usb_clk)
    \$signal  <= \$signal$next ;
  always @(posedge usb_clk)
    \$signal$27  <= \$signal$27$next ;
  always @(posedge usb_clk)
    data_pid <= \data_pid$next ;
  always @* begin
    if (\initial ) begin end
    \data_pid$next  = data_pid;
    casez (reset_sequence)
      1'h1:
          \data_pid$next  = \$7 ;
    endcase
    (* full_case = 32'd1 *)
    casez (fsm_state)
      2'h0:
          (* full_case = 32'd1 *)
          casez (buffer_toggle)
            1'h0:
                casez (\$17 )
                  1'h1:
                      casez (\$23 )
                        1'h1:
                            \data_pid$next [0] = \$25 ;
                      endcase
                endcase
            1'h?:
                casez (\$34 )
                  1'h1:
                      casez (\$40 )
                        1'h1:
                            \data_pid$next [0] = \$42 ;
                      endcase
                endcase
          endcase
      2'h1:
          /* empty */;
      2'h2:
          /* empty */;
      2'h3:
          casez (ack)
            1'h1:
                (* full_case = 32'd1 *)
                casez (\$44 )
                  1'h0:
                      (* full_case = 32'd1 *)
                      casez (buffer_toggle)
                        1'h0:
                            casez ({ \$70 , \$58  })
                              2'b?1:
                                  \data_pid$next [0] = \$72 ;
                              2'b1?:
                                  \data_pid$next [0] = \$74 ;
                            endcase
                        1'h?:
                            casez ({ \$92 , \$80  })
                              2'b?1:
                                  \data_pid$next [0] = \$94 ;
                              2'b1?:
                                  \data_pid$next [0] = \$96 ;
                            endcase
                      endcase
                  1'h?:
                      (* full_case = 32'd1 *)
                      casez (buffer_toggle)
                        1'h0:
                            casez ({ \$122 , \$110  })
                              2'b?1:
                                  \data_pid$next [0] = \$124 ;
                              2'b1?:
                                  \data_pid$next [0] = \$126 ;
                            endcase
                        1'h?:
                            casez ({ \$144 , \$132  })
                              2'b?1:
                                  \data_pid$next [0] = \$146 ;
                              2'b1?:
                                  \data_pid$next [0] = \$148 ;
                            endcase
                      endcase
                endcase
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \data_pid$next  = 2'h1;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \$signal$next  = \$signal ;
    \$signal$27$next  = \$signal$27 ;
    (* full_case = 32'd1 *)
    casez (buffer_toggle)
      1'h0:
          casez (transmit_buffer_0_w_en)
            1'h1:
                \$signal$next  = \$190 [6:0];
          endcase
      1'h?:
          casez (transmit_buffer_1_w_en)
            1'h1:
                \$signal$27$next  = \$193 [6:0];
          endcase
    endcase
    (* full_case = 32'd1 *)
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          /* empty */;
      2'h3:
          casez (ack)
            1'h1:
                (* full_case = 32'd1 *)
                casez (\$195 )
                  1'h0:
                      \$signal$next  = 7'h00;
                  1'h?:
                      \$signal$27$next  = 7'h00;
                endcase
          endcase
    endcase
    casez (usb_rst)
      1'h1:
        begin
          \$signal$next  = 7'h00;
          \$signal$27$next  = 7'h00;
        end
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \stream_ended_in_buffer0$next  = stream_ended_in_buffer0;
    \stream_ended_in_buffer1$next  = stream_ended_in_buffer1;
    (* full_case = 32'd1 *)
    casez (buffer_toggle)
      1'h0:
          casez (\$197 )
            1'h1:
                \stream_ended_in_buffer0$next  = 1'h1;
          endcase
      1'h?:
          casez (\$199 )
            1'h1:
                \stream_ended_in_buffer1$next  = 1'h1;
          endcase
    endcase
    (* full_case = 32'd1 *)
    casez (fsm_state)
      2'h0:
          (* full_case = 32'd1 *)
          casez (buffer_toggle)
            1'h0:
                casez (\$207 )
                  1'h1:
                      casez (\$213 )
                        1'h1:
                            (* full_case = 32'd1 *)
                            casez (\$215 )
                              1'h0:
                                  \stream_ended_in_buffer0$next  = 1'h0;
                              1'h?:
                                  \stream_ended_in_buffer1$next  = 1'h0;
                            endcase
                      endcase
                endcase
            1'h?:
                casez (\$223 )
                  1'h1:
                      casez (\$229 )
                        1'h1:
                            (* full_case = 32'd1 *)
                            casez (\$231 )
                              1'h0:
                                  \stream_ended_in_buffer0$next  = 1'h0;
                              1'h?:
                                  \stream_ended_in_buffer1$next  = 1'h0;
                            endcase
                      endcase
                endcase
          endcase
      2'h1:
          casez (\$235 )
            1'h1:
                (* full_case = 32'd1 *)
                casez (\$238 )
                  1'h0:
                      (* full_case = 32'd1 *)
                      casez (\$240 )
                        1'h1:
                            /* empty */;
                        default:
                            \stream_ended_in_buffer0$next  = 1'h0;
                      endcase
                  1'h?:
                      (* full_case = 32'd1 *)
                      casez (\$242 )
                        1'h1:
                            /* empty */;
                        default:
                            \stream_ended_in_buffer1$next  = 1'h0;
                      endcase
                endcase
          endcase
      2'h2:
          /* empty */;
      2'h3:
          casez (ack)
            1'h1:
                (* full_case = 32'd1 *)
                casez (\$244 )
                  1'h0:
                      (* full_case = 32'd1 *)
                      casez (buffer_toggle)
                        1'h0:
                            casez ({ \$270 , \$258  })
                              2'b?1:
                                  /* empty */;
                              2'b1?:
                                  \stream_ended_in_buffer0$next  = 1'h0;
                            endcase
                        1'h?:
                            casez ({ \$288 , \$276  })
                              2'b?1:
                                  /* empty */;
                              2'b1?:
                                  \stream_ended_in_buffer0$next  = 1'h0;
                            endcase
                      endcase
                  1'h?:
                      (* full_case = 32'd1 *)
                      casez (buffer_toggle)
                        1'h0:
                            casez ({ \$314 , \$302  })
                              2'b?1:
                                  /* empty */;
                              2'b1?:
                                  \stream_ended_in_buffer1$next  = 1'h0;
                            endcase
                        1'h?:
                            casez ({ \$332 , \$320  })
                              2'b?1:
                                  /* empty */;
                              2'b1?:
                                  \stream_ended_in_buffer1$next  = 1'h0;
                            endcase
                      endcase
                endcase
          endcase
    endcase
    casez (usb_rst)
      1'h1:
        begin
          \stream_ended_in_buffer0$next  = 1'h0;
          \stream_ended_in_buffer1$next  = 1'h0;
        end
    endcase
  end
  always @* begin
    if (\initial ) begin end
    nak = 1'h0;
    casez (fsm_state)
      2'h0:
          nak = \$336 ;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \fsm_state$next  = fsm_state;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      2'h0:
          (* full_case = 32'd1 *)
          casez (buffer_toggle)
            1'h0:
                casez (\$344 )
                  1'h1:
                      casez (\$350 )
                        1'h1:
                            \fsm_state$next  = 2'h1;
                      endcase
                endcase
            1'h?:
                casez (\$358 )
                  1'h1:
                      casez (\$364 )
                        1'h1:
                            \fsm_state$next  = 2'h1;
                      endcase
                endcase
          endcase
      2'h1:
          casez (\$368 )
            1'h1:
                (* full_case = 32'd1 *)
                casez (\$371 )
                  1'h0:
                      (* full_case = 32'd1 *)
                      casez (\$373 )
                        1'h1:
                            \fsm_state$next  = 2'h2;
                        default:
                            \fsm_state$next  = 2'h3;
                      endcase
                  1'h?:
                      (* full_case = 32'd1 *)
                      casez (\$375 )
                        1'h1:
                            \fsm_state$next  = 2'h2;
                        default:
                            \fsm_state$next  = 2'h3;
                      endcase
                endcase
          endcase
      2'h2:
          casez (\ready$4 )
            1'h1:
                (* full_case = 32'd1 *)
                casez (\$379 )
                  1'h0:
                      casez (\$383 )
                        1'h1:
                            \fsm_state$next  = 2'h3;
                      endcase
                  1'h?:
                      casez (\$387 )
                        1'h1:
                            \fsm_state$next  = 2'h3;
                      endcase
                endcase
          endcase
      2'h3:
        begin
          casez (ack)
            1'h1:
                (* full_case = 32'd1 *)
                casez (\$389 )
                  1'h0:
                      (* full_case = 32'd1 *)
                      casez (buffer_toggle)
                        1'h0:
                            (* full_case = 32'd1 *)
                            casez ({ \$415 , \$403  })
                              2'b?1:
                                  \fsm_state$next  = 2'h1;
                              2'b1?:
                                  \fsm_state$next  = 2'h1;
                              default:
                                  \fsm_state$next  = 2'h0;
                            endcase
                        1'h?:
                            (* full_case = 32'd1 *)
                            casez ({ \$433 , \$421  })
                              2'b?1:
                                  \fsm_state$next  = 2'h1;
                              2'b1?:
                                  \fsm_state$next  = 2'h1;
                              default:
                                  \fsm_state$next  = 2'h0;
                            endcase
                      endcase
                  1'h?:
                      (* full_case = 32'd1 *)
                      casez (buffer_toggle)
                        1'h0:
                            (* full_case = 32'd1 *)
                            casez ({ \$459 , \$447  })
                              2'b?1:
                                  \fsm_state$next  = 2'h1;
                              2'b1?:
                                  \fsm_state$next  = 2'h1;
                              default:
                                  \fsm_state$next  = 2'h0;
                            endcase
                        1'h?:
                            (* full_case = 32'd1 *)
                            casez ({ \$477 , \$465  })
                              2'b?1:
                                  \fsm_state$next  = 2'h1;
                              2'b1?:
                                  \fsm_state$next  = 2'h1;
                              default:
                                  \fsm_state$next  = 2'h0;
                            endcase
                      endcase
                endcase
          endcase
          casez (new_token)
            1'h1:
                \fsm_state$next  = 2'h1;
          endcase
        end
    endcase
    casez (usb_rst)
      1'h1:
          \fsm_state$next  = 2'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \buffer_toggle$next  = buffer_toggle;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      2'h0:
          (* full_case = 32'd1 *)
          casez (buffer_toggle)
            1'h0:
                casez (\$485 )
                  1'h1:
                      casez (\$491 )
                        1'h1:
                            \buffer_toggle$next  = \$493 ;
                      endcase
                endcase
            1'h?:
                casez (\$501 )
                  1'h1:
                      casez (\$507 )
                        1'h1:
                            \buffer_toggle$next  = \$509 ;
                      endcase
                endcase
          endcase
      2'h1:
          /* empty */;
      2'h2:
          /* empty */;
      2'h3:
          casez (ack)
            1'h1:
                (* full_case = 32'd1 *)
                casez (\$511 )
                  1'h0:
                      (* full_case = 32'd1 *)
                      casez (buffer_toggle)
                        1'h0:
                            casez ({ \$537 , \$525  })
                              2'b?1:
                                  /* empty */;
                              2'b1?:
                                  \buffer_toggle$next  = 1'h0;
                            endcase
                        1'h?:
                            casez ({ \$555 , \$543  })
                              2'b?1:
                                  /* empty */;
                              2'b1?:
                                  \buffer_toggle$next  = 1'h0;
                            endcase
                      endcase
                  1'h?:
                      (* full_case = 32'd1 *)
                      casez (buffer_toggle)
                        1'h0:
                            casez ({ \$581 , \$569  })
                              2'b?1:
                                  /* empty */;
                              2'b1?:
                                  \buffer_toggle$next  = 1'h1;
                            endcase
                        1'h?:
                            casez ({ \$599 , \$587  })
                              2'b?1:
                                  /* empty */;
                              2'b1?:
                                  \buffer_toggle$next  = 1'h1;
                            endcase
                      endcase
                endcase
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \buffer_toggle$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \send_position$next  = send_position;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          \send_position$next  = 7'h00;
      2'h2:
          casez (\ready$4 )
            1'h1:
                \send_position$next  = \$602 [6:0];
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \send_position$next  = 7'h00;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \first$next  = first;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          casez (\$606 )
            1'h1:
                (* full_case = 32'd1 *)
                casez (\$609 )
                  1'h0:
                      casez (\$611 )
                        1'h1:
                            \first$next  = 1'h1;
                      endcase
                  1'h?:
                      casez (\$613 )
                        1'h1:
                            \first$next  = 1'h1;
                      endcase
                endcase
          endcase
      2'h2:
          casez (\ready$4 )
            1'h1:
                \first$next  = 1'h0;
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \first$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    (* full_case = 32'd1 *)
    casez (buffer_toggle)
      1'h0:
          transmit_buffer_0_w_addr = \$signal [5:0];
      1'h?:
          transmit_buffer_0_w_addr = \$signal$27 [5:0];
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \valid$1  = 1'h0;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          casez (\$617 )
            1'h1:
                (* full_case = 32'd1 *)
                casez (\$620 )
                  1'h0:
                      (* full_case = 32'd1 *)
                      casez (\$622 )
                        1'h1:
                            /* empty */;
                        default:
                            \valid$1  = 1'h1;
                      endcase
                  1'h?:
                      (* full_case = 32'd1 *)
                      casez (\$624 )
                        1'h1:
                            /* empty */;
                        default:
                            \valid$1  = 1'h1;
                      endcase
                endcase
          endcase
      2'h2:
          \valid$1  = 1'h1;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \last$2  = 1'h0;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          casez (\$628 )
            1'h1:
                (* full_case = 32'd1 *)
                casez (\$631 )
                  1'h0:
                      (* full_case = 32'd1 *)
                      casez (\$633 )
                        1'h1:
                            /* empty */;
                        default:
                            \last$2  = 1'h1;
                      endcase
                  1'h?:
                      (* full_case = 32'd1 *)
                      casez (\$635 )
                        1'h1:
                            /* empty */;
                        default:
                            \last$2  = 1'h1;
                      endcase
                endcase
          endcase
      2'h2:
          (* full_case = 32'd1 *)
          casez (\$639 )
            1'h0:
                \last$2  = \$643 ;
            1'h?:
                \last$2  = \$647 ;
          endcase
    endcase
  end
  always @* begin
    if (\initial ) begin end
    (* full_case = 32'd1 *)
    casez (buffer_toggle)
      1'h0:
          transmit_buffer_1_w_addr = \$signal [5:0];
      1'h?:
          transmit_buffer_1_w_addr = \$signal$27 [5:0];
    endcase
  end
  always @* begin
    if (\initial ) begin end
    transmit_buffer_0_r_addr = 6'h00;
    transmit_buffer_1_r_addr = 6'h00;
    (* full_case = 32'd1 *)
    casez (\$156 )
      1'h0:
          transmit_buffer_0_r_addr = send_position[5:0];
      1'h?:
          transmit_buffer_1_r_addr = send_position[5:0];
    endcase
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          casez (\ready$4 )
            1'h1:
                (* full_case = 32'd1 *)
                casez (\$161 )
                  1'h0:
                      transmit_buffer_0_r_addr = \$164 [5:0];
                  1'h?:
                      transmit_buffer_1_r_addr = \$167 [5:0];
                endcase
          endcase
    endcase
  end
  always @* begin
    if (\initial ) begin end
    (* full_case = 32'd1 *)
    casez (\$169 )
      1'h0:
          \payload$3  = transmit_buffer_0_r_data;
      1'h?:
          \payload$3  = transmit_buffer_1_r_data;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    (* full_case = 32'd1 *)
    casez (buffer_toggle)
      1'h0:
          ready = \$175 ;
      1'h?:
          ready = \$181 ;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    transmit_buffer_0_w_en = 1'h0;
    transmit_buffer_1_w_en = 1'h0;
    (* full_case = 32'd1 *)
    casez (buffer_toggle)
      1'h0:
          transmit_buffer_0_w_en = \$185 ;
      1'h?:
          transmit_buffer_1_w_en = \$187 ;
    endcase
  end
  assign \$151  = \$signal ;
  assign \$152  = \$signal$27 ;
  assign \$154  = \$signal ;
  assign \$155  = \$signal$27 ;
  assign \$158  = \$159 ;
  assign \$163  = \$164 ;
  assign \$166  = \$167 ;
  assign \$189  = \$190 ;
  assign \$192  = \$193 ;
  assign \$601  = \$602 ;
  assign reset_sequence = 1'h0;
  assign start_with_data1 = 1'h0;
  assign transmit_buffer_1_w_data = payload;
  assign transmit_buffer_0_w_data = payload;
  assign \$8  = 1'h1;
  assign \$7  = 2'h1;
  assign \$215  = 1'h1;
  assign \$231  = 1'h0;
  assign \$493  = 1'h1;
  assign \$509  = 1'h0;
endmodule

module \tx_manager$5 (usb_clk, generate_zlps, active, valid, last, payload, ready, \valid$1 , first, \last$2 , \payload$3 , \ready$4 , data_pid, new_token, ready_for_response, is_in, nak, ack, usb_rst);
  reg \initial  = 0;
  wire \$100 ;
  wire \$102 ;
  wire \$104 ;
  wire \$106 ;
  wire \$108 ;
  wire [7:0] \$11 ;
  wire \$110 ;
  wire \$112 ;
  wire [7:0] \$114 ;
  wire \$116 ;
  wire \$118 ;
  wire \$120 ;
  wire \$122 ;
  wire \$124 ;
  wire \$126 ;
  wire \$128 ;
  wire \$13 ;
  wire \$130 ;
  wire \$132 ;
  wire \$134 ;
  wire [7:0] \$136 ;
  wire \$138 ;
  wire \$140 ;
  wire \$142 ;
  wire \$144 ;
  wire \$146 ;
  wire \$148 ;
  wire \$15 ;
  wire [6:0] \$150 ;
  wire [6:0] \$151 ;
  wire [6:0] \$152 ;
  wire [6:0] \$153 ;
  wire [6:0] \$154 ;
  wire [6:0] \$155 ;
  wire \$156 ;
  wire [7:0] \$158 ;
  wire [7:0] \$159 ;
  wire \$161 ;
  wire [7:0] \$163 ;
  wire [7:0] \$164 ;
  wire [7:0] \$166 ;
  wire [7:0] \$167 ;
  wire \$169 ;
  wire \$17 ;
  wire \$171 ;
  wire \$173 ;
  wire \$175 ;
  wire \$177 ;
  wire \$179 ;
  wire \$181 ;
  wire \$183 ;
  wire \$185 ;
  wire \$187 ;
  wire [7:0] \$189 ;
  wire [7:0] \$19 ;
  wire [7:0] \$190 ;
  wire [7:0] \$192 ;
  wire [7:0] \$193 ;
  wire \$195 ;
  wire \$197 ;
  wire \$199 ;
  wire [7:0] \$201 ;
  wire \$203 ;
  wire \$205 ;
  wire \$207 ;
  wire [7:0] \$209 ;
  wire \$21 ;
  wire \$211 ;
  wire \$213 ;
  wire \$215 ;
  wire [7:0] \$217 ;
  wire \$219 ;
  wire \$221 ;
  wire \$223 ;
  wire [7:0] \$225 ;
  wire \$227 ;
  wire \$229 ;
  wire \$23 ;
  wire \$231 ;
  wire \$233 ;
  wire \$235 ;
  wire \$237 ;
  wire \$238 ;
  wire \$240 ;
  wire \$242 ;
  wire \$244 ;
  wire \$246 ;
  wire \$248 ;
  wire \$25 ;
  wire \$250 ;
  wire \$252 ;
  wire \$254 ;
  wire \$256 ;
  wire \$258 ;
  wire \$260 ;
  wire [7:0] \$262 ;
  wire \$264 ;
  wire \$266 ;
  wire \$268 ;
  wire \$270 ;
  wire \$272 ;
  wire \$274 ;
  wire \$276 ;
  wire \$278 ;
  wire [7:0] \$28 ;
  wire [7:0] \$280 ;
  wire \$282 ;
  wire \$284 ;
  wire \$286 ;
  wire \$288 ;
  wire \$290 ;
  wire \$292 ;
  wire \$294 ;
  wire \$296 ;
  wire \$298 ;
  wire \$30 ;
  wire \$300 ;
  wire \$302 ;
  wire \$304 ;
  wire [7:0] \$306 ;
  wire \$308 ;
  wire \$310 ;
  wire \$312 ;
  wire \$314 ;
  wire \$316 ;
  wire \$318 ;
  wire \$32 ;
  wire \$320 ;
  wire \$322 ;
  wire [7:0] \$324 ;
  wire \$326 ;
  wire \$328 ;
  wire \$330 ;
  wire \$332 ;
  wire \$334 ;
  wire \$336 ;
  wire [7:0] \$338 ;
  wire \$34 ;
  wire \$340 ;
  wire \$342 ;
  wire \$344 ;
  wire [7:0] \$346 ;
  wire \$348 ;
  wire \$350 ;
  wire [7:0] \$352 ;
  wire \$354 ;
  wire \$356 ;
  wire \$358 ;
  wire [7:0] \$36 ;
  wire [7:0] \$360 ;
  wire \$362 ;
  wire \$364 ;
  wire \$366 ;
  wire \$368 ;
  wire \$370 ;
  wire \$371 ;
  wire \$373 ;
  wire \$375 ;
  wire [7:0] \$377 ;
  wire \$379 ;
  wire \$38 ;
  wire [7:0] \$381 ;
  wire \$383 ;
  wire [7:0] \$385 ;
  wire \$387 ;
  wire \$389 ;
  wire \$391 ;
  wire \$393 ;
  wire \$395 ;
  wire \$397 ;
  wire \$399 ;
  wire \$40 ;
  wire \$401 ;
  wire \$403 ;
  wire \$405 ;
  wire [7:0] \$407 ;
  wire \$409 ;
  wire \$411 ;
  wire \$413 ;
  wire \$415 ;
  wire \$417 ;
  wire \$419 ;
  wire \$42 ;
  wire \$421 ;
  wire \$423 ;
  wire [7:0] \$425 ;
  wire \$427 ;
  wire \$429 ;
  wire \$431 ;
  wire \$433 ;
  wire \$435 ;
  wire \$437 ;
  wire \$439 ;
  wire \$44 ;
  wire \$441 ;
  wire \$443 ;
  wire \$445 ;
  wire \$447 ;
  wire \$449 ;
  wire [7:0] \$451 ;
  wire \$453 ;
  wire \$455 ;
  wire \$457 ;
  wire \$459 ;
  wire \$46 ;
  wire \$461 ;
  wire \$463 ;
  wire \$465 ;
  wire \$467 ;
  wire [7:0] \$469 ;
  wire \$471 ;
  wire \$473 ;
  wire \$475 ;
  wire \$477 ;
  wire [7:0] \$479 ;
  wire \$48 ;
  wire \$481 ;
  wire \$483 ;
  wire \$485 ;
  wire [7:0] \$487 ;
  wire \$489 ;
  wire \$491 ;
  wire \$493 ;
  wire [7:0] \$495 ;
  wire \$497 ;
  wire \$499 ;
  wire \$50 ;
  wire \$501 ;
  wire [7:0] \$503 ;
  wire \$505 ;
  wire \$507 ;
  wire \$509 ;
  wire \$511 ;
  wire \$513 ;
  wire \$515 ;
  wire \$517 ;
  wire \$519 ;
  wire \$52 ;
  wire \$521 ;
  wire \$523 ;
  wire \$525 ;
  wire \$527 ;
  wire [7:0] \$529 ;
  wire \$531 ;
  wire \$533 ;
  wire \$535 ;
  wire \$537 ;
  wire \$539 ;
  wire \$54 ;
  wire \$541 ;
  wire \$543 ;
  wire \$545 ;
  wire [7:0] \$547 ;
  wire \$549 ;
  wire \$551 ;
  wire \$553 ;
  wire \$555 ;
  wire \$557 ;
  wire \$559 ;
  wire \$56 ;
  wire \$561 ;
  wire \$563 ;
  wire \$565 ;
  wire \$567 ;
  wire \$569 ;
  wire \$571 ;
  wire [7:0] \$573 ;
  wire \$575 ;
  wire \$577 ;
  wire \$579 ;
  wire \$58 ;
  wire \$581 ;
  wire \$583 ;
  wire \$585 ;
  wire \$587 ;
  wire \$589 ;
  wire [7:0] \$591 ;
  wire \$593 ;
  wire \$595 ;
  wire \$597 ;
  wire \$599 ;
  wire \$60 ;
  wire [7:0] \$601 ;
  wire [7:0] \$602 ;
  wire \$604 ;
  wire \$606 ;
  wire \$608 ;
  wire \$609 ;
  wire \$611 ;
  wire \$613 ;
  wire \$615 ;
  wire \$617 ;
  wire \$619 ;
  wire [7:0] \$62 ;
  wire \$620 ;
  wire \$622 ;
  wire \$624 ;
  wire \$626 ;
  wire \$628 ;
  wire \$630 ;
  wire \$631 ;
  wire \$633 ;
  wire \$635 ;
  wire [7:0] \$637 ;
  wire \$639 ;
  wire \$64 ;
  wire [7:0] \$641 ;
  wire \$643 ;
  wire [7:0] \$645 ;
  wire \$647 ;
  wire \$66 ;
  wire \$68 ;
  wire [1:0] \$7 ;
  wire \$70 ;
  wire \$72 ;
  wire \$74 ;
  wire \$76 ;
  wire \$78 ;
  wire \$8 ;
  wire \$80 ;
  wire \$82 ;
  wire [7:0] \$84 ;
  wire \$86 ;
  wire \$88 ;
  wire \$90 ;
  wire \$92 ;
  wire \$94 ;
  wire \$96 ;
  wire \$98 ;
  reg [6:0] \$signal  = 7'h00;
  reg [6:0] \$signal$27  = 7'h00;
  reg [6:0] \$signal$27$next ;
  reg [6:0] \$signal$next ;
  input ack;
  input active;
  reg buffer_toggle = 1'h0;
  reg \buffer_toggle$next ;
  output [1:0] data_pid;
  reg [1:0] data_pid = 2'h1;
  reg [1:0] \data_pid$next ;
  output first;
  reg first = 1'h0;
  reg \first$next ;
  reg [1:0] fsm_state = 2'h0;
  reg [1:0] \fsm_state$next ;
  input generate_zlps;
  input is_in;
  input last;
  output \last$2 ;
  reg \last$2 ;
  output nak;
  reg nak;
  input new_token;
  input [7:0] payload;
  output [7:0] \payload$3 ;
  reg [7:0] \payload$3 ;
  output ready;
  reg ready;
  input \ready$4 ;
  input ready_for_response;
  wire reset_sequence;
  reg [6:0] send_position = 7'h00;
  reg [6:0] \send_position$next ;
  wire start_with_data1;
  reg stream_ended_in_buffer0 = 1'h0;
  reg \stream_ended_in_buffer0$next ;
  reg stream_ended_in_buffer1 = 1'h0;
  reg \stream_ended_in_buffer1$next ;
  reg [5:0] transmit_buffer_0_r_addr;
  wire [7:0] transmit_buffer_0_r_data;
  reg [5:0] transmit_buffer_0_w_addr;
  wire [7:0] transmit_buffer_0_w_data;
  reg transmit_buffer_0_w_en;
  reg [5:0] transmit_buffer_1_r_addr;
  wire [7:0] transmit_buffer_1_r_data;
  reg [5:0] transmit_buffer_1_w_addr;
  wire [7:0] transmit_buffer_1_w_data;
  reg transmit_buffer_1_w_en;
  input usb_clk;
  input usb_rst;
  input valid;
  output \valid$1 ;
  reg \valid$1 ;
  reg [7:0] transmit_buffer_0 [63:0];
  initial begin
    transmit_buffer_0[0] = 8'h00;
    transmit_buffer_0[1] = 8'h00;
    transmit_buffer_0[2] = 8'h00;
    transmit_buffer_0[3] = 8'h00;
    transmit_buffer_0[4] = 8'h00;
    transmit_buffer_0[5] = 8'h00;
    transmit_buffer_0[6] = 8'h00;
    transmit_buffer_0[7] = 8'h00;
    transmit_buffer_0[8] = 8'h00;
    transmit_buffer_0[9] = 8'h00;
    transmit_buffer_0[10] = 8'h00;
    transmit_buffer_0[11] = 8'h00;
    transmit_buffer_0[12] = 8'h00;
    transmit_buffer_0[13] = 8'h00;
    transmit_buffer_0[14] = 8'h00;
    transmit_buffer_0[15] = 8'h00;
    transmit_buffer_0[16] = 8'h00;
    transmit_buffer_0[17] = 8'h00;
    transmit_buffer_0[18] = 8'h00;
    transmit_buffer_0[19] = 8'h00;
    transmit_buffer_0[20] = 8'h00;
    transmit_buffer_0[21] = 8'h00;
    transmit_buffer_0[22] = 8'h00;
    transmit_buffer_0[23] = 8'h00;
    transmit_buffer_0[24] = 8'h00;
    transmit_buffer_0[25] = 8'h00;
    transmit_buffer_0[26] = 8'h00;
    transmit_buffer_0[27] = 8'h00;
    transmit_buffer_0[28] = 8'h00;
    transmit_buffer_0[29] = 8'h00;
    transmit_buffer_0[30] = 8'h00;
    transmit_buffer_0[31] = 8'h00;
    transmit_buffer_0[32] = 8'h00;
    transmit_buffer_0[33] = 8'h00;
    transmit_buffer_0[34] = 8'h00;
    transmit_buffer_0[35] = 8'h00;
    transmit_buffer_0[36] = 8'h00;
    transmit_buffer_0[37] = 8'h00;
    transmit_buffer_0[38] = 8'h00;
    transmit_buffer_0[39] = 8'h00;
    transmit_buffer_0[40] = 8'h00;
    transmit_buffer_0[41] = 8'h00;
    transmit_buffer_0[42] = 8'h00;
    transmit_buffer_0[43] = 8'h00;
    transmit_buffer_0[44] = 8'h00;
    transmit_buffer_0[45] = 8'h00;
    transmit_buffer_0[46] = 8'h00;
    transmit_buffer_0[47] = 8'h00;
    transmit_buffer_0[48] = 8'h00;
    transmit_buffer_0[49] = 8'h00;
    transmit_buffer_0[50] = 8'h00;
    transmit_buffer_0[51] = 8'h00;
    transmit_buffer_0[52] = 8'h00;
    transmit_buffer_0[53] = 8'h00;
    transmit_buffer_0[54] = 8'h00;
    transmit_buffer_0[55] = 8'h00;
    transmit_buffer_0[56] = 8'h00;
    transmit_buffer_0[57] = 8'h00;
    transmit_buffer_0[58] = 8'h00;
    transmit_buffer_0[59] = 8'h00;
    transmit_buffer_0[60] = 8'h00;
    transmit_buffer_0[61] = 8'h00;
    transmit_buffer_0[62] = 8'h00;
    transmit_buffer_0[63] = 8'h00;
  end
  always @(posedge usb_clk) begin
    if (transmit_buffer_0_w_en)
      transmit_buffer_0[transmit_buffer_0_w_addr] <= transmit_buffer_0_w_data;
  end
  reg [5:0] _0_;
  always @(posedge usb_clk) begin
    _0_ <= transmit_buffer_0_r_addr;
  end
  assign transmit_buffer_0_r_data = transmit_buffer_0[_0_];
  reg [7:0] transmit_buffer_1 [63:0];
  initial begin
    transmit_buffer_1[0] = 8'h00;
    transmit_buffer_1[1] = 8'h00;
    transmit_buffer_1[2] = 8'h00;
    transmit_buffer_1[3] = 8'h00;
    transmit_buffer_1[4] = 8'h00;
    transmit_buffer_1[5] = 8'h00;
    transmit_buffer_1[6] = 8'h00;
    transmit_buffer_1[7] = 8'h00;
    transmit_buffer_1[8] = 8'h00;
    transmit_buffer_1[9] = 8'h00;
    transmit_buffer_1[10] = 8'h00;
    transmit_buffer_1[11] = 8'h00;
    transmit_buffer_1[12] = 8'h00;
    transmit_buffer_1[13] = 8'h00;
    transmit_buffer_1[14] = 8'h00;
    transmit_buffer_1[15] = 8'h00;
    transmit_buffer_1[16] = 8'h00;
    transmit_buffer_1[17] = 8'h00;
    transmit_buffer_1[18] = 8'h00;
    transmit_buffer_1[19] = 8'h00;
    transmit_buffer_1[20] = 8'h00;
    transmit_buffer_1[21] = 8'h00;
    transmit_buffer_1[22] = 8'h00;
    transmit_buffer_1[23] = 8'h00;
    transmit_buffer_1[24] = 8'h00;
    transmit_buffer_1[25] = 8'h00;
    transmit_buffer_1[26] = 8'h00;
    transmit_buffer_1[27] = 8'h00;
    transmit_buffer_1[28] = 8'h00;
    transmit_buffer_1[29] = 8'h00;
    transmit_buffer_1[30] = 8'h00;
    transmit_buffer_1[31] = 8'h00;
    transmit_buffer_1[32] = 8'h00;
    transmit_buffer_1[33] = 8'h00;
    transmit_buffer_1[34] = 8'h00;
    transmit_buffer_1[35] = 8'h00;
    transmit_buffer_1[36] = 8'h00;
    transmit_buffer_1[37] = 8'h00;
    transmit_buffer_1[38] = 8'h00;
    transmit_buffer_1[39] = 8'h00;
    transmit_buffer_1[40] = 8'h00;
    transmit_buffer_1[41] = 8'h00;
    transmit_buffer_1[42] = 8'h00;
    transmit_buffer_1[43] = 8'h00;
    transmit_buffer_1[44] = 8'h00;
    transmit_buffer_1[45] = 8'h00;
    transmit_buffer_1[46] = 8'h00;
    transmit_buffer_1[47] = 8'h00;
    transmit_buffer_1[48] = 8'h00;
    transmit_buffer_1[49] = 8'h00;
    transmit_buffer_1[50] = 8'h00;
    transmit_buffer_1[51] = 8'h00;
    transmit_buffer_1[52] = 8'h00;
    transmit_buffer_1[53] = 8'h00;
    transmit_buffer_1[54] = 8'h00;
    transmit_buffer_1[55] = 8'h00;
    transmit_buffer_1[56] = 8'h00;
    transmit_buffer_1[57] = 8'h00;
    transmit_buffer_1[58] = 8'h00;
    transmit_buffer_1[59] = 8'h00;
    transmit_buffer_1[60] = 8'h00;
    transmit_buffer_1[61] = 8'h00;
    transmit_buffer_1[62] = 8'h00;
    transmit_buffer_1[63] = 8'h00;
  end
  always @(posedge usb_clk) begin
    if (transmit_buffer_1_w_en)
      transmit_buffer_1[transmit_buffer_1_w_addr] <= transmit_buffer_1_w_data;
  end
  reg [5:0] _1_;
  always @(posedge usb_clk) begin
    _1_ <= transmit_buffer_1_r_addr;
  end
  assign transmit_buffer_1_r_data = transmit_buffer_1[_1_];
  assign \$100  = generate_zlps & \$98 ;
  assign \$102  = \$100  & stream_ended_in_buffer1;
  assign \$104  = ~ ready;
  assign \$106  = \$signal$27  == 7'h40;
  assign \$108  = generate_zlps & \$106 ;
  assign \$110  = \$108  & stream_ended_in_buffer1;
  assign \$112  = ~ ready;
  assign \$114  = \$signal  + 1'h1;
  assign \$116  = \$114  == 7'h40;
  assign \$118  = \$116  | last;
  assign \$11  = \$signal  + 1'h1;
  assign \$120  = valid & \$118 ;
  assign \$122  = \$112  | \$120 ;
  assign \$124  = ~ data_pid[0];
  assign \$126  = ~ data_pid[0];
  assign \$128  = \$signal$27  == 7'h40;
  assign \$130  = generate_zlps & \$128 ;
  assign \$132  = \$130  & stream_ended_in_buffer1;
  assign \$134  = ~ ready;
  assign \$136  = \$signal$27  + 1'h1;
  assign \$138  = \$136  == 7'h40;
  assign \$13  = \$11  == 7'h40;
  assign \$140  = \$138  | last;
  assign \$142  = valid & \$140 ;
  assign \$144  = \$134  | \$142 ;
  assign \$146  = ~ data_pid[0];
  assign \$148  = ~ data_pid[0];
  assign \$156  = ~ buffer_toggle;
  assign \$15  = \$13  | last;
  assign \$159  = send_position + 1'h1;
  assign \$161  = ~ buffer_toggle;
  assign \$164  = send_position + 1'h1;
  assign \$167  = send_position + 1'h1;
  assign \$169  = ~ buffer_toggle;
  assign \$171  = \$signal  != 7'h40;
  assign \$173  = ~ stream_ended_in_buffer0;
  assign \$175  = \$171  & \$173 ;
  assign \$177  = \$signal$27  != 7'h40;
  assign \$17  = valid & \$15 ;
  assign \$179  = ~ stream_ended_in_buffer1;
  assign \$181  = \$177  & \$179 ;
  assign \$183  = valid & ready;
  assign \$185  = valid & ready;
  assign \$187  = valid & ready;
  assign \$190  = \$signal  + 1'h1;
  assign \$193  = \$signal$27  + 1'h1;
  assign \$195  = ~ buffer_toggle;
  assign \$197  = last & transmit_buffer_0_w_en;
  assign \$19  = \$signal  + 1'h1;
  assign \$199  = last & transmit_buffer_1_w_en;
  assign \$201  = \$signal  + 1'h1;
  assign \$203  = \$201  == 7'h40;
  assign \$205  = \$203  | last;
  assign \$207  = valid & \$205 ;
  assign \$209  = \$signal  + 1'h1;
  assign \$211  = \$209  == 7'h40;
  assign \$213  = \$211  | last;
  assign \$217  = \$signal$27  + 1'h1;
  assign \$21  = \$19  == 7'h40;
  assign \$219  = \$217  == 7'h40;
  assign \$221  = \$219  | last;
  assign \$223  = valid & \$221 ;
  assign \$225  = \$signal$27  + 1'h1;
  assign \$227  = \$225  == 7'h40;
  assign \$229  = \$227  | last;
  assign \$233  = active & is_in;
  assign \$235  = \$233  & ready_for_response;
  assign \$238  = ~ buffer_toggle;
  assign \$23  = \$21  | last;
  assign \$240  = | \$signal ;
  assign \$242  = | \$signal$27 ;
  assign \$244  = ~ buffer_toggle;
  assign \$246  = \$signal  == 7'h40;
  assign \$248  = generate_zlps & \$246 ;
  assign \$250  = \$248  & stream_ended_in_buffer0;
  assign \$252  = ~ ready;
  assign \$254  = \$signal  == 7'h40;
  assign \$256  = generate_zlps & \$254 ;
  assign \$258  = \$256  & stream_ended_in_buffer0;
  assign \$25  = ~ data_pid[0];
  assign \$260  = ~ ready;
  assign \$262  = \$signal  + 1'h1;
  assign \$264  = \$262  == 7'h40;
  assign \$266  = \$264  | last;
  assign \$268  = valid & \$266 ;
  assign \$270  = \$260  | \$268 ;
  assign \$272  = \$signal  == 7'h40;
  assign \$274  = generate_zlps & \$272 ;
  assign \$276  = \$274  & stream_ended_in_buffer0;
  assign \$278  = ~ ready;
  assign \$280  = \$signal$27  + 1'h1;
  assign \$282  = \$280  == 7'h40;
  assign \$284  = \$282  | last;
  assign \$286  = valid & \$284 ;
  assign \$288  = \$278  | \$286 ;
  assign \$28  = \$signal$27  + 1'h1;
  assign \$290  = \$signal$27  == 7'h40;
  assign \$292  = generate_zlps & \$290 ;
  assign \$294  = \$292  & stream_ended_in_buffer1;
  assign \$296  = ~ ready;
  assign \$298  = \$signal$27  == 7'h40;
  assign \$300  = generate_zlps & \$298 ;
  assign \$302  = \$300  & stream_ended_in_buffer1;
  assign \$304  = ~ ready;
  assign \$306  = \$signal  + 1'h1;
  assign \$308  = \$306  == 7'h40;
  assign \$30  = \$28  == 7'h40;
  assign \$310  = \$308  | last;
  assign \$312  = valid & \$310 ;
  assign \$314  = \$304  | \$312 ;
  assign \$316  = \$signal$27  == 7'h40;
  assign \$318  = generate_zlps & \$316 ;
  assign \$320  = \$318  & stream_ended_in_buffer1;
  assign \$322  = ~ ready;
  assign \$324  = \$signal$27  + 1'h1;
  assign \$326  = \$324  == 7'h40;
  assign \$328  = \$326  | last;
  assign \$32  = \$30  | last;
  assign \$330  = valid & \$328 ;
  assign \$332  = \$322  | \$330 ;
  assign \$334  = active & is_in;
  assign \$336  = \$334  & ready_for_response;
  assign \$338  = \$signal  + 1'h1;
  assign \$340  = \$338  == 7'h40;
  assign \$342  = \$340  | last;
  assign \$344  = valid & \$342 ;
  assign \$346  = \$signal  + 1'h1;
  assign \$348  = \$346  == 7'h40;
  assign \$34  = valid & \$32 ;
  assign \$350  = \$348  | last;
  assign \$352  = \$signal$27  + 1'h1;
  assign \$354  = \$352  == 7'h40;
  assign \$356  = \$354  | last;
  assign \$358  = valid & \$356 ;
  assign \$360  = \$signal$27  + 1'h1;
  assign \$362  = \$360  == 7'h40;
  assign \$364  = \$362  | last;
  assign \$366  = active & is_in;
  assign \$368  = \$366  & ready_for_response;
  assign \$36  = \$signal$27  + 1'h1;
  assign \$371  = ~ buffer_toggle;
  assign \$373  = | \$signal ;
  assign \$375  = | \$signal$27 ;
  assign \$377  = send_position + 1'h1;
  assign \$379  = ~ buffer_toggle;
  assign \$381  = send_position + 1'h1;
  assign \$383  = \$381  == \$signal ;
  assign \$385  = send_position + 1'h1;
  assign \$387  = \$385  == \$signal$27 ;
  assign \$38  = \$36  == 7'h40;
  assign \$389  = ~ buffer_toggle;
  assign \$391  = \$signal  == 7'h40;
  assign \$393  = generate_zlps & \$391 ;
  assign \$395  = \$393  & stream_ended_in_buffer0;
  assign \$397  = ~ ready;
  assign \$399  = \$signal  == 7'h40;
  assign \$401  = generate_zlps & \$399 ;
  assign \$403  = \$401  & stream_ended_in_buffer0;
  assign \$405  = ~ ready;
  assign \$407  = \$signal  + 1'h1;
  assign \$40  = \$38  | last;
  assign \$409  = \$407  == 7'h40;
  assign \$411  = \$409  | last;
  assign \$413  = valid & \$411 ;
  assign \$415  = \$405  | \$413 ;
  assign \$417  = \$signal  == 7'h40;
  assign \$419  = generate_zlps & \$417 ;
  assign \$421  = \$419  & stream_ended_in_buffer0;
  assign \$423  = ~ ready;
  assign \$425  = \$signal$27  + 1'h1;
  assign \$427  = \$425  == 7'h40;
  assign \$42  = ~ data_pid[0];
  assign \$429  = \$427  | last;
  assign \$431  = valid & \$429 ;
  assign \$433  = \$423  | \$431 ;
  assign \$435  = \$signal$27  == 7'h40;
  assign \$437  = generate_zlps & \$435 ;
  assign \$439  = \$437  & stream_ended_in_buffer1;
  assign \$441  = ~ ready;
  assign \$443  = \$signal$27  == 7'h40;
  assign \$445  = generate_zlps & \$443 ;
  assign \$447  = \$445  & stream_ended_in_buffer1;
  assign \$44  = ~ buffer_toggle;
  assign \$449  = ~ ready;
  assign \$451  = \$signal  + 1'h1;
  assign \$453  = \$451  == 7'h40;
  assign \$455  = \$453  | last;
  assign \$457  = valid & \$455 ;
  assign \$459  = \$449  | \$457 ;
  assign \$461  = \$signal$27  == 7'h40;
  assign \$463  = generate_zlps & \$461 ;
  assign \$465  = \$463  & stream_ended_in_buffer1;
  assign \$467  = ~ ready;
  assign \$46  = \$signal  == 7'h40;
  assign \$469  = \$signal$27  + 1'h1;
  assign \$471  = \$469  == 7'h40;
  assign \$473  = \$471  | last;
  assign \$475  = valid & \$473 ;
  assign \$477  = \$467  | \$475 ;
  assign \$479  = \$signal  + 1'h1;
  assign \$481  = \$479  == 7'h40;
  assign \$483  = \$481  | last;
  assign \$485  = valid & \$483 ;
  assign \$487  = \$signal  + 1'h1;
  assign \$48  = generate_zlps & \$46 ;
  assign \$489  = \$487  == 7'h40;
  assign \$491  = \$489  | last;
  assign \$495  = \$signal$27  + 1'h1;
  assign \$497  = \$495  == 7'h40;
  assign \$499  = \$497  | last;
  assign \$501  = valid & \$499 ;
  assign \$503  = \$signal$27  + 1'h1;
  assign \$505  = \$503  == 7'h40;
  assign \$507  = \$505  | last;
  assign \$50  = \$48  & stream_ended_in_buffer0;
  assign \$511  = ~ buffer_toggle;
  assign \$513  = \$signal  == 7'h40;
  assign \$515  = generate_zlps & \$513 ;
  assign \$517  = \$515  & stream_ended_in_buffer0;
  assign \$519  = ~ ready;
  assign \$521  = \$signal  == 7'h40;
  assign \$523  = generate_zlps & \$521 ;
  assign \$525  = \$523  & stream_ended_in_buffer0;
  assign \$527  = ~ ready;
  assign \$52  = ~ ready;
  assign \$529  = \$signal  + 1'h1;
  assign \$531  = \$529  == 7'h40;
  assign \$533  = \$531  | last;
  assign \$535  = valid & \$533 ;
  assign \$537  = \$527  | \$535 ;
  assign \$539  = \$signal  == 7'h40;
  assign \$541  = generate_zlps & \$539 ;
  assign \$543  = \$541  & stream_ended_in_buffer0;
  assign \$545  = ~ ready;
  assign \$547  = \$signal$27  + 1'h1;
  assign \$54  = \$signal  == 7'h40;
  assign \$549  = \$547  == 7'h40;
  assign \$551  = \$549  | last;
  assign \$553  = valid & \$551 ;
  assign \$555  = \$545  | \$553 ;
  assign \$557  = \$signal$27  == 7'h40;
  assign \$559  = generate_zlps & \$557 ;
  assign \$561  = \$559  & stream_ended_in_buffer1;
  assign \$563  = ~ ready;
  assign \$565  = \$signal$27  == 7'h40;
  assign \$567  = generate_zlps & \$565 ;
  assign \$56  = generate_zlps & \$54 ;
  assign \$569  = \$567  & stream_ended_in_buffer1;
  assign \$571  = ~ ready;
  assign \$573  = \$signal  + 1'h1;
  assign \$575  = \$573  == 7'h40;
  assign \$577  = \$575  | last;
  assign \$579  = valid & \$577 ;
  assign \$581  = \$571  | \$579 ;
  assign \$583  = \$signal$27  == 7'h40;
  assign \$585  = generate_zlps & \$583 ;
  assign \$587  = \$585  & stream_ended_in_buffer1;
  assign \$58  = \$56  & stream_ended_in_buffer0;
  assign \$589  = ~ ready;
  assign \$591  = \$signal$27  + 1'h1;
  assign \$593  = \$591  == 7'h40;
  assign \$595  = \$593  | last;
  assign \$597  = valid & \$595 ;
  assign \$599  = \$589  | \$597 ;
  assign \$602  = send_position + 1'h1;
  assign \$604  = active & is_in;
  assign \$606  = \$604  & ready_for_response;
  assign \$60  = ~ ready;
  assign \$609  = ~ buffer_toggle;
  assign \$611  = | \$signal ;
  assign \$613  = | \$signal$27 ;
  assign \$615  = active & is_in;
  assign \$617  = \$615  & ready_for_response;
  assign \$620  = ~ buffer_toggle;
  assign \$622  = | \$signal ;
  assign \$624  = | \$signal$27 ;
  assign \$626  = active & is_in;
  assign \$628  = \$626  & ready_for_response;
  assign \$62  = \$signal  + 1'h1;
  assign \$631  = ~ buffer_toggle;
  assign \$633  = | \$signal ;
  assign \$635  = | \$signal$27 ;
  assign \$637  = send_position + 1'h1;
  assign \$639  = ~ buffer_toggle;
  assign \$641  = send_position + 1'h1;
  assign \$643  = \$641  == \$signal ;
  assign \$645  = send_position + 1'h1;
  assign \$647  = \$645  == \$signal$27 ;
  assign \$64  = \$62  == 7'h40;
  assign \$66  = \$64  | last;
  assign \$68  = valid & \$66 ;
  assign \$70  = \$60  | \$68 ;
  assign \$72  = ~ data_pid[0];
  assign \$74  = ~ data_pid[0];
  assign \$76  = \$signal  == 7'h40;
  assign \$78  = generate_zlps & \$76 ;
  assign \$80  = \$78  & stream_ended_in_buffer0;
  assign \$82  = ~ ready;
  assign \$84  = \$signal$27  + 1'h1;
  assign \$86  = \$84  == 7'h40;
  assign \$88  = \$86  | last;
  assign \$90  = valid & \$88 ;
  assign \$92  = \$82  | \$90 ;
  assign \$94  = ~ data_pid[0];
  assign \$96  = ~ data_pid[0];
  assign \$98  = \$signal$27  == 7'h40;
  always @(posedge usb_clk)
    stream_ended_in_buffer1 <= \stream_ended_in_buffer1$next ;
  always @(posedge usb_clk)
    \$signal  <= \$signal$next ;
  always @(posedge usb_clk)
    \$signal$27  <= \$signal$27$next ;
  always @(posedge usb_clk)
    data_pid <= \data_pid$next ;
  always @(posedge usb_clk)
    first <= \first$next ;
  always @(posedge usb_clk)
    send_position <= \send_position$next ;
  always @(posedge usb_clk)
    buffer_toggle <= \buffer_toggle$next ;
  always @(posedge usb_clk)
    fsm_state <= \fsm_state$next ;
  always @(posedge usb_clk)
    stream_ended_in_buffer0 <= \stream_ended_in_buffer0$next ;
  always @* begin
    if (\initial ) begin end
    \data_pid$next  = data_pid;
    casez (reset_sequence)
      1'h1:
          \data_pid$next  = \$7 ;
    endcase
    (* full_case = 32'd1 *)
    casez (fsm_state)
      2'h0:
          (* full_case = 32'd1 *)
          casez (buffer_toggle)
            1'h0:
                casez (\$17 )
                  1'h1:
                      casez (\$23 )
                        1'h1:
                            \data_pid$next [0] = \$25 ;
                      endcase
                endcase
            1'h?:
                casez (\$34 )
                  1'h1:
                      casez (\$40 )
                        1'h1:
                            \data_pid$next [0] = \$42 ;
                      endcase
                endcase
          endcase
      2'h1:
          /* empty */;
      2'h2:
          /* empty */;
      2'h3:
          casez (ack)
            1'h1:
                (* full_case = 32'd1 *)
                casez (\$44 )
                  1'h0:
                      (* full_case = 32'd1 *)
                      casez (buffer_toggle)
                        1'h0:
                            casez ({ \$70 , \$58  })
                              2'b?1:
                                  \data_pid$next [0] = \$72 ;
                              2'b1?:
                                  \data_pid$next [0] = \$74 ;
                            endcase
                        1'h?:
                            casez ({ \$92 , \$80  })
                              2'b?1:
                                  \data_pid$next [0] = \$94 ;
                              2'b1?:
                                  \data_pid$next [0] = \$96 ;
                            endcase
                      endcase
                  1'h?:
                      (* full_case = 32'd1 *)
                      casez (buffer_toggle)
                        1'h0:
                            casez ({ \$122 , \$110  })
                              2'b?1:
                                  \data_pid$next [0] = \$124 ;
                              2'b1?:
                                  \data_pid$next [0] = \$126 ;
                            endcase
                        1'h?:
                            casez ({ \$144 , \$132  })
                              2'b?1:
                                  \data_pid$next [0] = \$146 ;
                              2'b1?:
                                  \data_pid$next [0] = \$148 ;
                            endcase
                      endcase
                endcase
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \data_pid$next  = 2'h1;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \$signal$next  = \$signal ;
    \$signal$27$next  = \$signal$27 ;
    (* full_case = 32'd1 *)
    casez (buffer_toggle)
      1'h0:
          casez (transmit_buffer_0_w_en)
            1'h1:
                \$signal$next  = \$190 [6:0];
          endcase
      1'h?:
          casez (transmit_buffer_1_w_en)
            1'h1:
                \$signal$27$next  = \$193 [6:0];
          endcase
    endcase
    (* full_case = 32'd1 *)
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          /* empty */;
      2'h3:
          casez (ack)
            1'h1:
                (* full_case = 32'd1 *)
                casez (\$195 )
                  1'h0:
                      \$signal$next  = 7'h00;
                  1'h?:
                      \$signal$27$next  = 7'h00;
                endcase
          endcase
    endcase
    casez (usb_rst)
      1'h1:
        begin
          \$signal$next  = 7'h00;
          \$signal$27$next  = 7'h00;
        end
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \stream_ended_in_buffer0$next  = stream_ended_in_buffer0;
    \stream_ended_in_buffer1$next  = stream_ended_in_buffer1;
    (* full_case = 32'd1 *)
    casez (buffer_toggle)
      1'h0:
          casez (\$197 )
            1'h1:
                \stream_ended_in_buffer0$next  = 1'h1;
          endcase
      1'h?:
          casez (\$199 )
            1'h1:
                \stream_ended_in_buffer1$next  = 1'h1;
          endcase
    endcase
    (* full_case = 32'd1 *)
    casez (fsm_state)
      2'h0:
          (* full_case = 32'd1 *)
          casez (buffer_toggle)
            1'h0:
                casez (\$207 )
                  1'h1:
                      casez (\$213 )
                        1'h1:
                            (* full_case = 32'd1 *)
                            casez (\$215 )
                              1'h0:
                                  \stream_ended_in_buffer0$next  = 1'h0;
                              1'h?:
                                  \stream_ended_in_buffer1$next  = 1'h0;
                            endcase
                      endcase
                endcase
            1'h?:
                casez (\$223 )
                  1'h1:
                      casez (\$229 )
                        1'h1:
                            (* full_case = 32'd1 *)
                            casez (\$231 )
                              1'h0:
                                  \stream_ended_in_buffer0$next  = 1'h0;
                              1'h?:
                                  \stream_ended_in_buffer1$next  = 1'h0;
                            endcase
                      endcase
                endcase
          endcase
      2'h1:
          casez (\$235 )
            1'h1:
                (* full_case = 32'd1 *)
                casez (\$238 )
                  1'h0:
                      (* full_case = 32'd1 *)
                      casez (\$240 )
                        1'h1:
                            /* empty */;
                        default:
                            \stream_ended_in_buffer0$next  = 1'h0;
                      endcase
                  1'h?:
                      (* full_case = 32'd1 *)
                      casez (\$242 )
                        1'h1:
                            /* empty */;
                        default:
                            \stream_ended_in_buffer1$next  = 1'h0;
                      endcase
                endcase
          endcase
      2'h2:
          /* empty */;
      2'h3:
          casez (ack)
            1'h1:
                (* full_case = 32'd1 *)
                casez (\$244 )
                  1'h0:
                      (* full_case = 32'd1 *)
                      casez (buffer_toggle)
                        1'h0:
                            casez ({ \$270 , \$258  })
                              2'b?1:
                                  /* empty */;
                              2'b1?:
                                  \stream_ended_in_buffer0$next  = 1'h0;
                            endcase
                        1'h?:
                            casez ({ \$288 , \$276  })
                              2'b?1:
                                  /* empty */;
                              2'b1?:
                                  \stream_ended_in_buffer0$next  = 1'h0;
                            endcase
                      endcase
                  1'h?:
                      (* full_case = 32'd1 *)
                      casez (buffer_toggle)
                        1'h0:
                            casez ({ \$314 , \$302  })
                              2'b?1:
                                  /* empty */;
                              2'b1?:
                                  \stream_ended_in_buffer1$next  = 1'h0;
                            endcase
                        1'h?:
                            casez ({ \$332 , \$320  })
                              2'b?1:
                                  /* empty */;
                              2'b1?:
                                  \stream_ended_in_buffer1$next  = 1'h0;
                            endcase
                      endcase
                endcase
          endcase
    endcase
    casez (usb_rst)
      1'h1:
        begin
          \stream_ended_in_buffer0$next  = 1'h0;
          \stream_ended_in_buffer1$next  = 1'h0;
        end
    endcase
  end
  always @* begin
    if (\initial ) begin end
    nak = 1'h0;
    casez (fsm_state)
      2'h0:
          nak = \$336 ;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \fsm_state$next  = fsm_state;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      2'h0:
          (* full_case = 32'd1 *)
          casez (buffer_toggle)
            1'h0:
                casez (\$344 )
                  1'h1:
                      casez (\$350 )
                        1'h1:
                            \fsm_state$next  = 2'h1;
                      endcase
                endcase
            1'h?:
                casez (\$358 )
                  1'h1:
                      casez (\$364 )
                        1'h1:
                            \fsm_state$next  = 2'h1;
                      endcase
                endcase
          endcase
      2'h1:
          casez (\$368 )
            1'h1:
                (* full_case = 32'd1 *)
                casez (\$371 )
                  1'h0:
                      (* full_case = 32'd1 *)
                      casez (\$373 )
                        1'h1:
                            \fsm_state$next  = 2'h2;
                        default:
                            \fsm_state$next  = 2'h3;
                      endcase
                  1'h?:
                      (* full_case = 32'd1 *)
                      casez (\$375 )
                        1'h1:
                            \fsm_state$next  = 2'h2;
                        default:
                            \fsm_state$next  = 2'h3;
                      endcase
                endcase
          endcase
      2'h2:
          casez (\ready$4 )
            1'h1:
                (* full_case = 32'd1 *)
                casez (\$379 )
                  1'h0:
                      casez (\$383 )
                        1'h1:
                            \fsm_state$next  = 2'h3;
                      endcase
                  1'h?:
                      casez (\$387 )
                        1'h1:
                            \fsm_state$next  = 2'h3;
                      endcase
                endcase
          endcase
      2'h3:
        begin
          casez (ack)
            1'h1:
                (* full_case = 32'd1 *)
                casez (\$389 )
                  1'h0:
                      (* full_case = 32'd1 *)
                      casez (buffer_toggle)
                        1'h0:
                            (* full_case = 32'd1 *)
                            casez ({ \$415 , \$403  })
                              2'b?1:
                                  \fsm_state$next  = 2'h1;
                              2'b1?:
                                  \fsm_state$next  = 2'h1;
                              default:
                                  \fsm_state$next  = 2'h0;
                            endcase
                        1'h?:
                            (* full_case = 32'd1 *)
                            casez ({ \$433 , \$421  })
                              2'b?1:
                                  \fsm_state$next  = 2'h1;
                              2'b1?:
                                  \fsm_state$next  = 2'h1;
                              default:
                                  \fsm_state$next  = 2'h0;
                            endcase
                      endcase
                  1'h?:
                      (* full_case = 32'd1 *)
                      casez (buffer_toggle)
                        1'h0:
                            (* full_case = 32'd1 *)
                            casez ({ \$459 , \$447  })
                              2'b?1:
                                  \fsm_state$next  = 2'h1;
                              2'b1?:
                                  \fsm_state$next  = 2'h1;
                              default:
                                  \fsm_state$next  = 2'h0;
                            endcase
                        1'h?:
                            (* full_case = 32'd1 *)
                            casez ({ \$477 , \$465  })
                              2'b?1:
                                  \fsm_state$next  = 2'h1;
                              2'b1?:
                                  \fsm_state$next  = 2'h1;
                              default:
                                  \fsm_state$next  = 2'h0;
                            endcase
                      endcase
                endcase
          endcase
          casez (new_token)
            1'h1:
                \fsm_state$next  = 2'h1;
          endcase
        end
    endcase
    casez (usb_rst)
      1'h1:
          \fsm_state$next  = 2'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \buffer_toggle$next  = buffer_toggle;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      2'h0:
          (* full_case = 32'd1 *)
          casez (buffer_toggle)
            1'h0:
                casez (\$485 )
                  1'h1:
                      casez (\$491 )
                        1'h1:
                            \buffer_toggle$next  = \$493 ;
                      endcase
                endcase
            1'h?:
                casez (\$501 )
                  1'h1:
                      casez (\$507 )
                        1'h1:
                            \buffer_toggle$next  = \$509 ;
                      endcase
                endcase
          endcase
      2'h1:
          /* empty */;
      2'h2:
          /* empty */;
      2'h3:
          casez (ack)
            1'h1:
                (* full_case = 32'd1 *)
                casez (\$511 )
                  1'h0:
                      (* full_case = 32'd1 *)
                      casez (buffer_toggle)
                        1'h0:
                            casez ({ \$537 , \$525  })
                              2'b?1:
                                  /* empty */;
                              2'b1?:
                                  \buffer_toggle$next  = 1'h0;
                            endcase
                        1'h?:
                            casez ({ \$555 , \$543  })
                              2'b?1:
                                  /* empty */;
                              2'b1?:
                                  \buffer_toggle$next  = 1'h0;
                            endcase
                      endcase
                  1'h?:
                      (* full_case = 32'd1 *)
                      casez (buffer_toggle)
                        1'h0:
                            casez ({ \$581 , \$569  })
                              2'b?1:
                                  /* empty */;
                              2'b1?:
                                  \buffer_toggle$next  = 1'h1;
                            endcase
                        1'h?:
                            casez ({ \$599 , \$587  })
                              2'b?1:
                                  /* empty */;
                              2'b1?:
                                  \buffer_toggle$next  = 1'h1;
                            endcase
                      endcase
                endcase
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \buffer_toggle$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \send_position$next  = send_position;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          \send_position$next  = 7'h00;
      2'h2:
          casez (\ready$4 )
            1'h1:
                \send_position$next  = \$602 [6:0];
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \send_position$next  = 7'h00;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \first$next  = first;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          casez (\$606 )
            1'h1:
                (* full_case = 32'd1 *)
                casez (\$609 )
                  1'h0:
                      casez (\$611 )
                        1'h1:
                            \first$next  = 1'h1;
                      endcase
                  1'h?:
                      casez (\$613 )
                        1'h1:
                            \first$next  = 1'h1;
                      endcase
                endcase
          endcase
      2'h2:
          casez (\ready$4 )
            1'h1:
                \first$next  = 1'h0;
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \first$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    (* full_case = 32'd1 *)
    casez (buffer_toggle)
      1'h0:
          transmit_buffer_0_w_addr = \$signal [5:0];
      1'h?:
          transmit_buffer_0_w_addr = \$signal$27 [5:0];
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \valid$1  = 1'h0;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          casez (\$617 )
            1'h1:
                (* full_case = 32'd1 *)
                casez (\$620 )
                  1'h0:
                      (* full_case = 32'd1 *)
                      casez (\$622 )
                        1'h1:
                            /* empty */;
                        default:
                            \valid$1  = 1'h1;
                      endcase
                  1'h?:
                      (* full_case = 32'd1 *)
                      casez (\$624 )
                        1'h1:
                            /* empty */;
                        default:
                            \valid$1  = 1'h1;
                      endcase
                endcase
          endcase
      2'h2:
          \valid$1  = 1'h1;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \last$2  = 1'h0;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          casez (\$628 )
            1'h1:
                (* full_case = 32'd1 *)
                casez (\$631 )
                  1'h0:
                      (* full_case = 32'd1 *)
                      casez (\$633 )
                        1'h1:
                            /* empty */;
                        default:
                            \last$2  = 1'h1;
                      endcase
                  1'h?:
                      (* full_case = 32'd1 *)
                      casez (\$635 )
                        1'h1:
                            /* empty */;
                        default:
                            \last$2  = 1'h1;
                      endcase
                endcase
          endcase
      2'h2:
          (* full_case = 32'd1 *)
          casez (\$639 )
            1'h0:
                \last$2  = \$643 ;
            1'h?:
                \last$2  = \$647 ;
          endcase
    endcase
  end
  always @* begin
    if (\initial ) begin end
    (* full_case = 32'd1 *)
    casez (buffer_toggle)
      1'h0:
          transmit_buffer_1_w_addr = \$signal [5:0];
      1'h?:
          transmit_buffer_1_w_addr = \$signal$27 [5:0];
    endcase
  end
  always @* begin
    if (\initial ) begin end
    transmit_buffer_0_r_addr = 6'h00;
    transmit_buffer_1_r_addr = 6'h00;
    (* full_case = 32'd1 *)
    casez (\$156 )
      1'h0:
          transmit_buffer_0_r_addr = send_position[5:0];
      1'h?:
          transmit_buffer_1_r_addr = send_position[5:0];
    endcase
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          casez (\ready$4 )
            1'h1:
                (* full_case = 32'd1 *)
                casez (\$161 )
                  1'h0:
                      transmit_buffer_0_r_addr = \$164 [5:0];
                  1'h?:
                      transmit_buffer_1_r_addr = \$167 [5:0];
                endcase
          endcase
    endcase
  end
  always @* begin
    if (\initial ) begin end
    (* full_case = 32'd1 *)
    casez (\$169 )
      1'h0:
          \payload$3  = transmit_buffer_0_r_data;
      1'h?:
          \payload$3  = transmit_buffer_1_r_data;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    (* full_case = 32'd1 *)
    casez (buffer_toggle)
      1'h0:
          ready = \$175 ;
      1'h?:
          ready = \$181 ;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    transmit_buffer_0_w_en = 1'h0;
    transmit_buffer_1_w_en = 1'h0;
    (* full_case = 32'd1 *)
    casez (buffer_toggle)
      1'h0:
          transmit_buffer_0_w_en = \$185 ;
      1'h?:
          transmit_buffer_1_w_en = \$187 ;
    endcase
  end
  assign \$151  = \$signal ;
  assign \$152  = \$signal$27 ;
  assign \$154  = \$signal ;
  assign \$155  = \$signal$27 ;
  assign \$158  = \$159 ;
  assign \$163  = \$164 ;
  assign \$166  = \$167 ;
  assign \$189  = \$190 ;
  assign \$192  = \$193 ;
  assign \$601  = \$602 ;
  assign reset_sequence = 1'h0;
  assign start_with_data1 = 1'h0;
  assign transmit_buffer_1_w_data = payload;
  assign transmit_buffer_0_w_data = payload;
  assign \$8  = 1'h1;
  assign \$7  = 2'h1;
  assign \$215  = 1'h1;
  assign \$231  = 1'h0;
  assign \$493  = 1'h1;
  assign \$509  = 1'h0;
endmodule

module tx_multiplexer(valid, ready, \valid$1 , \data$2 , \data$3 , \valid$4 , \ready$5 , \valid$6 , \data$7 , \ready$8 , data);
  reg \initial  = 0;
  wire \$11 ;
  wire \$13 ;
  wire \$9 ;
  output [7:0] data;
  reg [7:0] data;
  input [7:0] \data$2 ;
  input [7:0] \data$3 ;
  input [7:0] \data$7 ;
  wire [2:0] encoder_i;
  wire [1:0] encoder_o;
  input ready;
  wire \ready$15 ;
  output \ready$5 ;
  output \ready$8 ;
  output valid;
  input \valid$1 ;
  input \valid$4 ;
  input \valid$6 ;
  assign \$11  = \$9  | \valid$4 ;
  assign \$13  = \$11  | \valid$6 ;
  \encoder$6  encoder (
    .i(encoder_i),
    .o(encoder_o)
  );
  always @* begin
    if (\initial ) begin end
    data = 8'h00;
    casez (encoder_o)
      2'h0:
          data = \data$2 ;
      2'h1:
          data = \data$3 ;
      2'h2:
          data = \data$7 ;
    endcase
  end
  assign \ready$8  = ready;
  assign \ready$5  = ready;
  assign \ready$15  = ready;
  assign valid = \$13 ;
  assign encoder_i[2] = \valid$6 ;
  assign encoder_i[1] = \valid$4 ;
  assign encoder_i[0] = \valid$1 ;
  assign \$9  = \valid$1 ;
endmodule

module tx_mux(first, last, payload, ready, \valid$1 , \valid$2 , \valid$3 , \valid$4 , \payload$5 , \payload$6 , \payload$7 , \first$8 , \first$9 , \first$10 , \last$11 , \last$12 , \last$13 , \ready$14 , \ready$15 , \ready$16 , valid);
  reg \initial  = 0;
  wire \$18 ;
  wire \$20 ;
  wire \$22 ;
  wire \$24 ;
  wire \$26 ;
  wire \$28 ;
  wire \$31 ;
  wire \$33 ;
  wire \$35 ;
  wire \$37 ;
  wire \$40 ;
  wire \$42 ;
  wire [3:0] encoder_i;
  wire [1:0] encoder_o;
  output first;
  input \first$10 ;
  wire \first$30 ;
  input \first$8 ;
  input \first$9 ;
  output last;
  input \last$11 ;
  input \last$12 ;
  input \last$13 ;
  wire \last$39 ;
  output [7:0] payload;
  reg [7:0] payload;
  wire [7:0] \payload$17 ;
  input [7:0] \payload$5 ;
  input [7:0] \payload$6 ;
  input [7:0] \payload$7 ;
  input ready;
  output \ready$14 ;
  output \ready$15 ;
  output \ready$16 ;
  wire \ready$44 ;
  output valid;
  input \valid$1 ;
  input \valid$2 ;
  input \valid$3 ;
  input \valid$4 ;
  assign \$20  = \$18  | \valid$2 ;
  assign \$22  = \$20  | \valid$3 ;
  assign \$24  = \$22  | \valid$4 ;
  assign \$28  = \$26  | \first$9 ;
  assign \$33  = \$31  | \first$10 ;
  assign \$37  = \$35  | \last$12 ;
  assign \$42  = \$40  | \last$13 ;
  encoder encoder (
    .i(encoder_i),
    .o(encoder_o)
  );
  always @* begin
    if (\initial ) begin end
    (* full_case = 32'd1 *)
    casez (encoder_o)
      2'h0:
          payload = \payload$5 ;
      2'h1:
          payload = \payload$6 ;
      2'h2:
          payload = 8'h00;
      2'h3:
          payload = \payload$7 ;
    endcase
  end
  assign \payload$17  = 8'h00;
  assign \first$30  = 1'h0;
  assign \last$39  = 1'h0;
  assign \ready$16  = ready;
  assign \ready$44  = ready;
  assign \ready$15  = ready;
  assign \ready$14  = ready;
  assign last = \$42 ;
  assign first = \$33 ;
  assign valid = \$24 ;
  assign encoder_i[3] = \valid$4 ;
  assign encoder_i[2] = \valid$3 ;
  assign encoder_i[1] = \valid$2 ;
  assign encoder_i[0] = \valid$1 ;
  assign \$18  = \valid$1 ;
  assign \$26  = \first$8 ;
  assign \$31  = \$28 ;
  assign \$35  = \last$11 ;
  assign \$40  = \$37 ;
endmodule

module \tx_mux$2 (first, last, payload, ready, \valid$1 , \valid$2 , \valid$3 , \payload$4 , \first$5 , \last$6 , \last$7 , \ready$8 , valid);
  reg \initial  = 0;
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire \$20 ;
  wire \$23 ;
  wire \$25 ;
  wire \$27 ;
  wire \$30 ;
  wire [2:0] encoder_i;
  wire [1:0] encoder_o;
  output first;
  wire \first$19 ;
  wire \first$22 ;
  input \first$5 ;
  output last;
  wire \last$29 ;
  input \last$6 ;
  input \last$7 ;
  output [7:0] payload;
  reg [7:0] payload;
  wire [7:0] \payload$10 ;
  input [7:0] \payload$4 ;
  wire [7:0] \payload$9 ;
  input ready;
  wire \ready$32 ;
  wire \ready$33 ;
  output \ready$8 ;
  output valid;
  input \valid$1 ;
  input \valid$2 ;
  input \valid$3 ;
  assign \$13  = \$11  | \valid$2 ;
  assign \$15  = \$13  | \valid$3 ;
  assign \$27  = \$25  | \last$7 ;
  \encoder$3  encoder (
    .i(encoder_i),
    .o(encoder_o)
  );
  always @* begin
    if (\initial ) begin end
    payload = 8'h00;
    casez (encoder_o)
      2'h0:
          payload = \payload$4 ;
      2'h1:
          payload = 8'h00;
      2'h2:
          payload = 8'h00;
    endcase
  end
  assign \payload$9  = 8'h00;
  assign \payload$10  = 8'h00;
  assign \first$19  = 1'h0;
  assign \first$22  = 1'h0;
  assign \last$29  = 1'h0;
  assign \ready$33  = ready;
  assign \ready$32  = ready;
  assign \ready$8  = ready;
  assign last = \$30 ;
  assign first = \$23 ;
  assign valid = \$15 ;
  assign encoder_i[2] = \valid$3 ;
  assign encoder_i[1] = \valid$2 ;
  assign encoder_i[0] = \valid$1 ;
  assign \$11  = \valid$1 ;
  assign \$17  = \first$5 ;
  assign \$20  = \first$5 ;
  assign \$23  = \first$5 ;
  assign \$25  = \last$6 ;
  assign \$30  = \$27 ;
endmodule

module usb(usb_clk, valid, first, last, payload, ready, \valid$1 , \first$2 , \last$3 , \payload$4 , \ready$5 , connect, ulpi__clk__o, ulpi__rst, ulpi__data__oe, ulpi__dir__i, ulpi__nxt__i, ulpi__data__i, ulpi__data__o, ulpi__stp, usb_rst);
  reg \initial  = 0;
  wire \$111 ;
  wire [1:0] \$113 ;
  wire \$115 ;
  wire [1:0] \$117 ;
  wire [1:0] \$118 ;
  wire \$120 ;
  wire \$122 ;
  wire \$124 ;
  wire [3:0] \$126 ;
  wire [3:0] \$127 ;
  reg [6:0] address = 7'h00;
  reg [6:0] \address$next ;
  reg [7:0] configuration = 8'h00;
  reg [7:0] \configuration$next ;
  input connect;
  wire [15:0] data_crc_crc;
  wire [7:0] data_crc_rx_data;
  wire data_crc_rx_valid;
  wire data_crc_start;
  wire [7:0] data_crc_tx_data;
  wire data_crc_tx_valid;
  wire endpoint_mux_ack;
  wire \endpoint_mux_ack$12 ;
  wire \endpoint_mux_ack$15 ;
  wire \endpoint_mux_ack$36 ;
  wire \endpoint_mux_ack$62 ;
  wire \endpoint_mux_ack$81 ;
  wire \endpoint_mux_ack$82 ;
  wire \endpoint_mux_ack$83 ;
  wire \endpoint_mux_ack$84 ;
  wire [6:0] endpoint_mux_active_address;
  wire [7:0] endpoint_mux_active_config;
  wire [7:0] \endpoint_mux_active_config$35 ;
  wire [6:0] endpoint_mux_address;
  wire [6:0] \endpoint_mux_address$20 ;
  wire [6:0] \endpoint_mux_address$41 ;
  wire [6:0] \endpoint_mux_address$67 ;
  wire endpoint_mux_address_changed;
  wire \endpoint_mux_address_changed$77 ;
  wire endpoint_mux_config_changed;
  wire \endpoint_mux_config_changed$79 ;
  wire [15:0] endpoint_mux_crc;
  wire [3:0] endpoint_mux_endpoint;
  wire [3:0] \endpoint_mux_endpoint$21 ;
  wire [3:0] \endpoint_mux_endpoint$42 ;
  wire [3:0] \endpoint_mux_endpoint$51 ;
  wire [3:0] \endpoint_mux_endpoint$68 ;
  wire endpoint_mux_first;
  wire \endpoint_mux_first$102 ;
  wire \endpoint_mux_first$103 ;
  wire \endpoint_mux_first$104 ;
  wire [10:0] endpoint_mux_frame;
  wire [10:0] \endpoint_mux_frame$24 ;
  wire [10:0] \endpoint_mux_frame$45 ;
  wire [10:0] \endpoint_mux_frame$71 ;
  wire endpoint_mux_is_in;
  wire \endpoint_mux_is_in$26 ;
  wire \endpoint_mux_is_in$47 ;
  wire \endpoint_mux_is_in$73 ;
  wire endpoint_mux_is_out;
  wire \endpoint_mux_is_out$27 ;
  wire \endpoint_mux_is_out$48 ;
  wire \endpoint_mux_is_out$53 ;
  wire \endpoint_mux_is_out$74 ;
  wire endpoint_mux_is_ping;
  wire \endpoint_mux_is_ping$29 ;
  wire \endpoint_mux_is_ping$50 ;
  wire \endpoint_mux_is_ping$54 ;
  wire \endpoint_mux_is_ping$76 ;
  wire endpoint_mux_is_setup;
  wire \endpoint_mux_is_setup$28 ;
  wire \endpoint_mux_is_setup$49 ;
  wire \endpoint_mux_is_setup$75 ;
  wire endpoint_mux_last;
  wire \endpoint_mux_last$105 ;
  wire \endpoint_mux_last$106 ;
  wire \endpoint_mux_last$107 ;
  wire endpoint_mux_nak;
  wire \endpoint_mux_nak$13 ;
  wire \endpoint_mux_nak$16 ;
  wire \endpoint_mux_nak$37 ;
  wire \endpoint_mux_nak$63 ;
  wire \endpoint_mux_nak$85 ;
  wire \endpoint_mux_nak$86 ;
  wire \endpoint_mux_nak$87 ;
  wire \endpoint_mux_nak$88 ;
  wire [6:0] endpoint_mux_new_address;
  wire [6:0] \endpoint_mux_new_address$78 ;
  wire [7:0] endpoint_mux_new_config;
  wire [7:0] \endpoint_mux_new_config$80 ;
  wire endpoint_mux_new_frame;
  wire \endpoint_mux_new_frame$25 ;
  wire \endpoint_mux_new_frame$46 ;
  wire \endpoint_mux_new_frame$72 ;
  wire endpoint_mux_new_token;
  wire \endpoint_mux_new_token$22 ;
  wire \endpoint_mux_new_token$43 ;
  wire \endpoint_mux_new_token$69 ;
  wire endpoint_mux_next;
  wire \endpoint_mux_next$31 ;
  wire \endpoint_mux_next$56 ;
  wire endpoint_mux_nyet;
  wire \endpoint_mux_nyet$18 ;
  wire \endpoint_mux_nyet$39 ;
  wire \endpoint_mux_nyet$65 ;
  wire [7:0] endpoint_mux_payload;
  wire [7:0] \endpoint_mux_payload$100 ;
  wire [7:0] \endpoint_mux_payload$101 ;
  wire [7:0] \endpoint_mux_payload$11 ;
  wire [7:0] \endpoint_mux_payload$32 ;
  wire [7:0] \endpoint_mux_payload$57 ;
  wire [7:0] \endpoint_mux_payload$99 ;
  wire [3:0] endpoint_mux_pid;
  wire [3:0] \endpoint_mux_pid$19 ;
  wire [3:0] \endpoint_mux_pid$40 ;
  wire [3:0] \endpoint_mux_pid$66 ;
  wire endpoint_mux_ready;
  wire \endpoint_mux_ready$108 ;
  wire \endpoint_mux_ready$109 ;
  wire \endpoint_mux_ready$110 ;
  wire endpoint_mux_ready_for_response;
  wire \endpoint_mux_ready_for_response$23 ;
  wire \endpoint_mux_ready_for_response$44 ;
  wire \endpoint_mux_ready_for_response$52 ;
  wire \endpoint_mux_ready_for_response$70 ;
  wire endpoint_mux_rx_complete;
  wire \endpoint_mux_rx_complete$58 ;
  wire endpoint_mux_rx_invalid;
  wire \endpoint_mux_rx_invalid$60 ;
  wire [1:0] endpoint_mux_rx_pid_toggle;
  wire [1:0] \endpoint_mux_rx_pid_toggle$61 ;
  wire endpoint_mux_rx_ready_for_response;
  wire \endpoint_mux_rx_ready_for_response$33 ;
  wire \endpoint_mux_rx_ready_for_response$59 ;
  wire endpoint_mux_rx_timeout;
  wire [1:0] endpoint_mux_speed;
  wire [1:0] \endpoint_mux_speed$34 ;
  wire endpoint_mux_stall;
  wire \endpoint_mux_stall$14 ;
  wire \endpoint_mux_stall$17 ;
  wire \endpoint_mux_stall$38 ;
  wire \endpoint_mux_stall$64 ;
  wire \endpoint_mux_stall$89 ;
  wire \endpoint_mux_stall$90 ;
  wire \endpoint_mux_stall$91 ;
  wire endpoint_mux_start;
  wire \endpoint_mux_start$92 ;
  wire endpoint_mux_tx_allowed;
  wire [1:0] endpoint_mux_tx_pid_toggle;
  wire [1:0] \endpoint_mux_tx_pid_toggle$96 ;
  wire [1:0] \endpoint_mux_tx_pid_toggle$97 ;
  wire [1:0] \endpoint_mux_tx_pid_toggle$98 ;
  wire endpoint_mux_tx_timeout;
  wire endpoint_mux_valid;
  wire \endpoint_mux_valid$10 ;
  wire \endpoint_mux_valid$30 ;
  wire \endpoint_mux_valid$55 ;
  wire \endpoint_mux_valid$93 ;
  wire \endpoint_mux_valid$94 ;
  wire \endpoint_mux_valid$95 ;
  input first;
  output \first$2 ;
  reg [10:0] frame_number = 11'h000;
  reg [10:0] \frame_number$next ;
  wire full_speed_only;
  wire handshake_detector_ack;
  wire handshake_detector_nak;
  wire handshake_detector_nyet;
  wire handshake_detector_stall;
  wire [7:0] handshake_generator_data;
  wire handshake_generator_issue_ack;
  wire handshake_generator_issue_nak;
  wire handshake_generator_issue_stall;
  wire handshake_generator_ready;
  wire handshake_generator_valid;
  input last;
  output \last$3 ;
  wire low_speed_only;
  reg [2:0] microframe_number = 3'h0;
  reg [2:0] \microframe_number$next ;
  reg new_frame;
  input [7:0] payload;
  output [7:0] \payload$4 ;
  output ready;
  input \ready$5 ;
  wire [3:0] receiver_active_pid;
  wire [15:0] receiver_crc;
  wire receiver_crc_mismatch;
  wire receiver_next;
  wire receiver_packet_complete;
  wire [7:0] receiver_payload;
  wire receiver_ready_for_response;
  wire receiver_start;
  wire \receiver_start$9 ;
  wire receiver_tx_allowed;
  wire receiver_valid;
  wire reset_detected;
  wire reset_sequencer_bus_busy;
  wire reset_sequencer_bus_reset;
  wire [1:0] reset_sequencer_current_speed;
  wire [7:0] reset_sequencer_data;
  wire reset_sequencer_full_speed_only;
  wire [1:0] reset_sequencer_line_state;
  wire reset_sequencer_low_speed_only;
  wire [1:0] reset_sequencer_operating_mode;
  wire reset_sequencer_suspended;
  wire reset_sequencer_termination_select;
  wire reset_sequencer_valid;
  wire reset_sequencer_vbus_connected;
  wire rx_activity_led;
  wire sof_detected;
  wire [1:0] speed;
  wire [1:0] \speed$129 ;
  wire suspended;
  wire timer_rx_timeout;
  wire [1:0] timer_speed;
  wire timer_start;
  wire timer_tx_allowed;
  wire timer_tx_timeout;
  wire [6:0] token_detector_address;
  wire [6:0] \token_detector_address$6 ;
  wire [3:0] token_detector_endpoint;
  wire [10:0] token_detector_frame;
  wire token_detector_is_in;
  wire token_detector_is_out;
  wire token_detector_is_ping;
  wire token_detector_is_setup;
  wire token_detector_new_frame;
  wire token_detector_new_token;
  wire [3:0] token_detector_pid;
  wire token_detector_ready_for_response;
  wire [1:0] token_detector_speed;
  wire translator_busy;
  wire translator_dm_pulldown;
  wire translator_dp_pulldown;
  wire [1:0] translator_line_state;
  wire [1:0] translator_op_mode;
  wire translator_rx_active;
  wire [7:0] translator_rx_data;
  wire translator_rx_valid;
  wire translator_session_end;
  wire translator_term_select;
  wire [7:0] translator_tx_data;
  wire translator_tx_ready;
  wire translator_tx_valid;
  wire [1:0] translator_xcvr_select;
  wire [15:0] transmitter_crc;
  wire [7:0] transmitter_data;
  wire [1:0] transmitter_data_pid;
  wire transmitter_first;
  wire transmitter_last;
  wire [7:0] transmitter_payload;
  wire transmitter_ready;
  wire \transmitter_ready$8 ;
  wire transmitter_start;
  wire transmitter_valid;
  wire \transmitter_valid$7 ;
  wire tx_activity_led;
  wire [7:0] tx_multiplexer_data;
  wire tx_multiplexer_ready;
  wire tx_multiplexer_valid;
  output ulpi__clk__o;
  input [7:0] ulpi__data__i;
  output [7:0] ulpi__data__o;
  output ulpi__data__oe;
  input ulpi__dir__i;
  input ulpi__nxt__i;
  output ulpi__rst;
  output ulpi__stp;
  input usb_clk;
  input usb_rst;
  input valid;
  output \valid$1 ;
  assign \$111  = ~ translator_session_end;
  assign \$113  = + receiver_active_pid[3];
  assign \$115  = tx_multiplexer_valid & translator_tx_ready;
  assign \$122  = reset_sequencer_termination_select & connect;
  assign \$124  = token_detector_frame != frame_number;
  assign \$127  = microframe_number + 1'h1;
  always @(posedge usb_clk)
    microframe_number <= \microframe_number$next ;
  always @(posedge usb_clk)
    frame_number <= \frame_number$next ;
  always @(posedge usb_clk)
    configuration <= \configuration$next ;
  always @(posedge usb_clk)
    address <= \address$next ;
  USBControlEndpoint USBControlEndpoint (
    .ack(\endpoint_mux_ack$15 ),
    .\ack$1 (\endpoint_mux_ack$81 ),
    .active_config(\endpoint_mux_active_config$35 ),
    .address(\endpoint_mux_address$20 ),
    .address_changed(\endpoint_mux_address_changed$77 ),
    .config_changed(\endpoint_mux_config_changed$79 ),
    .crc(endpoint_mux_crc),
    .endpoint(\endpoint_mux_endpoint$21 ),
    .first(\endpoint_mux_first$102 ),
    .frame(\endpoint_mux_frame$24 ),
    .is_in(\endpoint_mux_is_in$26 ),
    .is_out(\endpoint_mux_is_out$27 ),
    .is_ping(\endpoint_mux_is_ping$29 ),
    .is_setup(\endpoint_mux_is_setup$28 ),
    .last(\endpoint_mux_last$105 ),
    .nak(\endpoint_mux_nak$16 ),
    .\nak$2 (\endpoint_mux_nak$85 ),
    .new_address(\endpoint_mux_new_address$78 ),
    .new_config(\endpoint_mux_new_config$80 ),
    .new_frame(\endpoint_mux_new_frame$25 ),
    .new_token(\endpoint_mux_new_token$22 ),
    .next(\endpoint_mux_next$31 ),
    .nyet(\endpoint_mux_nyet$18 ),
    .payload(\endpoint_mux_payload$32 ),
    .\payload$6 (\endpoint_mux_payload$99 ),
    .pid(\endpoint_mux_pid$19 ),
    .ready(\endpoint_mux_ready$108 ),
    .ready_for_response(\endpoint_mux_ready_for_response$23 ),
    .rx_active(translator_rx_active),
    .rx_data(translator_rx_data),
    .rx_ready_for_response(\endpoint_mux_rx_ready_for_response$33 ),
    .rx_timeout(endpoint_mux_rx_timeout),
    .rx_valid(translator_rx_valid),
    .speed(\endpoint_mux_speed$34 ),
    .stall(\endpoint_mux_stall$17 ),
    .\stall$3 (\endpoint_mux_stall$89 ),
    .start(endpoint_mux_start),
    .\start$4 (\endpoint_mux_start$92 ),
    .tx_allowed(endpoint_mux_tx_allowed),
    .tx_pid_toggle(\endpoint_mux_tx_pid_toggle$96 ),
    .tx_timeout(endpoint_mux_tx_timeout),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst),
    .valid(\endpoint_mux_valid$30 ),
    .\valid$5 (\endpoint_mux_valid$93 )
  );
  USBStreamInEndpoint USBStreamInEndpoint (
    .ack(\endpoint_mux_ack$36 ),
    .\ack$1 (\endpoint_mux_ack$82 ),
    .address(\endpoint_mux_address$41 ),
    .endpoint(\endpoint_mux_endpoint$42 ),
    .first(\endpoint_mux_first$103 ),
    .frame(\endpoint_mux_frame$45 ),
    .is_in(\endpoint_mux_is_in$47 ),
    .is_out(\endpoint_mux_is_out$48 ),
    .is_ping(\endpoint_mux_is_ping$50 ),
    .is_setup(\endpoint_mux_is_setup$49 ),
    .last(\endpoint_mux_last$106 ),
    .nak(\endpoint_mux_nak$37 ),
    .\nak$2 (\endpoint_mux_nak$86 ),
    .new_frame(\endpoint_mux_new_frame$46 ),
    .new_token(\endpoint_mux_new_token$43 ),
    .nyet(\endpoint_mux_nyet$39 ),
    .payload(\endpoint_mux_payload$100 ),
    .pid(\endpoint_mux_pid$40 ),
    .ready(\endpoint_mux_ready$109 ),
    .ready_for_response(\endpoint_mux_ready_for_response$44 ),
    .stall(\endpoint_mux_stall$38 ),
    .\stall$3 (\endpoint_mux_stall$90 ),
    .tx_pid_toggle(\endpoint_mux_tx_pid_toggle$97 ),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst),
    .valid(\endpoint_mux_valid$94 )
  );
  USBStreamInEndpoint_139748379531824 USBStreamInEndpoint_139748379531824 (
    .ack(\endpoint_mux_ack$62 ),
    .\ack$1 (\endpoint_mux_ack$84 ),
    .address(\endpoint_mux_address$67 ),
    .endpoint(\endpoint_mux_endpoint$68 ),
    .first(first),
    .\first$6 (\endpoint_mux_first$104 ),
    .frame(\endpoint_mux_frame$71 ),
    .is_in(\endpoint_mux_is_in$73 ),
    .is_out(\endpoint_mux_is_out$74 ),
    .is_ping(\endpoint_mux_is_ping$76 ),
    .is_setup(\endpoint_mux_is_setup$75 ),
    .last(last),
    .\last$7 (\endpoint_mux_last$107 ),
    .nak(\endpoint_mux_nak$63 ),
    .\nak$2 (\endpoint_mux_nak$88 ),
    .new_frame(\endpoint_mux_new_frame$72 ),
    .new_token(\endpoint_mux_new_token$69 ),
    .nyet(\endpoint_mux_nyet$65 ),
    .payload(payload),
    .\payload$5 (\endpoint_mux_payload$101 ),
    .pid(\endpoint_mux_pid$66 ),
    .ready(ready),
    .\ready$8 (\endpoint_mux_ready$110 ),
    .ready_for_response(\endpoint_mux_ready_for_response$70 ),
    .stall(\endpoint_mux_stall$64 ),
    .\stall$3 (\endpoint_mux_stall$91 ),
    .tx_pid_toggle(\endpoint_mux_tx_pid_toggle$98 ),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst),
    .valid(valid),
    .\valid$4 (\endpoint_mux_valid$95 )
  );
  USBStreamOutEndpoint USBStreamOutEndpoint (
    .ack(\endpoint_mux_ack$83 ),
    .endpoint(\endpoint_mux_endpoint$51 ),
    .first(\first$2 ),
    .is_out(\endpoint_mux_is_out$53 ),
    .is_ping(\endpoint_mux_is_ping$54 ),
    .last(\last$3 ),
    .nak(\endpoint_mux_nak$87 ),
    .next(\endpoint_mux_next$56 ),
    .payload(\payload$4 ),
    .\payload$2 (\endpoint_mux_payload$57 ),
    .ready(\ready$5 ),
    .ready_for_response(\endpoint_mux_ready_for_response$52 ),
    .rx_complete(\endpoint_mux_rx_complete$58 ),
    .rx_invalid(\endpoint_mux_rx_invalid$60 ),
    .rx_pid_toggle(\endpoint_mux_rx_pid_toggle$61 ),
    .rx_ready_for_response(\endpoint_mux_rx_ready_for_response$59 ),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst),
    .valid(\valid$1 ),
    .\valid$1 (\endpoint_mux_valid$55 )
  );
  data_crc data_crc (
    .crc(transmitter_crc),
    .\crc$2 (receiver_crc),
    .\crc$4 (data_crc_crc),
    .rx_data(data_crc_rx_data),
    .rx_valid(data_crc_rx_valid),
    .start(transmitter_start),
    .\start$1 (receiver_start),
    .\start$3 (data_crc_start),
    .tx_data(data_crc_tx_data),
    .tx_valid(data_crc_tx_valid),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst)
  );
  endpoint_mux endpoint_mux (
    .ack(endpoint_mux_ack),
    .\ack$11 (\endpoint_mux_ack$15 ),
    .\ack$3 (\endpoint_mux_ack$12 ),
    .\ack$32 (\endpoint_mux_ack$36 ),
    .\ack$58 (\endpoint_mux_ack$62 ),
    .\ack$77 (\endpoint_mux_ack$81 ),
    .\ack$78 (\endpoint_mux_ack$82 ),
    .\ack$79 (\endpoint_mux_ack$83 ),
    .\ack$80 (\endpoint_mux_ack$84 ),
    .active_address(endpoint_mux_active_address),
    .active_config(endpoint_mux_active_config),
    .\active_config$31 (\endpoint_mux_active_config$35 ),
    .address(endpoint_mux_address),
    .\address$16 (\endpoint_mux_address$20 ),
    .\address$37 (\endpoint_mux_address$41 ),
    .\address$63 (\endpoint_mux_address$67 ),
    .address_changed(endpoint_mux_address_changed),
    .\address_changed$73 (\endpoint_mux_address_changed$77 ),
    .config_changed(endpoint_mux_config_changed),
    .\config_changed$75 (\endpoint_mux_config_changed$79 ),
    .crc(data_crc_crc),
    .\crc$7 (endpoint_mux_crc),
    .endpoint(endpoint_mux_endpoint),
    .\endpoint$17 (\endpoint_mux_endpoint$21 ),
    .\endpoint$38 (\endpoint_mux_endpoint$42 ),
    .\endpoint$47 (\endpoint_mux_endpoint$51 ),
    .\endpoint$64 (\endpoint_mux_endpoint$68 ),
    .first(endpoint_mux_first),
    .\first$100 (\endpoint_mux_first$103 ),
    .\first$101 (\endpoint_mux_first$104 ),
    .\first$99 (\endpoint_mux_first$102 ),
    .frame(endpoint_mux_frame),
    .\frame$20 (\endpoint_mux_frame$24 ),
    .\frame$41 (\endpoint_mux_frame$45 ),
    .\frame$67 (\endpoint_mux_frame$71 ),
    .is_in(endpoint_mux_is_in),
    .\is_in$22 (\endpoint_mux_is_in$26 ),
    .\is_in$43 (\endpoint_mux_is_in$47 ),
    .\is_in$69 (\endpoint_mux_is_in$73 ),
    .is_out(endpoint_mux_is_out),
    .\is_out$23 (\endpoint_mux_is_out$27 ),
    .\is_out$44 (\endpoint_mux_is_out$48 ),
    .\is_out$49 (\endpoint_mux_is_out$53 ),
    .\is_out$70 (\endpoint_mux_is_out$74 ),
    .is_ping(endpoint_mux_is_ping),
    .\is_ping$25 (\endpoint_mux_is_ping$29 ),
    .\is_ping$46 (\endpoint_mux_is_ping$50 ),
    .\is_ping$50 (\endpoint_mux_is_ping$54 ),
    .\is_ping$72 (\endpoint_mux_is_ping$76 ),
    .is_setup(endpoint_mux_is_setup),
    .\is_setup$24 (\endpoint_mux_is_setup$28 ),
    .\is_setup$45 (\endpoint_mux_is_setup$49 ),
    .\is_setup$71 (\endpoint_mux_is_setup$75 ),
    .last(endpoint_mux_last),
    .\last$102 (\endpoint_mux_last$105 ),
    .\last$103 (\endpoint_mux_last$106 ),
    .\last$104 (\endpoint_mux_last$107 ),
    .nak(endpoint_mux_nak),
    .\nak$12 (\endpoint_mux_nak$16 ),
    .\nak$33 (\endpoint_mux_nak$37 ),
    .\nak$4 (\endpoint_mux_nak$13 ),
    .\nak$59 (\endpoint_mux_nak$63 ),
    .\nak$81 (\endpoint_mux_nak$85 ),
    .\nak$82 (\endpoint_mux_nak$86 ),
    .\nak$83 (\endpoint_mux_nak$87 ),
    .\nak$84 (\endpoint_mux_nak$88 ),
    .new_address(endpoint_mux_new_address),
    .\new_address$74 (\endpoint_mux_new_address$78 ),
    .new_config(endpoint_mux_new_config),
    .\new_config$76 (\endpoint_mux_new_config$80 ),
    .new_frame(endpoint_mux_new_frame),
    .\new_frame$21 (\endpoint_mux_new_frame$25 ),
    .\new_frame$42 (\endpoint_mux_new_frame$46 ),
    .\new_frame$68 (\endpoint_mux_new_frame$72 ),
    .new_token(endpoint_mux_new_token),
    .\new_token$18 (\endpoint_mux_new_token$22 ),
    .\new_token$39 (\endpoint_mux_new_token$43 ),
    .\new_token$65 (\endpoint_mux_new_token$69 ),
    .next(endpoint_mux_next),
    .\next$27 (\endpoint_mux_next$31 ),
    .\next$52 (\endpoint_mux_next$56 ),
    .nyet(endpoint_mux_nyet),
    .\nyet$14 (\endpoint_mux_nyet$18 ),
    .\nyet$35 (\endpoint_mux_nyet$39 ),
    .\nyet$61 (\endpoint_mux_nyet$65 ),
    .payload(endpoint_mux_payload),
    .\payload$2 (\endpoint_mux_payload$11 ),
    .\payload$28 (\endpoint_mux_payload$32 ),
    .\payload$53 (\endpoint_mux_payload$57 ),
    .\payload$96 (\endpoint_mux_payload$99 ),
    .\payload$97 (\endpoint_mux_payload$100 ),
    .\payload$98 (\endpoint_mux_payload$101 ),
    .pid(endpoint_mux_pid),
    .\pid$15 (\endpoint_mux_pid$19 ),
    .\pid$36 (\endpoint_mux_pid$40 ),
    .\pid$62 (\endpoint_mux_pid$66 ),
    .ready(endpoint_mux_ready),
    .\ready$105 (\endpoint_mux_ready$108 ),
    .\ready$106 (\endpoint_mux_ready$109 ),
    .\ready$107 (\endpoint_mux_ready$110 ),
    .ready_for_response(endpoint_mux_ready_for_response),
    .\ready_for_response$19 (\endpoint_mux_ready_for_response$23 ),
    .\ready_for_response$40 (\endpoint_mux_ready_for_response$44 ),
    .\ready_for_response$48 (\endpoint_mux_ready_for_response$52 ),
    .\ready_for_response$66 (\endpoint_mux_ready_for_response$70 ),
    .rx_complete(endpoint_mux_rx_complete),
    .\rx_complete$54 (\endpoint_mux_rx_complete$58 ),
    .rx_invalid(endpoint_mux_rx_invalid),
    .\rx_invalid$56 (\endpoint_mux_rx_invalid$60 ),
    .rx_pid_toggle(endpoint_mux_rx_pid_toggle),
    .\rx_pid_toggle$57 (\endpoint_mux_rx_pid_toggle$61 ),
    .rx_ready_for_response(endpoint_mux_rx_ready_for_response),
    .\rx_ready_for_response$29 (\endpoint_mux_rx_ready_for_response$33 ),
    .\rx_ready_for_response$55 (\endpoint_mux_rx_ready_for_response$59 ),
    .rx_timeout(timer_rx_timeout),
    .\rx_timeout$10 (endpoint_mux_rx_timeout),
    .speed(2'h1),
    .\speed$30 (\endpoint_mux_speed$34 ),
    .stall(endpoint_mux_stall),
    .\stall$13 (\endpoint_mux_stall$17 ),
    .\stall$34 (\endpoint_mux_stall$38 ),
    .\stall$5 (\endpoint_mux_stall$14 ),
    .\stall$60 (\endpoint_mux_stall$64 ),
    .\stall$85 (\endpoint_mux_stall$89 ),
    .\stall$86 (\endpoint_mux_stall$90 ),
    .\stall$87 (\endpoint_mux_stall$91 ),
    .start(data_crc_start),
    .\start$6 (timer_start),
    .\start$88 (endpoint_mux_start),
    .\start$89 (\endpoint_mux_start$92 ),
    .tx_allowed(timer_tx_allowed),
    .\tx_allowed$8 (endpoint_mux_tx_allowed),
    .tx_pid_toggle(endpoint_mux_tx_pid_toggle),
    .\tx_pid_toggle$93 (\endpoint_mux_tx_pid_toggle$96 ),
    .\tx_pid_toggle$94 (\endpoint_mux_tx_pid_toggle$97 ),
    .\tx_pid_toggle$95 (\endpoint_mux_tx_pid_toggle$98 ),
    .tx_timeout(timer_tx_timeout),
    .\tx_timeout$9 (endpoint_mux_tx_timeout),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst),
    .valid(endpoint_mux_valid),
    .\valid$1 (\endpoint_mux_valid$10 ),
    .\valid$26 (\endpoint_mux_valid$30 ),
    .\valid$51 (\endpoint_mux_valid$55 ),
    .\valid$90 (\endpoint_mux_valid$93 ),
    .\valid$91 (\endpoint_mux_valid$94 ),
    .\valid$92 (\endpoint_mux_valid$95 )
  );
  handshake_detector handshake_detector (
    .ack(handshake_detector_ack),
    .nak(handshake_detector_nak),
    .nyet(handshake_detector_nyet),
    .rx_active(translator_rx_active),
    .rx_data(translator_rx_data),
    .rx_valid(translator_rx_valid),
    .stall(handshake_detector_stall),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst)
  );
  handshake_generator handshake_generator (
    .data(handshake_generator_data),
    .issue_ack(handshake_generator_issue_ack),
    .issue_nak(handshake_generator_issue_nak),
    .issue_stall(handshake_generator_issue_stall),
    .ready(handshake_generator_ready),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst),
    .valid(handshake_generator_valid)
  );
  receiver receiver (
    .active_pid(receiver_active_pid),
    .crc(receiver_crc),
    .crc_mismatch(receiver_crc_mismatch),
    .next(receiver_next),
    .packet_complete(receiver_packet_complete),
    .payload(receiver_payload),
    .ready_for_response(receiver_ready_for_response),
    .rx_active(translator_rx_active),
    .rx_data(translator_rx_data),
    .rx_valid(translator_rx_valid),
    .start(receiver_start),
    .\start$1 (\receiver_start$9 ),
    .tx_allowed(receiver_tx_allowed),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst),
    .valid(receiver_valid)
  );
  reset_sequencer reset_sequencer (
    .bus_busy(reset_sequencer_bus_busy),
    .bus_reset(reset_sequencer_bus_reset),
    .current_speed(reset_sequencer_current_speed),
    .data(reset_sequencer_data),
    .full_speed_only(1'h0),
    .line_state(reset_sequencer_line_state),
    .low_speed_only(1'h0),
    .operating_mode(reset_sequencer_operating_mode),
    .suspended(reset_sequencer_suspended),
    .termination_select(reset_sequencer_termination_select),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst),
    .valid(reset_sequencer_valid),
    .vbus_connected(reset_sequencer_vbus_connected)
  );
  \timer$1  timer (
    .rx_timeout(timer_rx_timeout),
    .speed(2'h1),
    .start(\receiver_start$9 ),
    .\start$1 (timer_start),
    .tx_allowed(receiver_tx_allowed),
    .\tx_allowed$2 (timer_tx_allowed),
    .tx_timeout(timer_tx_timeout),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst)
  );
  token_detector token_detector (
    .address(token_detector_address),
    .\address$1 (\token_detector_address$6 ),
    .endpoint(token_detector_endpoint),
    .frame(token_detector_frame),
    .is_in(token_detector_is_in),
    .is_out(token_detector_is_out),
    .is_ping(token_detector_is_ping),
    .is_setup(token_detector_is_setup),
    .new_frame(token_detector_new_frame),
    .new_token(token_detector_new_token),
    .pid(token_detector_pid),
    .ready_for_response(token_detector_ready_for_response),
    .rx_active(translator_rx_active),
    .rx_data(translator_rx_data),
    .rx_valid(translator_rx_valid),
    .speed(2'h1),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst)
  );
  translator translator (
    .busy(translator_busy),
    .dm_pulldown(1'h0),
    .dp_pulldown(1'h0),
    .line_state(translator_line_state),
    .op_mode(translator_op_mode),
    .rx_active(translator_rx_active),
    .rx_data(translator_rx_data),
    .rx_valid(translator_rx_valid),
    .session_end(translator_session_end),
    .term_select(translator_term_select),
    .tx_data(translator_tx_data),
    .tx_ready(translator_tx_ready),
    .tx_valid(translator_tx_valid),
    .ulpi__clk__o(ulpi__clk__o),
    .ulpi__data__i(ulpi__data__i),
    .ulpi__data__o(ulpi__data__o),
    .ulpi__data__oe(ulpi__data__oe),
    .ulpi__dir__i(ulpi__dir__i),
    .ulpi__nxt__i(ulpi__nxt__i),
    .ulpi__rst(ulpi__rst),
    .ulpi__stp(ulpi__stp),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst),
    .xcvr_select(translator_xcvr_select)
  );
  transmitter transmitter (
    .crc(transmitter_crc),
    .data(transmitter_data),
    .data_pid(transmitter_data_pid),
    .first(transmitter_first),
    .last(transmitter_last),
    .payload(transmitter_payload),
    .ready(transmitter_ready),
    .\ready$2 (\transmitter_ready$8 ),
    .start(transmitter_start),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst),
    .valid(transmitter_valid),
    .\valid$1 (\transmitter_valid$7 )
  );
  tx_multiplexer tx_multiplexer (
    .data(tx_multiplexer_data),
    .\data$2 (reset_sequencer_data),
    .\data$3 (transmitter_data),
    .\data$7 (handshake_generator_data),
    .ready(tx_multiplexer_ready),
    .\ready$5 (\transmitter_ready$8 ),
    .\ready$8 (handshake_generator_ready),
    .valid(tx_multiplexer_valid),
    .\valid$1 (reset_sequencer_valid),
    .\valid$4 (\transmitter_valid$7 ),
    .\valid$6 (handshake_generator_valid)
  );
  always @* begin
    if (\initial ) begin end
    \address$next  = address;
    casez (endpoint_mux_address_changed)
      1'h1:
          \address$next  = endpoint_mux_new_address;
    endcase
    casez (reset_sequencer_bus_reset)
      1'h1:
          \address$next  = 7'h00;
    endcase
    casez (usb_rst)
      1'h1:
          \address$next  = 7'h00;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \configuration$next  = configuration;
    casez (endpoint_mux_config_changed)
      1'h1:
          \configuration$next  = endpoint_mux_new_config;
    endcase
    casez (reset_sequencer_bus_reset)
      1'h1:
          \configuration$next  = 8'h00;
    endcase
    casez (usb_rst)
      1'h1:
          \configuration$next  = 8'h00;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \frame_number$next  = frame_number;
    casez (token_detector_new_frame)
      1'h1:
          \frame_number$next  = token_detector_frame;
    endcase
    casez (usb_rst)
      1'h1:
          \frame_number$next  = 11'h000;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    new_frame = 1'h0;
    casez (token_detector_new_frame)
      1'h1:
          new_frame = \$124 ;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \microframe_number$next  = microframe_number;
    casez (token_detector_new_frame)
      1'h1:
          (* full_case = 32'd1 *)
          casez (new_frame)
            1'h1:
                \microframe_number$next  = 3'h0;
            default:
                \microframe_number$next  = \$127 [2:0];
          endcase
    endcase
    casez (usb_rst)
      1'h1:
          \microframe_number$next  = 3'h0;
    endcase
  end
  assign \$117  = \$118 ;
  assign \$126  = \$127 ;
  assign speed = 2'h1;
  assign low_speed_only = 1'h0;
  assign full_speed_only = 1'h0;
  assign rx_activity_led = translator_rx_valid;
  assign tx_activity_led = tx_multiplexer_valid;
  assign reset_detected = reset_sequencer_bus_reset;
  assign sof_detected = token_detector_new_frame;
  assign suspended = reset_sequencer_suspended;
  assign \speed$129  = reset_sequencer_current_speed;
  assign translator_term_select = \$122 ;
  assign translator_xcvr_select = reset_sequencer_current_speed;
  assign translator_op_mode = reset_sequencer_operating_mode;
  assign reset_sequencer_full_speed_only = \$120 ;
  assign reset_sequencer_low_speed_only = \$118 [0];
  assign translator_dp_pulldown = 1'h0;
  assign translator_dm_pulldown = 1'h0;
  assign data_crc_tx_data = tx_multiplexer_data;
  assign data_crc_tx_valid = \$115 ;
  assign tx_multiplexer_ready = translator_tx_ready;
  assign translator_tx_valid = tx_multiplexer_valid;
  assign translator_tx_data = tx_multiplexer_data;
  assign transmitter_data_pid = endpoint_mux_tx_pid_toggle;
  assign handshake_generator_issue_stall = \endpoint_mux_stall$14 ;
  assign handshake_generator_issue_nak = \endpoint_mux_nak$13 ;
  assign handshake_generator_issue_ack = \endpoint_mux_ack$12 ;
  assign endpoint_mux_ready = transmitter_ready;
  assign transmitter_payload = \endpoint_mux_payload$11 ;
  assign transmitter_last = endpoint_mux_last;
  assign transmitter_first = endpoint_mux_first;
  assign transmitter_valid = \endpoint_mux_valid$10 ;
  assign endpoint_mux_rx_pid_toggle = \$113 ;
  assign endpoint_mux_rx_ready_for_response = receiver_ready_for_response;
  assign endpoint_mux_rx_invalid = receiver_crc_mismatch;
  assign endpoint_mux_rx_complete = receiver_packet_complete;
  assign endpoint_mux_payload = receiver_payload;
  assign endpoint_mux_next = receiver_next;
  assign endpoint_mux_valid = receiver_valid;
  assign endpoint_mux_active_address = address;
  assign endpoint_mux_active_config = configuration;
  assign endpoint_mux_speed = 2'h1;
  assign endpoint_mux_nyet = handshake_detector_nyet;
  assign endpoint_mux_stall = handshake_detector_stall;
  assign endpoint_mux_nak = handshake_detector_nak;
  assign endpoint_mux_ack = handshake_detector_ack;
  assign endpoint_mux_is_ping = token_detector_is_ping;
  assign endpoint_mux_is_setup = token_detector_is_setup;
  assign endpoint_mux_is_out = token_detector_is_out;
  assign endpoint_mux_is_in = token_detector_is_in;
  assign endpoint_mux_new_frame = token_detector_new_frame;
  assign endpoint_mux_frame = token_detector_frame;
  assign endpoint_mux_ready_for_response = token_detector_ready_for_response;
  assign endpoint_mux_new_token = token_detector_new_token;
  assign endpoint_mux_endpoint = token_detector_endpoint;
  assign endpoint_mux_address = \token_detector_address$6 ;
  assign endpoint_mux_pid = token_detector_pid;
  assign timer_speed = 2'h1;
  assign token_detector_speed = 2'h1;
  assign data_crc_rx_valid = translator_rx_valid;
  assign data_crc_rx_data = translator_rx_data;
  assign token_detector_address = address;
  assign reset_sequencer_line_state = translator_line_state;
  assign reset_sequencer_vbus_connected = \$111 ;
  assign reset_sequencer_bus_busy = translator_busy;
  assign \$118  = 2'h0;
  assign \$120  = 1'h0;
endmodule

module usb0(usb_clk, valid, first, last, payload, ready, \valid$1 , \first$2 , \last$3 , \payload$4 , \ready$5 , connect, ulpi__clk__o, ulpi__rst, ulpi__data__oe, ulpi__dir__i, ulpi__nxt__i, ulpi__data__i, ulpi__data__o, ulpi__stp, usb_rst);
  input connect;
  input first;
  output \first$2 ;
  input last;
  output \last$3 ;
  input [7:0] payload;
  output [7:0] \payload$4 ;
  output ready;
  input \ready$5 ;
  output ulpi__clk__o;
  input [7:0] ulpi__data__i;
  output [7:0] ulpi__data__o;
  output ulpi__data__oe;
  input ulpi__dir__i;
  input ulpi__nxt__i;
  output ulpi__rst;
  output ulpi__stp;
  input usb_clk;
  wire usb_connect;
  wire usb_first;
  wire \usb_first$7 ;
  wire usb_last;
  wire \usb_last$8 ;
  wire [7:0] usb_payload;
  wire [7:0] \usb_payload$9 ;
  wire usb_ready;
  wire \usb_ready$10 ;
  input usb_rst;
  wire usb_valid;
  wire \usb_valid$6 ;
  input valid;
  output \valid$1 ;
  usb usb (
    .connect(usb_connect),
    .first(usb_first),
    .\first$2 (\usb_first$7 ),
    .last(usb_last),
    .\last$3 (\usb_last$8 ),
    .payload(usb_payload),
    .\payload$4 (\usb_payload$9 ),
    .ready(usb_ready),
    .\ready$5 (\usb_ready$10 ),
    .ulpi__clk__o(ulpi__clk__o),
    .ulpi__data__i(ulpi__data__i),
    .ulpi__data__o(ulpi__data__o),
    .ulpi__data__oe(ulpi__data__oe),
    .ulpi__dir__i(ulpi__dir__i),
    .ulpi__nxt__i(ulpi__nxt__i),
    .ulpi__rst(ulpi__rst),
    .ulpi__stp(ulpi__stp),
    .usb_clk(usb_clk),
    .usb_rst(usb_rst),
    .valid(usb_valid),
    .\valid$1 (\usb_valid$6 )
  );
  assign usb_connect = connect;
  assign \usb_ready$10  = \ready$5 ;
  assign \payload$4  = \usb_payload$9 ;
  assign \last$3  = \usb_last$8 ;
  assign \first$2  = \usb_first$7 ;
  assign \valid$1  = \usb_valid$6 ;
  assign ready = usb_ready;
  assign usb_payload = payload;
  assign usb_last = last;
  assign usb_first = first;
  assign usb_valid = valid;
endmodule

module usb_reset(phy_stop, clk, rst, phy_reset);
  reg \initial  = 0;
  wire \$1 ;
  wire [22:0] \$10 ;
  wire \$12 ;
  wire [22:0] \$14 ;
  wire [22:0] \$15 ;
  wire [22:0] \$17 ;
  wire \$19 ;
  wire [22:0] \$21 ;
  wire \$23 ;
  wire [22:0] \$25 ;
  wire \$27 ;
  wire \$3 ;
  wire \$4 ;
  wire [22:0] \$7 ;
  wire [22:0] \$8 ;
  input clk;
  reg [21:0] cycles_in_reset = 22'h000000;
  reg [21:0] \cycles_in_reset$next ;
  reg [1:0] fsm_state = 2'h0;
  reg [1:0] \fsm_state$next ;
  output phy_reset;
  output phy_stop;
  input rst;
  wire trigger;
  assign \$10  = cycles_in_reset + 1'h1;
  assign \$12  = \$10  == 22'h249f00;
  assign \$15  = cycles_in_reset + 1'h1;
  assign \$17  = cycles_in_reset + 1'h1;
  assign \$1  = ! fsm_state;
  assign \$19  = \$17  == 18'h3a980;
  assign \$21  = cycles_in_reset + 1'h1;
  assign \$23  = \$21  == 22'h249f00;
  assign \$25  = cycles_in_reset + 1'h1;
  assign \$27  = \$25  == 18'h3a980;
  assign \$4  = fsm_state == 1'h1;
  assign \$3  = ~ \$4 ;
  assign \$8  = cycles_in_reset + 1'h1;
  always @(posedge clk)
    fsm_state <= \fsm_state$next ;
  always @(posedge clk)
    cycles_in_reset <= \cycles_in_reset$next ;
  always @* begin
    if (\initial ) begin end
    \cycles_in_reset$next  = cycles_in_reset;
    casez (fsm_state)
      2'h1:
          \cycles_in_reset$next  = 22'h000000;
      2'h0:
        begin
          \cycles_in_reset$next  = \$8 [21:0];
          casez (\$12 )
            1'h1:
                \cycles_in_reset$next  = 22'h000000;
          endcase
        end
      2'h2:
        begin
          \cycles_in_reset$next  = \$15 [21:0];
          casez (\$19 )
            1'h1:
                \cycles_in_reset$next  = 22'h000000;
          endcase
        end
    endcase
    casez (rst)
      1'h1:
          \cycles_in_reset$next  = 22'h000000;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \fsm_state$next  = fsm_state;
    casez (fsm_state)
      2'h1:
          casez (trigger)
            1'h1:
                \fsm_state$next  = 2'h0;
          endcase
      2'h0:
          casez (\$23 )
            1'h1:
                \fsm_state$next  = 2'h2;
          endcase
      2'h2:
          casez (\$27 )
            1'h1:
                \fsm_state$next  = 2'h1;
          endcase
    endcase
    casez (rst)
      1'h1:
          \fsm_state$next  = 2'h0;
    endcase
  end
  assign \$7  = \$8 ;
  assign \$14  = \$15 ;
  assign trigger = 1'h0;
  assign phy_stop = \$3 ;
  assign phy_reset = \$1 ;
endmodule
